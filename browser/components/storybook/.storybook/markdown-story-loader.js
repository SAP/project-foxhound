/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
/* eslint-env node */

/**
 * This file contains a Webpack loader that takes markdown as its source and
 * outputs a docs only MDX Storybook story. This enables us to write docs only
 * pages in plain markdown by specifying a `.stories.md` extension.
 *
 * For more context on docs only stories, see:
 * https://storybook.js.org/docs/web-components/writing-docs/mdx#documentation-only-mdx
 *
 * The MDX generated by the loader will then get run through the same loaders
 * Storybook usually uses to transform MDX files.
 */

const path = require("path");

/**
 * Takes a file path and returns a string to use as the story title, capitalized
 * and split into multiple words. The file name gets transformed into the story
 * name, which will be visible in the Storybook sidebar. For example, either:
 *
 * /stories/hello-world.stories.md or /stories/helloWorld.md
 *
 * will result in a story named "Hello World".
 *
 * @param {string} filePath - path of the file being processed.
 * @returns {string} The title of the story.
 */
function getDocsStoryTitle(filePath) {
  let fileName = path.basename(filePath, ".stories.md");
  let pascalCaseName = toPascalCase(fileName);
  return pascalCaseName.match(/[A-Z][a-z]+/g)?.join(" ") || pascalCaseName;
}

/**
 * Transforms a string into PascalCase e.g. hello-world becomes HelloWorld.
 * @param {string} str - String in any case.
 * @returns {string} The string converted to PascalCase.
 */
function toPascalCase(str) {
  return str
    .match(/[a-z0-9]+/gi)
    .map(text => text[0].toUpperCase() + text.substring(1))
    .join("");
}

/**
 * The WebpackLoader export. Takes markdown as its source and returns a docs
 * only MDX story. For now we're filing all docs only stories under "Docs", but
 * that likely won't be desireable long term.
 *
 * @param {string} source - The markdown source to rewrite to MDX.
 */
module.exports = function markdownStoryLoader(source) {
  // `this.resourcePath` is the path of the file being processed.
  let storyTitle = getDocsStoryTitle(this.resourcePath);

  // Unfortunately the indentation/spacing here seems to be important for the
  // MDX parser to know what to do in the next step of the Webpack process.
  let mdxSource = `
import { Meta, Description } from "@storybook/addon-docs";

<Meta 
  title="Docs/${storyTitle}" 
  parameters={{
    previewTabs: {
      canvas: { hidden: true },
    },
    viewMode: "docs",
  }}
/>

${source}`;

  return mdxSource;
};
