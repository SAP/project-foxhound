diff --git a/cctools/ld64/src/ld/Resolver.cpp b/cctools/ld64/src/ld/Resolver.cpp
index bfb67a3..d5b1c67 100644
--- a/cctools/ld64/src/ld/Resolver.cpp
+++ b/cctools/ld64/src/ld/Resolver.cpp
@@ -1178,9 +1178,10 @@ void Resolver::deadStripOptimize(bool force)
 			// unset liveness, so markLive() will recurse
 			(const_cast<ld::Atom*>(atom))->setLive(0);
 		}
-		// <rdar://problem/49468634> if doing LTO, mark all libclang_rt* mach-o atoms as live since the backend may suddenly codegen uses of them
+		// <rdar://problem/49468634> if doing LTO, mark all libclang_rt* mach-o atoms as live since the backend may suddenly codegen uses of them.
+		// Likewise with rust compiler_builtins atoms. They may come from a libcompiler_builtins-<hash>.a lib, or from a compiler_builtins-... member of a rust static library.
 		else if ( _haveLLVMObjs && !force && (atom->contentType() !=  ld::Atom::typeLTOtemporary) ) {
-			if ( strstr(atom->safeFilePath(), "libclang_rt") != nullptr ) {
+			if ( strstr(atom->safeFilePath(), "libclang_rt") != nullptr || strstr(atom->safeFilePath(), "compiler_builtins") != nullptr ) {
 				_deadStripRoots.insert(atom);
 			}
 		}
diff --git a/cctools/ld64/src/ld/code-sign-blobs/blob.h b/cctools/ld64/src/ld/code-sign-blobs/blob.h
index 54afb2d..c17d19b 100644
--- a/cctools/ld64/src/ld/code-sign-blobs/blob.h
+++ b/cctools/ld64/src/ld/code-sign-blobs/blob.h
@@ -181,9 +181,6 @@ public:
 		return NULL;
 	}
 	
-	BlobType *clone() const
-	{ assert(validateBlob()); return specific(this->BlobCore::clone());	}
-
 	static BlobType *readBlob(int fd)
 	{ return specific(BlobCore::readBlob(fd, _magic, sizeof(BlobType), 0), true); }
 
