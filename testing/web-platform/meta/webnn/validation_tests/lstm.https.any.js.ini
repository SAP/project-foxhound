[lstm.https.any.html]
  [[lstm\] Test with given options]
    expected: FAIL

  [[lstm\] DataError is expected if steps equals to zero]
    expected: FAIL

  [[lstm\] DataError is expected if the data type is not one of the floating point types]
    expected: FAIL

  [[lstm\] DataError is expected if the shape of options.recurrentBias.dimensions is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if the dataType of options.peepholeWeight is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if the shape of options.initialCellState is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if the shape of weight is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if input.dimensions[0\] is not equal to steps]
    expected: FAIL

  [assert_not_equals(navigator.ml, undefined, "ml property is defined on navigator")]
    expected: FAIL

  [[lstm\] DataError is expected if the rank of input is not 3]
    expected: FAIL

  [[lstm\] DataError is expected if the size of options.activations is not 3]
    expected: FAIL

  [[lstm\] DataError is expected if the rank of options.bias is not 2]
    expected: FAIL

  [[lstm\] DataError is expected if hiddenSize is too large]
    expected: FAIL

  [[lstm\] DataError is expected if the dataType of options.initialHiddenState is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if hiddenSize equals to zero]
    expected: FAIL

  [[lstm\] Test with default options]
    expected: FAIL

  [[lstm\] DataError is expected if the rank of recurrentWeight is not 3]
    expected: FAIL

  [[lstm\] throw if input is from another builder]
    expected: FAIL

  [[lstm\] throw if weight is from another builder]
    expected: FAIL

  [[lstm\] throw if recurrentWeight is from another builder]
    expected: FAIL

  [[lstm\] throw if bias option is from another builder]
    expected: FAIL

  [[lstm\] throw if recurrentBias option is from another builder]
    expected: FAIL

  [[lstm\] throw if peepholeWeight option is from another builder]
    expected: FAIL

  [[lstm\] throw if initialHiddenState option is from another builder]
    expected: FAIL

  [[lstm\] throw if initialCellState option is from another builder]
    expected: FAIL

  [[lstm\] throw if any activation option is from another builder]
    expected: FAIL


[lstm.https.any.worker.html]
  [[lstm\] Test with default options]
    expected: FAIL

  [[lstm\] Test with given options]
    expected: FAIL

  [[lstm\] DataError is expected if hiddenSize equals to zero]
    expected: FAIL

  [[lstm\] DataError is expected if hiddenSize is too large]
    expected: FAIL

  [[lstm\] DataError is expected if steps equals to zero]
    expected: FAIL

  [[lstm\] DataError is expected if the data type is not one of the floating point types]
    expected: FAIL

  [[lstm\] DataError is expected if the rank of input is not 3]
    expected: FAIL

  [[lstm\] DataError is expected if input.dimensions[0\] is not equal to steps]
    expected: FAIL

  [[lstm\] DataError is expected if the shape of weight is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if the rank of recurrentWeight is not 3]
    expected: FAIL

  [[lstm\] DataError is expected if the size of options.activations is not 3]
    expected: FAIL

  [[lstm\] DataError is expected if the rank of options.bias is not 2]
    expected: FAIL

  [[lstm\] DataError is expected if the shape of options.recurrentBias.dimensions is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if the dataType of options.peepholeWeight is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if the dataType of options.initialHiddenState is incorrect]
    expected: FAIL

  [[lstm\] DataError is expected if the shape of options.initialCellState is incorrect]
    expected: FAIL

  [assert_not_equals(navigator.ml, undefined, "ml property is defined on navigator")]
    expected: FAIL

  [[lstm\] throw if input is from another builder]
    expected: FAIL

  [[lstm\] throw if weight is from another builder]
    expected: FAIL

  [[lstm\] throw if recurrentWeight is from another builder]
    expected: FAIL

  [[lstm\] throw if bias option is from another builder]
    expected: FAIL

  [[lstm\] throw if recurrentBias option is from another builder]
    expected: FAIL

  [[lstm\] throw if peepholeWeight option is from another builder]
    expected: FAIL

  [[lstm\] throw if initialHiddenState option is from another builder]
    expected: FAIL

  [[lstm\] throw if initialCellState option is from another builder]
    expected: FAIL

  [[lstm\] throw if any activation option is from another builder]
    expected: FAIL
