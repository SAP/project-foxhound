[lstmCell.https.any.worker.html]
  [assert_not_equals(navigator.ml, undefined, "ml property is defined on navigator")]
    expected: FAIL

  [[lstmCell\] throw if input is from another builder]
    expected: FAIL

  [[lstmCell\] throw if weight is from another builder]
    expected: FAIL

  [[lstmCell\] throw if recurrentWeight is from another builder]
    expected: FAIL

  [[lstmCell\] throw if hiddenState is from another builder]
    expected: FAIL

  [[lstmCell\] throw if cellState is from another builder]
    expected: FAIL

  [[lstmCell\] throw if bias option is from another builder]
    expected: FAIL

  [[lstmCell\] throw if recurrentBias option is from another builder]
    expected: FAIL

  [[lstmCell\] throw if peepholeWeight option is from another builder]
    expected: FAIL

  [[lstmCell\] throw if activation option is from another builder]
    expected: FAIL

  [[lstmCell\] Test with default options]
    expected: FAIL

  [[lstmCell\] Test with given options]
    expected: FAIL

  [[lstmCell\] Throw if hiddenSize is equal to zero]
    expected: FAIL

  [[lstmCell\] Throw if hiddenSize is too large]
    expected: FAIL

  [[lstmCell\] Throw if the input data type is not one of the floating point types]
    expected: FAIL

  [[lstmCell\] Throw if the rank of input is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of input is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of weight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of weight is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of weight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of recurrentWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of recurrentWeight is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of recurrentWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of hiddenState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of hiddenState is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of hiddenState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of cellState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of cellState is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of cellState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of options.bias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of options.bias is not 1]
    expected: FAIL

  [[lstmCell\] Throw if the shape of options.bias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of options.recurrentBias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of options.recurrentBias is not 1]
    expected: FAIL

  [[lstmCell\] Throw if the shape of options.recurrentBias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of options.peepholeWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of options.peepholeWeight is not 1]
    expected: FAIL

  [[lstmCell\] Throw if the shape of options.peepholeWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the size of options.activations is not 3]
    expected: FAIL


[lstmCell.https.any.html]
  [assert_not_equals(navigator.ml, undefined, "ml property is defined on navigator")]
    expected: FAIL

  [[lstmCell\] throw if input is from another builder]
    expected: FAIL

  [[lstmCell\] throw if weight is from another builder]
    expected: FAIL

  [[lstmCell\] throw if recurrentWeight is from another builder]
    expected: FAIL

  [[lstmCell\] throw if hiddenState is from another builder]
    expected: FAIL

  [[lstmCell\] throw if cellState is from another builder]
    expected: FAIL

  [[lstmCell\] throw if bias option is from another builder]
    expected: FAIL

  [[lstmCell\] throw if recurrentBias option is from another builder]
    expected: FAIL

  [[lstmCell\] throw if peepholeWeight option is from another builder]
    expected: FAIL

  [[lstmCell\] throw if activation option is from another builder]
    expected: FAIL

  [[lstmCell\] Test with default options]
    expected: FAIL

  [[lstmCell\] Test with given options]
    expected: FAIL

  [[lstmCell\] Throw if hiddenSize is equal to zero]
    expected: FAIL

  [[lstmCell\] Throw if hiddenSize is too large]
    expected: FAIL

  [[lstmCell\] Throw if the input data type is not one of the floating point types]
    expected: FAIL

  [[lstmCell\] Throw if the rank of input is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of input is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of weight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of weight is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of weight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of recurrentWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of recurrentWeight is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of recurrentWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of hiddenState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of hiddenState is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of hiddenState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of cellState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of cellState is not 2]
    expected: FAIL

  [[lstmCell\] Throw if the shape of cellState is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of options.bias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of options.bias is not 1]
    expected: FAIL

  [[lstmCell\] Throw if the shape of options.bias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of options.recurrentBias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of options.recurrentBias is not 1]
    expected: FAIL

  [[lstmCell\] Throw if the shape of options.recurrentBias is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the data type of options.peepholeWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the rank of options.peepholeWeight is not 1]
    expected: FAIL

  [[lstmCell\] Throw if the shape of options.peepholeWeight is incorrect]
    expected: FAIL

  [[lstmCell\] Throw if the size of options.activations is not 3]
    expected: FAIL
