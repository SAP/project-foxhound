[gru.https.any.html]
  [[gru\] Test with default options]
    expected: FAIL

  [[gru\] TypeError is expected if hiddenSize equals to zero]
    expected: FAIL

  [[gru\] TypeError is expected if the data type of the inputs is not one of the floating point types]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of options.initialHiddenState is not 3]
    expected: FAIL

  [[gru\] TypeError is expected if the size of options.activations is not 2]
    expected: FAIL

  [[gru\] TypeError is expected if options.initialHiddenState.dimensions[2\] is not inputSize]
    expected: FAIL

  [[gru\] TypeError is expected if hiddenSize is too large]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of recurrentWeight is not 3]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of options.bias is not 2]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of input is not 3]
    expected: FAIL

  [[gru\] TypeError is expected if input.dimensions[0\] is not equal to steps]
    expected: FAIL

  [[gru\] TypeError is expected if options.recurrentBias.dimensions[1\] is not 3 * hiddenSize]
    expected: FAIL

  [[gru\] Test with given options]
    expected: FAIL

  [[gru\] TypeError is expected if weight.dimensions[1\] is not 3 * hiddenSize]
    expected: FAIL

  [[gru\] TypeError is expected if the recurrentWeight.dimensions is invalid]
    expected: FAIL

  [[gru\] TypeError is expected if options.bias.dimensions[1\] is not 3 * hiddenSize]
    expected: FAIL

  [[gru\] TypeError is expected if the dataType of options.initialHiddenState is incorrect]
    expected: FAIL

  [[gru\] TypeError is expected if steps equals to zero]
    expected: FAIL

  [assert_not_equals(navigator.ml, undefined, "ml property is defined on navigator")]
    expected: FAIL

  [[gru\] throw if input is from another builder]
    expected: FAIL

  [[gru\] throw if weight is from another builder]
    expected: FAIL

  [[gru\] throw if recurrentWeight is from another builder]
    expected: FAIL

  [[gru\] throw if bias option is from another builder]
    expected: FAIL

  [[gru\] throw if recurrentBias option is from another builder]
    expected: FAIL

  [[gru\] throw if initialHiddenState option is from another builder]
    expected: FAIL

  [[gru\] throw if any activation option is from another builder]
    expected: FAIL


[gru.https.any.worker.html]
  [[gru\] Test with default options]
    expected: FAIL

  [[gru\] Test with given options]
    expected: FAIL

  [[gru\] TypeError is expected if steps equals to zero]
    expected: FAIL

  [[gru\] TypeError is expected if hiddenSize equals to zero]
    expected: FAIL

  [[gru\] TypeError is expected if hiddenSize is too large]
    expected: FAIL

  [[gru\] TypeError is expected if the data type of the inputs is not one of the floating point types]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of input is not 3]
    expected: FAIL

  [[gru\] TypeError is expected if input.dimensions[0\] is not equal to steps]
    expected: FAIL

  [[gru\] TypeError is expected if weight.dimensions[1\] is not 3 * hiddenSize]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of recurrentWeight is not 3]
    expected: FAIL

  [[gru\] TypeError is expected if the recurrentWeight.dimensions is invalid]
    expected: FAIL

  [[gru\] TypeError is expected if the size of options.activations is not 2]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of options.bias is not 2]
    expected: FAIL

  [[gru\] TypeError is expected if options.bias.dimensions[1\] is not 3 * hiddenSize]
    expected: FAIL

  [[gru\] TypeError is expected if options.recurrentBias.dimensions[1\] is not 3 * hiddenSize]
    expected: FAIL

  [[gru\] TypeError is expected if the rank of options.initialHiddenState is not 3]
    expected: FAIL

  [[gru\] TypeError is expected if options.initialHiddenState.dimensions[2\] is not inputSize]
    expected: FAIL

  [[gru\] TypeError is expected if the dataType of options.initialHiddenState is incorrect]
    expected: FAIL

  [assert_not_equals(navigator.ml, undefined, "ml property is defined on navigator")]
    expected: FAIL

  [[gru\] throw if input is from another builder]
    expected: FAIL

  [[gru\] throw if weight is from another builder]
    expected: FAIL

  [[gru\] throw if recurrentWeight is from another builder]
    expected: FAIL

  [[gru\] throw if bias option is from another builder]
    expected: FAIL

  [[gru\] throw if recurrentBias option is from another builder]
    expected: FAIL

  [[gru\] throw if initialHiddenState option is from another builder]
    expected: FAIL

  [[gru\] throw if any activation option is from another builder]
    expected: FAIL
