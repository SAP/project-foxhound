[cancel.any.sharedworker.html]
  [cancelling the readable side should call transformer.cancel()]
    expected: FAIL

  [cancelling the readable side should reject if transformer.cancel() throws]
    expected: FAIL

  [aborting the writable side should call transformer.abort()]
    expected: FAIL

  [aborting the writable side should reject if transformer.cancel() throws]
    expected: FAIL

  [closing the writable side should reject if a parallel transformer.cancel() throws]
    expected: FAIL

  [readable.cancel() and a parallel writable.close() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [writable.abort() and readable.cancel() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [readable.cancel() should not call cancel() again when already called from writable.abort()]
    expected: FAIL

  [writable.close() should not call flush() when cancel() is already called from readable.cancel()]
    expected: FAIL

  [writable.abort() should not call cancel() again when already called from readable.cancel()]
    expected: FAIL


[cancel.any.serviceworker.html]
  expected:
    if (os == "mac") and not debug: [OK, ERROR]
  [cancelling the readable side should call transformer.cancel()]
    expected: FAIL

  [cancelling the readable side should reject if transformer.cancel() throws]
    expected: FAIL

  [aborting the writable side should call transformer.abort()]
    expected: FAIL

  [aborting the writable side should reject if transformer.cancel() throws]
    expected: FAIL

  [closing the writable side should reject if a parallel transformer.cancel() throws]
    expected: FAIL

  [readable.cancel() and a parallel writable.close() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [writable.abort() and readable.cancel() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [readable.cancel() should not call cancel() again when already called from writable.abort()]
    expected: FAIL

  [writable.close() should not call flush() when cancel() is already called from readable.cancel()]
    expected: FAIL

  [writable.abort() should not call cancel() again when already called from readable.cancel()]
    expected: FAIL


[cancel.any.shadowrealm.html]
  expected: ERROR

[cancel.any.worker.html]
  expected:
    if os == "android": [OK, CRASH]
  [cancelling the readable side should call transformer.cancel()]
    expected: FAIL

  [cancelling the readable side should reject if transformer.cancel() throws]
    expected: FAIL

  [aborting the writable side should call transformer.abort()]
    expected: FAIL

  [aborting the writable side should reject if transformer.cancel() throws]
    expected: FAIL

  [closing the writable side should reject if a parallel transformer.cancel() throws]
    expected: FAIL

  [readable.cancel() and a parallel writable.close() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [writable.abort() and readable.cancel() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [readable.cancel() should not call cancel() again when already called from writable.abort()]
    expected: FAIL

  [writable.close() should not call flush() when cancel() is already called from readable.cancel()]
    expected: FAIL

  [writable.abort() should not call cancel() again when already called from readable.cancel()]
    expected: FAIL


[cancel.any.html]
  expected:
    if (os == "android") and not debug: [OK, CRASH]
  [cancelling the readable side should call transformer.cancel()]
    expected: FAIL

  [cancelling the readable side should reject if transformer.cancel() throws]
    expected: FAIL

  [aborting the writable side should call transformer.abort()]
    expected: FAIL

  [aborting the writable side should reject if transformer.cancel() throws]
    expected: FAIL

  [closing the writable side should reject if a parallel transformer.cancel() throws]
    expected: FAIL

  [readable.cancel() and a parallel writable.close() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [writable.abort() and readable.cancel() should reject if a transformer.cancel() calls controller.error()]
    expected: FAIL

  [readable.cancel() should not call cancel() again when already called from writable.abort()]
    expected: FAIL

  [writable.close() should not call flush() when cancel() is already called from readable.cancel()]
    expected: FAIL

  [writable.abort() should not call cancel() again when already called from readable.cancel()]
    expected: FAIL


[cancel.https.any.shadowrealm-in-audioworklet.html]
  expected: ERROR

[cancel.https.any.shadowrealm-in-serviceworker.html]
  expected:
    if (os == "linux") and debug and fission: [TIMEOUT, ERROR]
    if (os == "linux") and not debug: [TIMEOUT, ERROR]
    [ERROR, TIMEOUT]

[cancel.any.shadowrealm-in-sharedworker.html]
  expected: ERROR

[cancel.any.shadowrealm-in-window.html]
  expected: ERROR

[cancel.any.shadowrealm-in-dedicatedworker.html]
  expected: ERROR

[cancel.any.shadowrealm-in-shadowrealm.html]
  expected: ERROR
