[fedcm-network-requests.https.html]
  expected: ERROR
  [Test the abort signal]
    expected:
      if os == "linux": [FAIL, TIMEOUT]
      FAIL

  [Successfully obtaining token should resolve the promise.]
    expected: FAIL

  [Test that the promise is rejected if the manifest is not in the manifest list]
    expected:
      if os == "linux": [FAIL, TIMEOUT, NOTRUN]
      FAIL

  [Reject when configURL is invalid]
    expected: FAIL

  [Reject when configURL is missing]
    expected: FAIL

  [Test that token endpoint does not follow redirects]
    expected:
      if os == "win": [FAIL, TIMEOUT]
      if os == "linux": [NOTRUN, FAIL, TIMEOUT]
      FAIL

  [Test that service worker cannot observe fetches performed by FedCM API]
    expected:
      if os == "win": [TIMEOUT, FAIL, NOTRUN]
      if os == "linux": [NOTRUN, TIMEOUT]
      FAIL

  [Reject when provider list is empty]
    expected: FAIL

  [Get after abort should work]
    expected:
      if os == "linux": [FAIL, TIMEOUT, NOTRUN]
      FAIL

  [Reject when clientId is missing]
    expected: FAIL

  [When there's a pending request, a second `get` call should be rejected. ]
    expected: FAIL

  [nonce is not required in FederatedIdentityProvider.]
    expected: FAIL

  [Test that promise is rejected if accounts endpoint redirects]
    expected:
      if os == "linux": [TIMEOUT, FAIL, NOTRUN]
      FAIL

  [Test client_metadata request]
    expected:
      if os == "win": [FAIL, TIMEOUT, NOTRUN]
      if os == "linux": [NOTRUN, FAIL, TIMEOUT]
      FAIL

  [Reject when clientId is empty]
    expected: FAIL

  [Test that User Info API does not work in the top frame]
    expected:
      if os == "linux": NOTRUN
      if os == "win": [NOTRUN, FAIL]
      [FAIL, NOTRUN]

  [Test that User Info API only works when invoked from iframe that is same origin as the IDP]
    expected:
      if os == "win": [NOTRUN, FAIL, TIMEOUT]
      if os == "linux": NOTRUN
      [FAIL, TIMEOUT, NOTRUN]

  [Test basic User InFo API flow]
    expected:
      if os == "win": [NOTRUN, FAIL]
      if os == "mac": [FAIL, TIMEOUT]
      NOTRUN
