[worker-interception-redirect.https.html]
  max-asserts: 2
  expected:
    if (os == "android") and debug: [OK, ERROR]
  [Case #3: sw scope1->scope2 (classic SharedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #1: network scope1->scope2 (classic SharedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #4: sw scope1->out-scope (module DedicatedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #3: sw scope1->scope2 (module SharedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #4: sw scope1->out-scope (classic DedicatedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #1: network scope1->scope2 (module DedicatedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #2: network scope1->out-scope (classic DedicatedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #2: network scope1->out-scope (module SharedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #1: network scope1->scope2 (module SharedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #2: network scope1->out-scope (module DedicatedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #2: network scope1->out-scope (classic SharedWorker, importScripts())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #3: sw scope1->scope2 (module DedicatedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #4: sw scope1->out-scope (module SharedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #1: network scope1->scope2 (classic SharedWorker, importScripts())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #1: network scope1->scope2 (classic DedicatedWorker, importScripts())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #2: network scope1->out-scope (classic DedicatedWorker, importScripts())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #3: sw scope1->scope2 (classic DedicatedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #4: sw scope1->out-scope (classic SharedWorker)]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #1: network scope1->scope2 (classic DedicatedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [Case #2: network scope1->out-scope (classic SharedWorker, fetch())]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]

  [initialize global state]
    expected:
      if (os == "linux") and not debug and fission: [PASS, FAIL]
