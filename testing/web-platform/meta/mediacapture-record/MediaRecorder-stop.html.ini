[MediaRecorder-stop.html]
  expected:
    if (os == "linux") and not debug and fission: [OK, CRASH]
  [MediaRecorder will fire only start and stop events in a basic recording flow.]
    expected:
      if (os == "win") and debug and (processor == "x86_64") and not swgl: [FAIL, PASS]
      if (os == "linux") and fission and swgl: PASS
      if (os == "linux") and not fission and not debug: PASS
      if os == "android": PASS
      [PASS, FAIL]


[MediaRecorder-stop.html?mimeType=video/webm;codecs=vp9,opus]
  [MediaRecorder will stop recording and fire a stop event when all tracks are ended]
    expected: PRECONDITION_FAILED

  [MediaRecorder will stop recording and fire a stop event when stop() is called]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after creation]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been spontaneously stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if stopped synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if a track is removed synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire only start and stop events in a basic recording flow.]
    expected: PRECONDITION_FAILED


[MediaRecorder-stop.html?mimeType=video/webm;codecs=vp8,opus]
  expected: TIMEOUT
  [MediaRecorder will stop recording and fire a stop event when all tracks are ended]
    expected: TIMEOUT

  [MediaRecorder will stop recording and fire a stop event when stop() is called]
    expected: NOTRUN

  [MediaRecorder will not fire an exception when stopped after creation]
    expected: NOTRUN

  [MediaRecorder will not fire an exception when stopped after having just been stopped]
    expected: NOTRUN

  [MediaRecorder will not fire an exception when stopped after having just been spontaneously stopped]
    expected: NOTRUN

  [MediaRecorder will fire start event even if stopped synchronously]
    expected: NOTRUN

  [MediaRecorder will fire start event even if a track is removed synchronously]
    expected: NOTRUN

  [MediaRecorder will fire only start and stop events in a basic recording flow.]
    expected: NOTRUN


[MediaRecorder-stop.html?mimeType=video/webm;codecs=av1,opus]
  [MediaRecorder will stop recording and fire a stop event when all tracks are ended]
    expected: PRECONDITION_FAILED

  [MediaRecorder will stop recording and fire a stop event when stop() is called]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after creation]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been spontaneously stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if stopped synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if a track is removed synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire only start and stop events in a basic recording flow.]
    expected: PRECONDITION_FAILED


[MediaRecorder-stop.html?mimeType=video/mp4;codecs=avc1,mp4a.40.2]
  [MediaRecorder will stop recording and fire a stop event when all tracks are ended]
    expected: PRECONDITION_FAILED

  [MediaRecorder will stop recording and fire a stop event when stop() is called]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after creation]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been spontaneously stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if stopped synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if a track is removed synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire only start and stop events in a basic recording flow.]
    expected: PRECONDITION_FAILED


[MediaRecorder-stop.html?mimeType='']
  [MediaRecorder will stop recording and fire a stop event when all tracks are ended]
    expected: PRECONDITION_FAILED

  [MediaRecorder will stop recording and fire a stop event when stop() is called]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after creation]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will not fire an exception when stopped after having just been spontaneously stopped]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if stopped synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire start event even if a track is removed synchronously]
    expected: PRECONDITION_FAILED

  [MediaRecorder will fire only start and stop events in a basic recording flow.]
    expected: PRECONDITION_FAILED
