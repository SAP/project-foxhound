<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
                 type="text/css"?>

<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        title="Tests: accessible XUL label/description events">

  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />

  <script type="application/javascript"
          src="../common.js" />
  <script type="application/javascript"
          src="../role.js" />
  <script type="application/javascript"
          src="../events.js" />

  <script type="application/javascript">
  <![CDATA[
    ////////////////////////////////////////////////////////////////////////////
    // Invokers

    const kRecreated = 0;
    const kTextRemoved = 1;
    const kTextChanged = 2;

    const kNoValue = 0;

    /**
     * Set/remove @value attribute.
     */
    function setValue(aID, aValue, aResult, aOldValue)
    {
      this.labelNode = getNode(aID);

      this.eventSeq = [];

      switch (aResult) {
        case kRecreated:
          this.eventSeq.push(new invokerChecker(EVENT_HIDE, this.labelNode));
          this.eventSeq.push(new invokerChecker(EVENT_SHOW, this.labelNode));
          break;
        case kTextRemoved:
          this.eventSeq.push(
            new textChangeChecker(this.labelNode, 0, aOldValue.length,
                                  aOldValue, false));
          break;
        case kTextChanged:
          this.eventSeq.push(
            new textChangeChecker(this.labelNode, 0, aOldValue.length,
                                  aOldValue, false));
           this.eventSeq.push(
             new textChangeChecker(this.labelNode, 0, aValue.length,
                                   aValue, true));
          break;
      }

      this.invoke = function setValue_invoke()
      {
        if (aValue === kNoValue)
          this.labelNode.removeAttribute("value");
        else
          this.labelNode.setAttribute("value", aValue);
      }

      this.finalCheck = function setValue_finalCheck()
      {
        let tree =
          { LABEL: [] };

        const expectChild = (() => {
          if (aValue === kNoValue) {
            return false;
          }
          if (aValue === "") {
            return this.labelNode.nodeName == "label";
          }
          return true;
        })();

        if (expectChild) {
          tree.LABEL.push({ STATICTEXT: [ ] });
        }
        testAccessibleTree(aID, tree);
      }

      this.getID = function setValue_getID()
      {
        return "set @value='" + aValue + "' for label " + prettyName(aID);
      }
    }

    /**
     * Change @crop attribute.
     */
    function setCrop(aID, aCropValue, aRemovedText, aInsertedText)
    {
      this.labelNode = getNode(aID);
      this.width = this.labelNode.getBoundingClientRect().width;
      this.charWidth = this.width / this.labelNode.value.length;

      this.eventSeq = [
        new invokerChecker(EVENT_HIDE, this.labelNode),
        new invokerChecker(EVENT_SHOW, this.labelNode),
      ];

      this.invoke = function setCrop_invoke()
      {
        if (!this.labelNode.hasAttribute("crop"))
          this.labelNode.style.width = Math.floor(this.width - 2 * this.charWidth) + "px";

        this.labelNode.setAttribute("crop", aCropValue);
      }

      this.getID = function setCrop_finalCheck()
      {
        return "set crop " + aCropValue;
      }
    }

    ////////////////////////////////////////////////////////////////////////////
    // Test

    gA11yEventDumpToConsole = true;

    var gQueue = null;
    function doTest()
    {
      gQueue = new eventQueue();

      gQueue.push(new setValue("label", "shiroka strana", kRecreated));
      gQueue.push(new setValue("label", "?<>!+_", kTextChanged, "shiroka strana"));
      gQueue.push(new setValue("label", "", kRecreated));
      gQueue.push(new setValue("label", kNoValue, kRecreated));

      gQueue.push(new setValue("descr", "hello world", kRecreated));
      gQueue.push(new setValue("descr", "si_ya", kTextChanged, "hello world"));
      gQueue.push(new setValue("descr", "", kTextRemoved, "si_ya"));
      gQueue.push(new setValue("descr", kNoValue, kRecreated));

      gQueue.push(new setCrop("croplabel", "center"));

      gQueue.invoke(); // Will call SimpleTest.finish();
    }

    SimpleTest.waitForExplicitFinish();
    addA11yLoadEvent(doTest);
  ]]>
  </script>

  <hbox flex="1" style="overflow: auto;">
    <body xmlns="http://www.w3.org/1999/xhtml">
      <a target="_blank"
         href="https://bugzilla.mozilla.org/show_bug.cgi?id=396166"
         title="xul:label@value accessible should implement nsIAccessibleText">
        Bug 396166
      </a>
      <br/>
      <p id="display"></p>
      <div id="content" style="display: none">
      </div>
      <pre id="test">
      </pre>
    </body>

    <vbox flex="1">
      <label id="label"/>
      <description id="descr"/>

      <hbox>
      <label id="croplabel" value="valuetocro"
             style="font-family: monospace;"/>
      </hbox>
    </vbox>
  </hbox>

</window>

