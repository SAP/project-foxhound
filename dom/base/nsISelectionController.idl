/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


#include "nsISelectionDisplay.idl"

%{C++
using SelectionRegion = short;

namespace mozilla {
namespace dom {
class Selection;
} // namespace dom

struct ScrollAxis;
enum class ScrollFlags : uint8_t;
enum class SelectionScrollMode : uint8_t;

// RawSelectionType should be used to store nsISelectionController::SELECTION_*.
using RawSelectionType = short;

// SelectionTypeMask should be used to store bit-mask of selection types.
// The value can be retrieved with ToSelectionTypeMask() and checking if
// a selection type is in a mask with |SelectionType & SelectionTypeMask|.
using SelectionTypeMask = uint16_t;

// SelectionType should be used in internal handling because of type safe.
enum class SelectionType : RawSelectionType;

} // namespace mozilla

%}

interface nsIContent;
interface nsISelectionDisplay;

webidl Node;
webidl Selection;

[builtinclass, scriptable, uuid(3801c9d4-8e69-4bfc-9edb-b58278621f8f)]
interface nsISelectionController : nsISelectionDisplay
{
  // Begin of RawSelectionType values.
  const short SELECTION_NONE                      = 0;
  // Corresponds to the Selection exposed via window.getSelection() and
  // document.getSelection().
  const short SELECTION_NORMAL                    = 1;
  // Corresponds to the Selection used for spellchecking in <textarea>s and
  // "contentEditable" elements.
  const short SELECTION_SPELLCHECK                = 2;
  const short SELECTION_IME_RAWINPUT              = 3;
  const short SELECTION_IME_SELECTEDRAWTEXT       = 4;
  const short SELECTION_IME_CONVERTEDTEXT         = 5;
  const short SELECTION_IME_SELECTEDCONVERTEDTEXT = 6;
  // For accessibility API usage
  const short SELECTION_ACCESSIBILITY             = 7;
  const short SELECTION_FIND                      = 8;
  const short SELECTION_URLSECONDARY              = 9;
  const short SELECTION_URLSTRIKEOUT              = 10;
  const short SELECTION_TARGET_TEXT               = 11;
  // Custom Highlight API
  // (see https://drafts.csswg.org/css-highlight-api-1/#enumdef-highlighttype)
  const short SELECTION_HIGHLIGHT                 = 12;
  // End of RawSelectionType values.
  const short NUM_SELECTIONTYPES                  = 13;

  // SelectionRegion values:
  const short SELECTION_ANCHOR_REGION = 0;
  const short SELECTION_FOCUS_REGION = 1;
  const short SELECTION_WHOLE_SELECTION = 2;
  const short NUM_SELECTION_REGIONS = 3;

  const short SELECTION_OFF = 0;
  const short SELECTION_HIDDEN =1;//>HIDDEN displays selection
  const short SELECTION_ON = 2;
  const short SELECTION_DISABLED = 3;
  const short SELECTION_ATTENTION = 4;

  /**
   * SetDisplaySelection will set the display mode for the selection. OFF,ON,DISABLED
   */
  void setDisplaySelection(in short toggle);

  /**
   * GetDisplaySelection will get the display mode for the selection. OFF,ON,DISABLED
   */
  short getDisplaySelection();

  /**
   * GetSelection will return the selection that the presentation
   *  shell may implement.
   *
   * @param aType This will hold the type of selection.  This value must be one
   *              of RawSelectionType values.
   * @param _return will hold the return value
   */
  [binaryname(GetSelectionFromScript)]
  Selection getSelection(in short type);

  /**
   * Return the selection object corresponding to a selection type.
   */
  [noscript,nostdcall,notxpcom,binaryname(GetSelection)]
  Selection getDOMSelection(in short aType);

  /**
   * Called when the selection controller should take the focus.
   *
   * This will take care to hide the previously-focused selection, show this
   * selection, and repaint both.
   */
  [noscript,nostdcall,notxpcom]
  void selectionWillTakeFocus();

  /**
   * Called when the selection controller has lost the focus.
   *
   * This will take care to hide and repaint the selection.
   */
  [noscript,nostdcall,notxpcom]
  void selectionWillLoseFocus();

  cenum ControllerScrollFlags : 8 {
    // Scrolls the selection into view before returning.
    SCROLL_SYNCHRONOUS = 1 << 1,
    // Only the first ancestor will be scrolled into view.
    // Note that this flushes layout, and thus can run script.
    // See bug 418470 comment 12.
    SCROLL_FIRST_ANCESTOR_ONLY = 1 << 2,
    // Scrolls even if overflow is set to hidden.
    SCROLL_OVERFLOW_HIDDEN = 1 << 3,
    // No flag scrolls to nearest, vertically.
    SCROLL_VERTICAL_NEAREST = 0,
    SCROLL_VERTICAL_START = 1 << 4,
    SCROLL_VERTICAL_CENTER = 1 << 5,
    SCROLL_VERTICAL_END = 1 << 6,
  };

  /**
   * ScrollSelectionIntoView scrolls a region of the selection,
   * so that it is visible in the scrolled view.
   *
   * @param aType the selection to scroll into view.  This value must be one
   *              of RawSelectionType values.
   * @param aRegion the region inside the selection to scroll into view. //SelectionRegion
   * @param aFlags the scroll flags.
   */
  void scrollSelectionIntoView(in short type, in short region, in nsISelectionController_ControllerScrollFlags flags);

  /**
   * RepaintSelection repaints the selection specified by aType.
   *
   * @param aType specifies the selection to repaint.
   */
  void repaintSelection(in short type);

  /**
   * Set the caret as enabled or disabled. An enabled caret will
   * draw or blink when made visible. A disabled caret will never show up.
   * Can be called any time.
   * @param aEnable true to enable caret.  false to disable.
   * @return always NS_OK
   */
  void setCaretEnabled(in boolean enabled);

  /**
   * Set the caret readonly or not. An readonly caret will
   * draw but not blink when made visible.
   * @param aReadOnly true to enable caret.  false to disable.
   * @return always NS_OK
   */
  void setCaretReadOnly(in boolean readOnly);

  /**
   * Gets the current state of the caret.
   * @param aEnabled  [OUT] set to the current caret state, as set by SetCaretEnabled
   * @return   if aOutEnabled==null, returns NS_ERROR_INVALID_ARG
   *           else NS_OK
   */
  boolean getCaretEnabled();

  /**
   * This is true if the caret is enabled, visible, and currently blinking.
   * This is still true when the caret is enabled, visible, but in its "off"
   * blink cycle.
   */
  readonly attribute boolean caretVisible;

  /**
   * Show the caret even in selections. By default the caret is hidden unless the
   * selection is collapsed. Use this function to show the caret even in selections.
   * @param aVisibility true to show the caret in selections.  false to hide.
   * @return always NS_OK
   */
  void setCaretVisibilityDuringSelection(in boolean visibility);

  /** CharacterMove will move the selection one character forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = false
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if false
   *  @param aExtend  should it collapse the selection of extend it?
   */
  void characterMove(in boolean forward, in boolean extend);

  /** PhysicalMove will move the selection one "unit" in a given direction
   *  within the document.
   *  this will also have the effect of collapsing the selection if the aExtend = false
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aDirection
   *  @param aAmount    character/line; word/lineBoundary
   *  @param aExtend    should it collapse the selection of extend it?
   */
  void physicalMove(in short direction, in short amount, in boolean extend);

  /**
   * nsFrameSelection::PhysicalMove depends on the ordering of these values;
   * do not change without checking there!
   */
  const short MOVE_LEFT = 0;
  const short MOVE_RIGHT = 1;
  const short MOVE_UP = 2;
  const short MOVE_DOWN = 3;

  /** WordMove will move the selection one word forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = false
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if false
   *  @param aExtend  should it collapse the selection of extend it?
   */
  void wordMove(in boolean forward, in boolean extend);

  /** LineMove will move the selection one line forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = false
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if false
   *  @param aExtend  should it collapse the selection of extend it?
   */
  void lineMove(in boolean forward, in boolean extend);

  /** IntraLineMove will move the selection to the front of the line or end of the line
   *  in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = false
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if false
   *  @param aExtend  should it collapse the selection of extend it?
   */
  void intraLineMove(in boolean forward, in boolean extend);

  /** PageMove will move the selection one page forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = false
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if false
   *  @param aExtend  should it collapse the selection of extend it?
   */
  [can_run_script]
  void pageMove(in boolean forward, in boolean extend);

  /** CompleteScroll will move page view to the top or bottom of the document
   *  @param aForward forward or backward if false
   */
  void completeScroll(in boolean forward);

  /** CompleteMove will move page view to the top or bottom of the document
   *  this will also have the effect of collapsing the selection if the aExtend = false
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if false
   *  @param aExtend  should it collapse the selection of extend it?
   */
  [can_run_script]
  void completeMove(in boolean forward, in boolean extend);


  /** ScrollPage will scroll the page without affecting the selection.
   *  @param aForward scroll forward or backwards in selection
   */
  void scrollPage(in boolean forward);

  /** ScrollLine will scroll line up or down dependent on the boolean
   *  @param aForward scroll forward or backwards in selection
   */
  void scrollLine(in boolean forward);

  /** ScrollCharacter will scroll right or left dependent on the boolean
   *  @param aRight if true will scroll right. if not will scroll left.
   */
  void scrollCharacter(in boolean right);

%{C++
  // Like the XPCOM method, but more convenient and flexible for C++ callers. Implemented in Selection.h
  // TODO: Use `MOZ_CAN_RUN_SCRIPT`, but it's a bit tricky because whether it
  // can run script depends on the SelectionScrollMode.
  MOZ_CAN_RUN_SCRIPT_BOUNDARY inline nsresult ScrollSelectionIntoView(
    mozilla::SelectionType, SelectionRegion,
    const mozilla::ScrollAxis& aVertical, const mozilla::ScrollAxis& aHorizontal,
    mozilla::ScrollFlags, mozilla::SelectionScrollMode);
  MOZ_CAN_RUN_SCRIPT_BOUNDARY inline nsresult ScrollSelectionIntoView(
    mozilla::SelectionType, SelectionRegion,
    mozilla::SelectionScrollMode);
%}
};
%{C++

namespace mozilla {

// SelectionType should be used in internal handling code as it is type safe.
enum class SelectionType : RawSelectionType {
  eInvalid = -1,
  eNone = nsISelectionController::SELECTION_NONE,
  eNormal = nsISelectionController::SELECTION_NORMAL,
  eSpellCheck = nsISelectionController::SELECTION_SPELLCHECK,
  eIMERawClause = nsISelectionController::SELECTION_IME_RAWINPUT,
  eIMESelectedRawClause = nsISelectionController::SELECTION_IME_SELECTEDRAWTEXT,
  eIMEConvertedClause = nsISelectionController::SELECTION_IME_CONVERTEDTEXT,
  eIMESelectedClause =
    nsISelectionController::SELECTION_IME_SELECTEDCONVERTEDTEXT,
  eAccessibility = nsISelectionController::SELECTION_ACCESSIBILITY,
  eFind = nsISelectionController::SELECTION_FIND,
  eURLSecondary = nsISelectionController::SELECTION_URLSECONDARY,
  eURLStrikeout = nsISelectionController::SELECTION_URLSTRIKEOUT,
  eTargetText = nsISelectionController::SELECTION_TARGET_TEXT,
  eHighlight = nsISelectionController::SELECTION_HIGHLIGHT,
};

// kPresentSelectionTypes is selection types which may be displayed.
// I.e., selection types except eNone.
static const SelectionType kPresentSelectionTypes[] = {
  SelectionType::eNormal,
  SelectionType::eSpellCheck,
  SelectionType::eIMERawClause,
  SelectionType::eIMESelectedRawClause,
  SelectionType::eIMEConvertedClause,
  SelectionType::eIMESelectedClause,
  SelectionType::eAccessibility,
  SelectionType::eFind,
  SelectionType::eURLSecondary,
  SelectionType::eURLStrikeout,
  SelectionType::eTargetText,
  SelectionType::eHighlight,
};

// Please include mozilla/dom/Selection.h for the following APIs.
constexpr bool IsValidRawSelectionType(RawSelectionType aRawSelectionType);
constexpr SelectionType ToSelectionType(RawSelectionType aRawSelectionType);
constexpr RawSelectionType ToRawSelectionType(SelectionType aSelectionType);
constexpr SelectionTypeMask ToSelectionTypeMask(SelectionType aSelectionType);

} // namespace mozilla
%}
