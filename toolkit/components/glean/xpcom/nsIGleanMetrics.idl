/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, uuid(05b89d2a-d57c-11ea-82da-3f63399a6f5a)]
interface nsIGleanCounter : nsISupports
{
  /*
  * Increases the counter by `amount`.
  *
  * @param amount The amount to increase by. Should be positive.
  */
  [implicit_jscontext]
  void add(in uint32_t amount);

  /**
   * **Test-only API**
   *
   * Tests whether a value is stored for the metric.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * Parent process only. Panics in child processes.
   *
   * @param aStorageName the name of the ping to retrieve the metric for.
   * @return true if metric value exists, otherwise false
   */
  [implicit_jscontext]
  bool testHasValue(in ACString aStorageName);

  /**
   * **Test-only API**
   *
   * Gets the currently stored value as an integer.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * This doesn't clear the stored value.
   * Parent process only. Panics in child processes.
   *
   * @return value of the stored metric.
   */
  [implicit_jscontext]
  long testGetValue(in ACString aStorageName);
};

[scriptable, uuid(d84a3555-46f1-48c1-9122-e8e88b069d2b)]
interface nsIGleanString : nsISupports
{
  /*
  * Set to the specified value.
  *
  * @param value The string to set the metric to.
  */
  [implicit_jscontext]
  void set(in ACString value);

  /**
   * **Test-only API**
   *
   * Tests whether a value is stored for the metric.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * Parent process only. Panics in child processes.
   *
   * @param aStorageName the name of the ping to retrieve the metric for.
   * @return true if metric value exists, otherwise false
   */
  [implicit_jscontext]
  bool testHasValue(in ACString aStorageName);

  /**
   * **Test-only API**
   *
   * Gets the currently stored value as a string.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * This doesn't clear the stored value.
   * Parent process only. Panics in child processes.
   *
   * @return value of the stored metric.
   */
  [implicit_jscontext]
  ACString testGetValue(in ACString aStorageName);
};

[scriptable, uuid(2586530c-030f-11eb-93cb-cbf30d25225a)]
interface nsIGleanTimespan : nsISupports
{
  /**
   * Start tracking time for the provided metric.
   *
   * This records an error if itâ€™s already tracking time (i.e. start was already
   * called with no corresponding [stop]): in that case the original
   * start time will be preserved.
   */
  [implicit_jscontext]
  void start();

  /**
   * Stop tracking time for the provided metric.
   *
   * Sets the metric to the elapsed time, but does not overwrite an already
   * existing value.
   * This will record an error if no [start] was called or there is an already
   * existing value.
   */
  [implicit_jscontext]
  void stop();

  /**
   * **Test-only API**
   *
   * Tests whether a value is stored for the metric.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * Parent process only. Panics in child processes.
   *
   * @param aStorageName the name of the ping to retrieve the metric for.
   * @return true if metric value exists, otherwise false
   */
  [implicit_jscontext]
  bool testHasValue(in ACString aStorageName);

  /**
   * **Test-only API**
   *
   * Gets the currently stored value as an integer.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * This doesn't clear the stored value.
   * Parent process only. Panics in child processes.
   *
   * @return value of the stored metric.
   */
  [implicit_jscontext]
  long long testGetValue(in ACString aStorageName);
};

[scriptable, uuid(395700e7-06f6-46be-adcc-ea58977fda6d)]
interface nsIGleanUuid : nsISupports
{
  /**
   * Set to the specified value.
   *
   * @param aValue The UUID to set the metric to.
   */
  [implicit_jscontext]
  void set(in ACString aValue);

  /**
   * Generate a new random UUID and set the metric to it.
   */
  [implicit_jscontext]
  void generateAndSet();

  /**
   * **Test-only API**
   *
   * Tests whether a value is stored for the metric.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * Parent process only. Panics in child processes.
   *
   * @param aStorageName the name of the ping to retrieve the metric for.
   * @return true if metric value exists, otherwise false
   */
  [implicit_jscontext]
  bool testHasValue(in ACString aStorageName);

  /**
   * **Test-only API**
   *
   * Gets the currently stored value as an integer.
   *
   * This function will attempt to await the last parent-process task (if any)
   * writing to the the metric's storage engine before returning a value.
   * This function will not wait for data from child processes.
   *
   * This doesn't clear the stored value.
   * Parent process only. Panics in child processes.
   *
   * @return value of the stored metric.
   */
  [implicit_jscontext]
  ACString testGetValue(in ACString aStorageName);
};
