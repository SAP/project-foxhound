// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

use super::{CommonMetricData, MetricId};

use crate::ipc::need_ipc;

/// A string metric.
///
/// Record an Unicode string value with arbitrary content.
/// Strings are length-limited to `MAX_LENGTH_VALUE` bytes.
///
/// # Example
///
/// The following piece of code will be generated by `glean_parser`:
///
/// ```rust,ignore
/// use glean::metrics::{StringMetric, CommonMetricData, Lifetime};
/// use once_cell::sync::Lazy;
///
/// mod browser {
///     pub static search_engine: Lazy<StringMetric> = Lazy::new(|| StringMetric::new(CommonMetricData {
///         name: "search_engine".into(),
///         category: "browser".into(),
///         lifetime: Lifetime::Ping,
///         disabled: false,
///         dynamic_label: None
///     }));
/// }
/// ```
///
/// It can then be used with:
///
/// ```rust,ignore
/// browser::search_engine.set("websearch");
/// ```
#[derive(Debug)]
pub enum StringMetric {
    Parent(StringMetricImpl),
    Child(StringMetricIpc),
}

#[derive(Clone, Debug)]
pub struct StringMetricImpl(pub(crate) glean_core::metrics::StringMetric);
#[derive(Debug)]
pub struct StringMetricIpc;

impl StringMetric {
    /// Create a new string metric.
    pub fn new(_id: MetricId, meta: CommonMetricData) -> Self {
        if need_ipc() {
            StringMetric::Child(StringMetricIpc)
        } else {
            StringMetric::Parent(StringMetricImpl::new(meta))
        }
    }

    #[cfg(test)]
    pub(crate) fn child_metric(&self) -> Self {
        match self {
            StringMetric::Parent(_) => StringMetric::Child(StringMetricIpc),
            StringMetric::Child(_) => panic!("Can't get a child metric from a child metric"),
        }
    }

    /// Set to the specified value.
    ///
    /// ## Arguments
    ///
    /// * `value` - The string to set the metric to.
    ///
    /// ## Notes
    ///
    /// Truncates the value if it is longer than `MAX_STRING_LENGTH` bytes and logs an error.
    /// See [String metric limits](https://mozilla.github.io/glean/book/user/metrics/string.html#limits).
    pub fn set<S: Into<String>>(&self, value: S) {
        match self {
            StringMetric::Parent(p) => p.set(value),
            // No truncation here. Hrm.
            StringMetric::Child(_) => {
                log::error!(
                    "Unable to set string metric {:?} in non-main process. Ignoring.",
                    self
                );
                // TODO: Record an error.
            }
        };
    }

    /// **Test-only API.**
    ///
    /// Get the currently stored value as a string.
    /// This doesn't clear the stored value.
    ///
    /// ## Arguments
    ///
    /// * `storage_name` - the storage name to look into.
    ///
    /// ## Return value
    ///
    /// Returns the stored value or `None` if nothing stored.
    pub fn test_get_value(&self, storage_name: &str) -> Option<String> {
        match self {
            StringMetric::Parent(p) => p.test_get_value(storage_name),
            StringMetric::Child(_) => panic!(
                "Cannot get test value for {:?} in non-parent process!",
                self
            ),
        }
    }
}

impl StringMetricImpl {
    fn new(meta: CommonMetricData) -> Self {
        Self(glean_core::metrics::StringMetric::new(meta))
    }

    fn set<S: Into<String>>(&self, value: S) {
        crate::with_glean(move |glean| self.0.set(glean, value))
    }

    fn test_get_value(&self, storage_name: &str) -> Option<String> {
        crate::with_glean(move |glean| self.0.test_get_value(glean, storage_name))
    }
}

#[cfg(test)]
mod test {
    use crate::{common_test::*, ipc, metrics};

    #[test]
    fn sets_string_value() {
        let _lock = lock_test();

        let metric = &metrics::test_only_ipc::a_string;

        metric.set("test_string_value");

        assert_eq!(
            "test_string_value",
            metric.test_get_value("store1").unwrap()
        );
    }

    #[test]
    fn string_ipc() {
        // StringMetric doesn't support IPC.
        let _lock = lock_test();

        let parent_metric = &metrics::test_only_ipc::a_string;

        parent_metric.set("test_parent_value");

        {
            let child_metric = parent_metric.child_metric();

            let _raii = ipc::test_set_need_ipc(true);

            // Instrumentation calls do not panic.
            child_metric.set("test_string_value");

            // (They also shouldn't do anything,
            // but that's not something we can inspect in this test)

            // Need to catch the panic so that our RAIIs drop nicely.
            let result = std::panic::catch_unwind(move || {
                child_metric.test_get_value("store1");
            });
            assert!(result.is_err());
        }

        assert!(ipc::replay_from_buf(&ipc::take_buf().unwrap()).is_ok());

        assert!(
            "test_parent_value" == parent_metric.test_get_value("store1").unwrap(),
            "String metrics should only work in the parent process"
        );
    }
}
