// -*- mode: C++ -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef mozilla_GleanJSMetricsLookup_h
#define mozilla_GleanJSMetricsLookup_h

#include "mozilla/PerfectHash.h"
#include "mozilla/Maybe.h"
#include "mozilla/glean/MetricTypes.h"

#define GLEAN_INDEX_BITS (32)
#define GLEAN_ID_BITS (27)
#define GLEAN_TYPE_ID(id) ((id) >> GLEAN_ID_BITS)
#define GLEAN_METRIC_ID(id) ((id) & ((1ULL << GLEAN_ID_BITS) - 1))
#define GLEAN_OFFSET(entry) (entry & ((1ULL << GLEAN_INDEX_BITS) - 1))

namespace mozilla::glean {

// The category lookup table's entry type
using category_entry_t = uint32_t;
// The metric lookup table's entry type
using metric_entry_t = uint64_t;

static_assert(GLEAN_INDEX_BITS + GLEAN_ID_BITS < sizeof(metric_entry_t) * 8, "Index and ID bits need to fit into an category_entry_t");
static_assert(GLEAN_ID_BITS < sizeof(uint32_t) * 8, "Metric IDs need to fit into less than 32 bit");
static_assert(2 < UINT32_MAX, "Too many metric categories generated.");
static_assert(17 < 134217728, "Too many metrics generated.");
static_assert(13 < 32, "Too many different metric types.");

static already_AddRefed<nsISupports> NewMetricFromId(uint32_t id) {
  uint32_t typeId = GLEAN_TYPE_ID(id);
  uint32_t metricId = GLEAN_METRIC_ID(id);

  switch (typeId) {
    case 3: /* Counter */
    {
      RefPtr<nsISupports> metric = new GleanCounter(metricId);
      return metric.forget();
      break;
    }
    case 5: /* String */
    {
      RefPtr<nsISupports> metric = new GleanString(metricId);
      return metric.forget();
      break;
    }
    case 8: /* Timespan */
    {
      RefPtr<nsISupports> metric = new GleanTimespan(metricId);
      return metric.forget();
      break;
    }
    case 11: /* Uuid */
    {
      RefPtr<nsISupports> metric = new GleanUuid(metricId);
      return metric.forget();
      break;
    }
    default:
    MOZ_ASSERT_UNREACHABLE("Invalid type ID reached when trying to instantiate a new metric");
    return nullptr;
  }
}

static Maybe<uint32_t> category_result_check(const nsACString& aKey, category_entry_t entry);
static Maybe<uint32_t> metric_result_check(const nsACString& aKey, metric_entry_t entry);

#if defined(_MSC_VER) && !defined(__clang__)
const char gCategoryStringTable[] = {
#else
constexpr char gCategoryStringTable[] = {
#endif
  /*     0 - "test" */ 't', 'e', 's', 't', '\0',
  /*     5 - "test_nested" */ 't', 'e', 's', 't', '_', 'n', 'e', 's', 't', 'e', 'd', '\0',
};


static_assert(sizeof(gCategoryStringTable) < UINT32_MAX, "Category string table is too large.");

const category_entry_t sCategoryByNameLookupEntries[] = {
  0,
  5
};



static Maybe<uint32_t>
CategoryByNameLookup(const nsACString& aKey)
{
  static const uint8_t BASES[] = {
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  };
  

  const char* bytes = aKey.BeginReading();
  size_t length = aKey.Length();
  auto& entry = mozilla::perfecthash::Lookup(bytes, length, BASES,
                                             sCategoryByNameLookupEntries);
  return category_result_check(aKey, entry);
}


#if defined(_MSC_VER) && !defined(__clang__)
const char gMetricStringTable[] = {
#else
constexpr char gMetricStringTable[] = {
#endif
  /*     0 - "test.boolean_metric" */ 't', 'e', 's', 't', '.', 'b', 'o', 'o', 'l', 'e', 'a', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*    20 - "test.labeled_boolean_metric" */ 't', 'e', 's', 't', '.', 'l', 'a', 'b', 'e', 'l', 'e', 'd', '_', 'b', 'o', 'o', 'l', 'e', 'a', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*    48 - "test.labeled_boolean_metric_labels" */ 't', 'e', 's', 't', '.', 'l', 'a', 'b', 'e', 'l', 'e', 'd', '_', 'b', 'o', 'o', 'l', 'e', 'a', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', '_', 'l', 'a', 'b', 'e', 'l', 's', '\0',
  /*    83 - "test.counter_metric" */ 't', 'e', 's', 't', '.', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   103 - "test.labeled_counter_metric" */ 't', 'e', 's', 't', '.', 'l', 'a', 'b', 'e', 'l', 'e', 'd', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   131 - "test.labeled_counter_metric_labels" */ 't', 'e', 's', 't', '.', 'l', 'a', 'b', 'e', 'l', 'e', 'd', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 'm', 'e', 't', 'r', 'i', 'c', '_', 'l', 'a', 'b', 'e', 'l', 's', '\0',
  /*   166 - "test.string_metric" */ 't', 'e', 's', 't', '.', 's', 't', 'r', 'i', 'n', 'g', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   185 - "test.labeled_string_metric" */ 't', 'e', 's', 't', '.', 'l', 'a', 'b', 'e', 'l', 'e', 'd', '_', 's', 't', 'r', 'i', 'n', 'g', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   212 - "test.labeled_string_metric_labels" */ 't', 'e', 's', 't', '.', 'l', 'a', 'b', 'e', 'l', 'e', 'd', '_', 's', 't', 'r', 'i', 'n', 'g', '_', 'm', 'e', 't', 'r', 'i', 'c', '_', 'l', 'a', 'b', 'e', 'l', 's', '\0',
  /*   246 - "test.string_list_metric" */ 't', 'e', 's', 't', '.', 's', 't', 'r', 'i', 'n', 'g', '_', 'l', 'i', 's', 't', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   270 - "test.timespan_metric" */ 't', 'e', 's', 't', '.', 't', 'i', 'm', 'e', 's', 'p', 'a', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   291 - "test.timing_distribution_metric" */ 't', 'e', 's', 't', '.', 't', 'i', 'm', 'i', 'n', 'g', '_', 'd', 'i', 's', 't', 'r', 'i', 'b', 'u', 't', 'i', 'o', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   323 - "test.memory_distribution_metric" */ 't', 'e', 's', 't', '.', 'm', 'e', 'm', 'o', 'r', 'y', '_', 'd', 'i', 's', 't', 'r', 'i', 'b', 'u', 't', 'i', 'o', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   355 - "test_nested.uuid_metric" */ 't', 'e', 's', 't', '_', 'n', 'e', 's', 't', 'e', 'd', '.', 'u', 'u', 'i', 'd', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   379 - "test_nested.datetime_metric" */ 't', 'e', 's', 't', '_', 'n', 'e', 's', 't', 'e', 'd', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   407 - "test_nested.event_metric" */ 't', 'e', 's', 't', '_', 'n', 'e', 's', 't', 'e', 'd', '.', 'e', 'v', 'e', 'n', 't', '_', 'm', 'e', 't', 'r', 'i', 'c', '\0',
  /*   432 - "test_nested.event_metric_with_extra" */ 't', 'e', 's', 't', '_', 'n', 'e', 's', 't', 'e', 'd', '.', 'e', 'v', 'e', 'n', 't', '_', 'm', 'e', 't', 'r', 'i', 'c', '_', 'w', 'i', 't', 'h', '_', 'e', 'x', 't', 'r', 'a', '\0',
};


static_assert(sizeof(gMetricStringTable) < 4294967296, "Metric string table is too large.");

const metric_entry_t sMetricByNameLookupEntries[] = {
  1729382274090139731,
  2882303791581888678,
  6341068335467200867,
  7493989848663982487,
  7493989852958949808,
  5764607578868810051,
  3458764552475246804,
  4035225309073637622,
  2305843030688530535,
  6917529092065591675,
  3458764548180279481,
  5188146822270419235,
  1152921513196781588,
  4611686065672028430,
  2305843034983497859,
  1152921517491748912,
  576460756598390784
};



static Maybe<uint32_t>
MetricByNameLookup(const nsACString& aKey)
{
  static const uint8_t BASES[] = {
       0,   1,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   1,   0,   0,   3,   0,   0,   1,   2,   0,   2,   0,   0,   0,
       0,   2,   0,   0,   0,   0,   0,   6,   0,   0,   2,   0,   1,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   1,   0,   1,   0,   0,   0,   0,   2,   0,   0,
  };
  

  const char* bytes = aKey.BeginReading();
  size_t length = aKey.Length();
  auto& entry = mozilla::perfecthash::Lookup(bytes, length, BASES,
                                             sMetricByNameLookupEntries);
  return metric_result_check(aKey, entry);
}


/**
 * Get a category's name from the string table.
 */
static const char* GetCategoryName(category_entry_t entry) {
  MOZ_ASSERT(entry < sizeof(gCategoryStringTable), "Entry identifier offset larger than string table");
  return &gCategoryStringTable[entry];
}

/**
 * Get a metric's identifier from the string table.
 */
static const char* GetMetricIdentifier(metric_entry_t entry) {
  uint32_t offset = GLEAN_OFFSET(entry);
  MOZ_ASSERT(offset < sizeof(gMetricStringTable), "Entry identifier offset larger than string table");
  return &gMetricStringTable[offset];
}

/**
 * Check that the found entry is pointing to the right key
 * and return it.
 * Or return `Nothing()` if the entry was not found.
 */
static Maybe<uint32_t> category_result_check(const nsACString& aKey, category_entry_t entry) {
  if (MOZ_UNLIKELY(entry > sizeof(gCategoryStringTable))) {
    return Nothing();
  }
  if (aKey.EqualsASCII(gCategoryStringTable + entry)) {
    return Some(entry);
  }
  return Nothing();
}

/**
 * Check if the found entry index is pointing to the right key
 * and return the corresponding metric ID.
 * Or return `Nothing()` if the entry was not found.
 */
static Maybe<uint32_t> metric_result_check(const nsACString& aKey, uint64_t entry) {
  uint32_t metricId = entry >> GLEAN_INDEX_BITS;
  uint32_t offset = GLEAN_OFFSET(entry);

  if (offset > sizeof(gMetricStringTable)) {
    return Nothing();
  }

  if (aKey.EqualsASCII(gMetricStringTable + offset)) {
    return Some(metricId);
  }

  return Nothing();
}


#undef GLEAN_INDEX_BITS
#undef GLEAN_ID_BITS
#undef GLEAN_TYPE_ID
#undef GLEAN_METRIC_ID
#undef GLEAN_OFFSET

} // namespace mozilla::glean
#endif // mozilla_GleanJSMetricsLookup_h
