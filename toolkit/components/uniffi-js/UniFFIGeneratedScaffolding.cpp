/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=8 sts=2 et sw=2 tw=80: */

// Generated by uniffi-bindgen-gecko-js.  DO NOT EDIT.

#include "nsString.h"
#include "nsPrintfCString.h"
#include "mozilla/Logging.h"
#include "mozilla/Maybe.h"
#include "mozilla/StaticPtr.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/dom/Promise.h"
#include "mozilla/dom/ScaffoldingConverter.h"
#include "mozilla/dom/UniFFICall.h"
#include "mozilla/dom/UniFFICallbacks.h"
#include "mozilla/dom/UniFFIPointerType.h"
#include "mozilla/dom/UniFFIScaffolding.h"
#include "mozilla/dom/UniFFIRust.h"

namespace mozilla::uniffi {

using dom::ArrayBuffer;
using dom::AutoEntryScript;
using dom::GlobalObject;
using dom::RootedDictionary;
using dom::NullableRootedUnion;
using dom::Promise;
using dom::UniFFIScaffoldingValue;
using dom::Sequence;
using dom::UniFFICallbackHandler;
using dom::UniFFIPointer;
using dom::UniFFIScaffoldingCallResult;

// Define scaffolding functions from UniFFI
extern "C" {

  typedef void (*RustFutureContinuationCallback)(uint64_t, int8_t);
  typedef void (*ForeignFutureFree)(uint64_t);
  typedef void (*CallbackInterfaceFree)(uint64_t);
  struct ForeignFuture {
    uint64_t handle;
    ForeignFutureFree free;
  };
  struct ForeignFutureStructU8 {
    uint8_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteU8)(uint64_t, ForeignFutureStructU8);
  struct ForeignFutureStructI8 {
    int8_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteI8)(uint64_t, ForeignFutureStructI8);
  struct ForeignFutureStructU16 {
    uint16_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteU16)(uint64_t, ForeignFutureStructU16);
  struct ForeignFutureStructI16 {
    int16_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteI16)(uint64_t, ForeignFutureStructI16);
  struct ForeignFutureStructU32 {
    uint32_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteU32)(uint64_t, ForeignFutureStructU32);
  struct ForeignFutureStructI32 {
    int32_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteI32)(uint64_t, ForeignFutureStructI32);
  struct ForeignFutureStructU64 {
    uint64_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteU64)(uint64_t, ForeignFutureStructU64);
  struct ForeignFutureStructI64 {
    int64_t return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteI64)(uint64_t, ForeignFutureStructI64);
  struct ForeignFutureStructF32 {
    float return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteF32)(uint64_t, ForeignFutureStructF32);
  struct ForeignFutureStructF64 {
    double return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteF64)(uint64_t, ForeignFutureStructF64);
  struct ForeignFutureStructPointer {
    void* return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompletePointer)(uint64_t, ForeignFutureStructPointer);
  struct ForeignFutureStructRustBuffer {
    RustBuffer return_value;
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteRustBuffer)(uint64_t, ForeignFutureStructRustBuffer);
  struct ForeignFutureStructVoid {
    RustCallStatus call_status;
  };
  typedef void (*ForeignFutureCompleteVoid)(uint64_t, ForeignFutureStructVoid);
  typedef void (*CallbackInterfaceApplicationErrorReporterMethod0)(uint64_t, RustBuffer, RustBuffer, void*, RustCallStatus*);
  typedef void (*CallbackInterfaceApplicationErrorReporterMethod1)(uint64_t, RustBuffer, RustBuffer, uint32_t, uint32_t, void*, RustCallStatus*);
  struct VTableCallbackInterfaceApplicationErrorReporter {
    CallbackInterfaceApplicationErrorReporterMethod0 report_error;
    CallbackInterfaceApplicationErrorReporterMethod1 report_breadcrumb;
    CallbackInterfaceFree uniffi_free;
  };
  void uniffi_error_support_fn_init_callback_vtable_applicationerrorreporter(VTableCallbackInterfaceApplicationErrorReporter*);
  void uniffi_error_support_fn_func_set_application_error_reporter(uint64_t, RustCallStatus*);
  void uniffi_error_support_fn_func_unset_application_error_reporter(RustCallStatus*);
  RustBuffer ffi_error_support_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_error_support_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_error_support_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_error_support_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_u8(uint64_t);
  void ffi_error_support_rust_future_free_u8(uint64_t);
  uint8_t ffi_error_support_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_i8(uint64_t);
  void ffi_error_support_rust_future_free_i8(uint64_t);
  int8_t ffi_error_support_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_u16(uint64_t);
  void ffi_error_support_rust_future_free_u16(uint64_t);
  uint16_t ffi_error_support_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_i16(uint64_t);
  void ffi_error_support_rust_future_free_i16(uint64_t);
  int16_t ffi_error_support_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_u32(uint64_t);
  void ffi_error_support_rust_future_free_u32(uint64_t);
  uint32_t ffi_error_support_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_i32(uint64_t);
  void ffi_error_support_rust_future_free_i32(uint64_t);
  int32_t ffi_error_support_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_u64(uint64_t);
  void ffi_error_support_rust_future_free_u64(uint64_t);
  uint64_t ffi_error_support_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_i64(uint64_t);
  void ffi_error_support_rust_future_free_i64(uint64_t);
  int64_t ffi_error_support_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_f32(uint64_t);
  void ffi_error_support_rust_future_free_f32(uint64_t);
  float ffi_error_support_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_f64(uint64_t);
  void ffi_error_support_rust_future_free_f64(uint64_t);
  double ffi_error_support_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_pointer(uint64_t);
  void ffi_error_support_rust_future_free_pointer(uint64_t);
  void* ffi_error_support_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_error_support_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_error_support_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_error_support_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_error_support_rust_future_cancel_void(uint64_t);
  void ffi_error_support_rust_future_free_void(uint64_t);
  void ffi_error_support_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_error_support_checksum_func_set_application_error_reporter();
  uint16_t uniffi_error_support_checksum_func_unset_application_error_reporter();
  uint16_t uniffi_error_support_checksum_method_applicationerrorreporter_report_error();
  uint16_t uniffi_error_support_checksum_method_applicationerrorreporter_report_breadcrumb();
  uint32_t ffi_error_support_uniffi_contract_version();
  void* uniffi_relevancy_fn_clone_relevancystore(void*, RustCallStatus*);
  void uniffi_relevancy_fn_free_relevancystore(void*, RustCallStatus*);
  void* uniffi_relevancy_fn_constructor_relevancystore_new(RustBuffer, RustCallStatus*);
  void uniffi_relevancy_fn_method_relevancystore_bandit_init(void*, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_relevancy_fn_method_relevancystore_bandit_select(void*, RustBuffer, RustBuffer, RustCallStatus*);
  void uniffi_relevancy_fn_method_relevancystore_bandit_update(void*, RustBuffer, RustBuffer, int8_t, RustCallStatus*);
  RustBuffer uniffi_relevancy_fn_method_relevancystore_calculate_metrics(void*, RustCallStatus*);
  void uniffi_relevancy_fn_method_relevancystore_close(void*, RustCallStatus*);
  RustBuffer uniffi_relevancy_fn_method_relevancystore_get_bandit_data(void*, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_relevancy_fn_method_relevancystore_ingest(void*, RustBuffer, RustCallStatus*);
  void uniffi_relevancy_fn_method_relevancystore_interrupt(void*, RustCallStatus*);
  RustBuffer uniffi_relevancy_fn_method_relevancystore_user_interest_vector(void*, RustCallStatus*);
  double uniffi_relevancy_fn_func_score(RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer ffi_relevancy_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_relevancy_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_relevancy_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_relevancy_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_u8(uint64_t);
  void ffi_relevancy_rust_future_free_u8(uint64_t);
  uint8_t ffi_relevancy_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_i8(uint64_t);
  void ffi_relevancy_rust_future_free_i8(uint64_t);
  int8_t ffi_relevancy_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_u16(uint64_t);
  void ffi_relevancy_rust_future_free_u16(uint64_t);
  uint16_t ffi_relevancy_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_i16(uint64_t);
  void ffi_relevancy_rust_future_free_i16(uint64_t);
  int16_t ffi_relevancy_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_u32(uint64_t);
  void ffi_relevancy_rust_future_free_u32(uint64_t);
  uint32_t ffi_relevancy_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_i32(uint64_t);
  void ffi_relevancy_rust_future_free_i32(uint64_t);
  int32_t ffi_relevancy_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_u64(uint64_t);
  void ffi_relevancy_rust_future_free_u64(uint64_t);
  uint64_t ffi_relevancy_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_i64(uint64_t);
  void ffi_relevancy_rust_future_free_i64(uint64_t);
  int64_t ffi_relevancy_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_f32(uint64_t);
  void ffi_relevancy_rust_future_free_f32(uint64_t);
  float ffi_relevancy_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_f64(uint64_t);
  void ffi_relevancy_rust_future_free_f64(uint64_t);
  double ffi_relevancy_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_pointer(uint64_t);
  void ffi_relevancy_rust_future_free_pointer(uint64_t);
  void* ffi_relevancy_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_relevancy_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_relevancy_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_relevancy_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_relevancy_rust_future_cancel_void(uint64_t);
  void ffi_relevancy_rust_future_free_void(uint64_t);
  void ffi_relevancy_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_relevancy_checksum_func_score();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_bandit_init();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_bandit_select();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_bandit_update();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_calculate_metrics();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_close();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_get_bandit_data();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_ingest();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_interrupt();
  uint16_t uniffi_relevancy_checksum_method_relevancystore_user_interest_vector();
  uint16_t uniffi_relevancy_checksum_constructor_relevancystore_new();
  uint32_t ffi_relevancy_uniffi_contract_version();
  void* uniffi_remote_settings_fn_clone_remotesettings(void*, RustCallStatus*);
  void uniffi_remote_settings_fn_free_remotesettings(void*, RustCallStatus*);
  void* uniffi_remote_settings_fn_constructor_remotesettings_new(RustBuffer, RustCallStatus*);
  void uniffi_remote_settings_fn_method_remotesettings_download_attachment_to_path(void*, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_remote_settings_fn_method_remotesettings_get_records(void*, RustCallStatus*);
  RustBuffer uniffi_remote_settings_fn_method_remotesettings_get_records_since(void*, uint64_t, RustCallStatus*);
  void* uniffi_remote_settings_fn_clone_remotesettingsclient(void*, RustCallStatus*);
  void uniffi_remote_settings_fn_free_remotesettingsclient(void*, RustCallStatus*);
  RustBuffer uniffi_remote_settings_fn_method_remotesettingsclient_collection_name(void*, RustCallStatus*);
  RustBuffer uniffi_remote_settings_fn_method_remotesettingsclient_get_attachment(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_remote_settings_fn_method_remotesettingsclient_get_records(void*, int8_t, RustCallStatus*);
  RustBuffer uniffi_remote_settings_fn_method_remotesettingsclient_get_records_map(void*, int8_t, RustCallStatus*);
  void* uniffi_remote_settings_fn_clone_remotesettingsservice(void*, RustCallStatus*);
  void uniffi_remote_settings_fn_free_remotesettingsservice(void*, RustCallStatus*);
  void* uniffi_remote_settings_fn_constructor_remotesettingsservice_new(RustBuffer, RustBuffer, RustCallStatus*);
  void* uniffi_remote_settings_fn_method_remotesettingsservice_make_client(void*, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_remote_settings_fn_method_remotesettingsservice_sync(void*, RustCallStatus*);
  void uniffi_remote_settings_fn_method_remotesettingsservice_update_config(void*, RustBuffer, RustCallStatus*);
  RustBuffer ffi_remote_settings_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_remote_settings_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_remote_settings_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_remote_settings_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_u8(uint64_t);
  void ffi_remote_settings_rust_future_free_u8(uint64_t);
  uint8_t ffi_remote_settings_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_i8(uint64_t);
  void ffi_remote_settings_rust_future_free_i8(uint64_t);
  int8_t ffi_remote_settings_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_u16(uint64_t);
  void ffi_remote_settings_rust_future_free_u16(uint64_t);
  uint16_t ffi_remote_settings_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_i16(uint64_t);
  void ffi_remote_settings_rust_future_free_i16(uint64_t);
  int16_t ffi_remote_settings_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_u32(uint64_t);
  void ffi_remote_settings_rust_future_free_u32(uint64_t);
  uint32_t ffi_remote_settings_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_i32(uint64_t);
  void ffi_remote_settings_rust_future_free_i32(uint64_t);
  int32_t ffi_remote_settings_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_u64(uint64_t);
  void ffi_remote_settings_rust_future_free_u64(uint64_t);
  uint64_t ffi_remote_settings_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_i64(uint64_t);
  void ffi_remote_settings_rust_future_free_i64(uint64_t);
  int64_t ffi_remote_settings_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_f32(uint64_t);
  void ffi_remote_settings_rust_future_free_f32(uint64_t);
  float ffi_remote_settings_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_f64(uint64_t);
  void ffi_remote_settings_rust_future_free_f64(uint64_t);
  double ffi_remote_settings_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_pointer(uint64_t);
  void ffi_remote_settings_rust_future_free_pointer(uint64_t);
  void* ffi_remote_settings_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_remote_settings_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_remote_settings_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_remote_settings_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_remote_settings_rust_future_cancel_void(uint64_t);
  void ffi_remote_settings_rust_future_free_void(uint64_t);
  void ffi_remote_settings_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_remote_settings_checksum_method_remotesettings_download_attachment_to_path();
  uint16_t uniffi_remote_settings_checksum_method_remotesettings_get_records();
  uint16_t uniffi_remote_settings_checksum_method_remotesettings_get_records_since();
  uint16_t uniffi_remote_settings_checksum_method_remotesettingsclient_collection_name();
  uint16_t uniffi_remote_settings_checksum_method_remotesettingsclient_get_attachment();
  uint16_t uniffi_remote_settings_checksum_method_remotesettingsclient_get_records();
  uint16_t uniffi_remote_settings_checksum_method_remotesettingsclient_get_records_map();
  uint16_t uniffi_remote_settings_checksum_method_remotesettingsservice_make_client();
  uint16_t uniffi_remote_settings_checksum_method_remotesettingsservice_sync();
  uint16_t uniffi_remote_settings_checksum_method_remotesettingsservice_update_config();
  uint16_t uniffi_remote_settings_checksum_constructor_remotesettings_new();
  uint16_t uniffi_remote_settings_checksum_constructor_remotesettingsservice_new();
  uint32_t ffi_remote_settings_uniffi_contract_version();
  void* uniffi_search_fn_clone_searchengineselector(void*, RustCallStatus*);
  void uniffi_search_fn_free_searchengineselector(void*, RustCallStatus*);
  void* uniffi_search_fn_constructor_searchengineselector_new(RustCallStatus*);
  void uniffi_search_fn_method_searchengineselector_clear_search_config(void*, RustCallStatus*);
  RustBuffer uniffi_search_fn_method_searchengineselector_filter_engine_configuration(void*, RustBuffer, RustCallStatus*);
  void uniffi_search_fn_method_searchengineselector_set_search_config(void*, RustBuffer, RustCallStatus*);
  RustBuffer ffi_search_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_search_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_search_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_search_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_u8(uint64_t);
  void ffi_search_rust_future_free_u8(uint64_t);
  uint8_t ffi_search_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_i8(uint64_t);
  void ffi_search_rust_future_free_i8(uint64_t);
  int8_t ffi_search_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_u16(uint64_t);
  void ffi_search_rust_future_free_u16(uint64_t);
  uint16_t ffi_search_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_i16(uint64_t);
  void ffi_search_rust_future_free_i16(uint64_t);
  int16_t ffi_search_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_u32(uint64_t);
  void ffi_search_rust_future_free_u32(uint64_t);
  uint32_t ffi_search_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_i32(uint64_t);
  void ffi_search_rust_future_free_i32(uint64_t);
  int32_t ffi_search_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_u64(uint64_t);
  void ffi_search_rust_future_free_u64(uint64_t);
  uint64_t ffi_search_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_i64(uint64_t);
  void ffi_search_rust_future_free_i64(uint64_t);
  int64_t ffi_search_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_f32(uint64_t);
  void ffi_search_rust_future_free_f32(uint64_t);
  float ffi_search_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_f64(uint64_t);
  void ffi_search_rust_future_free_f64(uint64_t);
  double ffi_search_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_pointer(uint64_t);
  void ffi_search_rust_future_free_pointer(uint64_t);
  void* ffi_search_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_search_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_search_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_search_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_search_rust_future_cancel_void(uint64_t);
  void ffi_search_rust_future_free_void(uint64_t);
  void ffi_search_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_search_checksum_method_searchengineselector_clear_search_config();
  uint16_t uniffi_search_checksum_method_searchengineselector_filter_engine_configuration();
  uint16_t uniffi_search_checksum_method_searchengineselector_set_search_config();
  uint16_t uniffi_search_checksum_constructor_searchengineselector_new();
  uint32_t ffi_search_uniffi_contract_version();
  void* uniffi_suggest_fn_clone_suggeststore(void*, RustCallStatus*);
  void uniffi_suggest_fn_free_suggeststore(void*, RustCallStatus*);
  void* uniffi_suggest_fn_constructor_suggeststore_new(RustBuffer, RustBuffer, RustCallStatus*);
  void uniffi_suggest_fn_method_suggeststore_clear(void*, RustCallStatus*);
  void uniffi_suggest_fn_method_suggeststore_clear_dismissed_suggestions(void*, RustCallStatus*);
  void uniffi_suggest_fn_method_suggeststore_dismiss_suggestion(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_suggest_fn_method_suggeststore_fetch_geonames(void*, RustBuffer, int8_t, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_suggest_fn_method_suggeststore_fetch_global_config(void*, RustCallStatus*);
  RustBuffer uniffi_suggest_fn_method_suggeststore_fetch_provider_config(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_suggest_fn_method_suggeststore_ingest(void*, RustBuffer, RustCallStatus*);
  void uniffi_suggest_fn_method_suggeststore_interrupt(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_suggest_fn_method_suggeststore_query(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_suggest_fn_method_suggeststore_query_with_metrics(void*, RustBuffer, RustCallStatus*);
  void* uniffi_suggest_fn_clone_suggeststorebuilder(void*, RustCallStatus*);
  void uniffi_suggest_fn_free_suggeststorebuilder(void*, RustCallStatus*);
  void* uniffi_suggest_fn_constructor_suggeststorebuilder_new(RustCallStatus*);
  void* uniffi_suggest_fn_method_suggeststorebuilder_build(void*, RustCallStatus*);
  void* uniffi_suggest_fn_method_suggeststorebuilder_cache_path(void*, RustBuffer, RustCallStatus*);
  void* uniffi_suggest_fn_method_suggeststorebuilder_data_path(void*, RustBuffer, RustCallStatus*);
  void* uniffi_suggest_fn_method_suggeststorebuilder_load_extension(void*, RustBuffer, RustBuffer, RustCallStatus*);
  void* uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_bucket_name(void*, RustBuffer, RustCallStatus*);
  void* uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_server(void*, RustBuffer, RustCallStatus*);
  int8_t uniffi_suggest_fn_func_raw_suggestion_url_matches(RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer ffi_suggest_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_suggest_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_suggest_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_suggest_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_u8(uint64_t);
  void ffi_suggest_rust_future_free_u8(uint64_t);
  uint8_t ffi_suggest_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_i8(uint64_t);
  void ffi_suggest_rust_future_free_i8(uint64_t);
  int8_t ffi_suggest_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_u16(uint64_t);
  void ffi_suggest_rust_future_free_u16(uint64_t);
  uint16_t ffi_suggest_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_i16(uint64_t);
  void ffi_suggest_rust_future_free_i16(uint64_t);
  int16_t ffi_suggest_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_u32(uint64_t);
  void ffi_suggest_rust_future_free_u32(uint64_t);
  uint32_t ffi_suggest_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_i32(uint64_t);
  void ffi_suggest_rust_future_free_i32(uint64_t);
  int32_t ffi_suggest_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_u64(uint64_t);
  void ffi_suggest_rust_future_free_u64(uint64_t);
  uint64_t ffi_suggest_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_i64(uint64_t);
  void ffi_suggest_rust_future_free_i64(uint64_t);
  int64_t ffi_suggest_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_f32(uint64_t);
  void ffi_suggest_rust_future_free_f32(uint64_t);
  float ffi_suggest_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_f64(uint64_t);
  void ffi_suggest_rust_future_free_f64(uint64_t);
  double ffi_suggest_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_pointer(uint64_t);
  void ffi_suggest_rust_future_free_pointer(uint64_t);
  void* ffi_suggest_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_suggest_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_suggest_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_suggest_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_suggest_rust_future_cancel_void(uint64_t);
  void ffi_suggest_rust_future_free_void(uint64_t);
  void ffi_suggest_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_suggest_checksum_func_raw_suggestion_url_matches();
  uint16_t uniffi_suggest_checksum_method_suggeststore_clear();
  uint16_t uniffi_suggest_checksum_method_suggeststore_clear_dismissed_suggestions();
  uint16_t uniffi_suggest_checksum_method_suggeststore_dismiss_suggestion();
  uint16_t uniffi_suggest_checksum_method_suggeststore_fetch_geonames();
  uint16_t uniffi_suggest_checksum_method_suggeststore_fetch_global_config();
  uint16_t uniffi_suggest_checksum_method_suggeststore_fetch_provider_config();
  uint16_t uniffi_suggest_checksum_method_suggeststore_ingest();
  uint16_t uniffi_suggest_checksum_method_suggeststore_interrupt();
  uint16_t uniffi_suggest_checksum_method_suggeststore_query();
  uint16_t uniffi_suggest_checksum_method_suggeststore_query_with_metrics();
  uint16_t uniffi_suggest_checksum_method_suggeststorebuilder_build();
  uint16_t uniffi_suggest_checksum_method_suggeststorebuilder_cache_path();
  uint16_t uniffi_suggest_checksum_method_suggeststorebuilder_data_path();
  uint16_t uniffi_suggest_checksum_method_suggeststorebuilder_load_extension();
  uint16_t uniffi_suggest_checksum_method_suggeststorebuilder_remote_settings_bucket_name();
  uint16_t uniffi_suggest_checksum_method_suggeststorebuilder_remote_settings_server();
  uint16_t uniffi_suggest_checksum_constructor_suggeststore_new();
  uint16_t uniffi_suggest_checksum_constructor_suggeststorebuilder_new();
  uint32_t ffi_suggest_uniffi_contract_version();
  RustBuffer ffi_sync15_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_sync15_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_sync15_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_sync15_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_u8(uint64_t);
  void ffi_sync15_rust_future_free_u8(uint64_t);
  uint8_t ffi_sync15_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_i8(uint64_t);
  void ffi_sync15_rust_future_free_i8(uint64_t);
  int8_t ffi_sync15_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_u16(uint64_t);
  void ffi_sync15_rust_future_free_u16(uint64_t);
  uint16_t ffi_sync15_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_i16(uint64_t);
  void ffi_sync15_rust_future_free_i16(uint64_t);
  int16_t ffi_sync15_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_u32(uint64_t);
  void ffi_sync15_rust_future_free_u32(uint64_t);
  uint32_t ffi_sync15_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_i32(uint64_t);
  void ffi_sync15_rust_future_free_i32(uint64_t);
  int32_t ffi_sync15_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_u64(uint64_t);
  void ffi_sync15_rust_future_free_u64(uint64_t);
  uint64_t ffi_sync15_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_i64(uint64_t);
  void ffi_sync15_rust_future_free_i64(uint64_t);
  int64_t ffi_sync15_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_f32(uint64_t);
  void ffi_sync15_rust_future_free_f32(uint64_t);
  float ffi_sync15_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_f64(uint64_t);
  void ffi_sync15_rust_future_free_f64(uint64_t);
  double ffi_sync15_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_pointer(uint64_t);
  void ffi_sync15_rust_future_free_pointer(uint64_t);
  void* ffi_sync15_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_sync15_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_sync15_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_sync15_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_sync15_rust_future_cancel_void(uint64_t);
  void ffi_sync15_rust_future_free_void(uint64_t);
  void ffi_sync15_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint32_t ffi_sync15_uniffi_contract_version();
  void* uniffi_tabs_fn_clone_remotecommandstore(void*, RustCallStatus*);
  void uniffi_tabs_fn_free_remotecommandstore(void*, RustCallStatus*);
  int8_t uniffi_tabs_fn_method_remotecommandstore_add_remote_command(void*, RustBuffer, RustBuffer, RustCallStatus*);
  int8_t uniffi_tabs_fn_method_remotecommandstore_add_remote_command_at(void*, RustBuffer, RustBuffer, int64_t, RustCallStatus*);
  RustBuffer uniffi_tabs_fn_method_remotecommandstore_get_unsent_commands(void*, RustCallStatus*);
  int8_t uniffi_tabs_fn_method_remotecommandstore_remove_remote_command(void*, RustBuffer, RustBuffer, RustCallStatus*);
  int8_t uniffi_tabs_fn_method_remotecommandstore_set_pending_command_sent(void*, RustBuffer, RustCallStatus*);
  void* uniffi_tabs_fn_clone_tabsbridgedengine(void*, RustCallStatus*);
  void uniffi_tabs_fn_free_tabsbridgedengine(void*, RustCallStatus*);
  RustBuffer uniffi_tabs_fn_method_tabsbridgedengine_apply(void*, RustCallStatus*);
  RustBuffer uniffi_tabs_fn_method_tabsbridgedengine_ensure_current_sync_id(void*, RustBuffer, RustCallStatus*);
  int64_t uniffi_tabs_fn_method_tabsbridgedengine_last_sync(void*, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_prepare_for_sync(void*, RustBuffer, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_reset(void*, RustCallStatus*);
  RustBuffer uniffi_tabs_fn_method_tabsbridgedengine_reset_sync_id(void*, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_set_last_sync(void*, int64_t, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_set_uploaded(void*, int64_t, RustBuffer, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_store_incoming(void*, RustBuffer, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_sync_finished(void*, RustCallStatus*);
  RustBuffer uniffi_tabs_fn_method_tabsbridgedengine_sync_id(void*, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_sync_started(void*, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsbridgedengine_wipe(void*, RustCallStatus*);
  void* uniffi_tabs_fn_clone_tabsstore(void*, RustCallStatus*);
  void uniffi_tabs_fn_free_tabsstore(void*, RustCallStatus*);
  void* uniffi_tabs_fn_constructor_tabsstore_new(RustBuffer, RustCallStatus*);
  void* uniffi_tabs_fn_method_tabsstore_bridged_engine(void*, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsstore_close_connection(void*, RustCallStatus*);
  RustBuffer uniffi_tabs_fn_method_tabsstore_get_all(void*, RustCallStatus*);
  void* uniffi_tabs_fn_method_tabsstore_new_remote_command_store(void*, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsstore_register_with_sync_manager(void*, RustCallStatus*);
  void uniffi_tabs_fn_method_tabsstore_set_local_tabs(void*, RustBuffer, RustCallStatus*);
  RustBuffer ffi_tabs_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_tabs_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_tabs_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_tabs_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_u8(uint64_t);
  void ffi_tabs_rust_future_free_u8(uint64_t);
  uint8_t ffi_tabs_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_i8(uint64_t);
  void ffi_tabs_rust_future_free_i8(uint64_t);
  int8_t ffi_tabs_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_u16(uint64_t);
  void ffi_tabs_rust_future_free_u16(uint64_t);
  uint16_t ffi_tabs_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_i16(uint64_t);
  void ffi_tabs_rust_future_free_i16(uint64_t);
  int16_t ffi_tabs_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_u32(uint64_t);
  void ffi_tabs_rust_future_free_u32(uint64_t);
  uint32_t ffi_tabs_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_i32(uint64_t);
  void ffi_tabs_rust_future_free_i32(uint64_t);
  int32_t ffi_tabs_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_u64(uint64_t);
  void ffi_tabs_rust_future_free_u64(uint64_t);
  uint64_t ffi_tabs_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_i64(uint64_t);
  void ffi_tabs_rust_future_free_i64(uint64_t);
  int64_t ffi_tabs_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_f32(uint64_t);
  void ffi_tabs_rust_future_free_f32(uint64_t);
  float ffi_tabs_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_f64(uint64_t);
  void ffi_tabs_rust_future_free_f64(uint64_t);
  double ffi_tabs_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_pointer(uint64_t);
  void ffi_tabs_rust_future_free_pointer(uint64_t);
  void* ffi_tabs_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_tabs_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_tabs_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_tabs_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_tabs_rust_future_cancel_void(uint64_t);
  void ffi_tabs_rust_future_free_void(uint64_t);
  void ffi_tabs_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_tabs_checksum_method_remotecommandstore_add_remote_command();
  uint16_t uniffi_tabs_checksum_method_remotecommandstore_add_remote_command_at();
  uint16_t uniffi_tabs_checksum_method_remotecommandstore_get_unsent_commands();
  uint16_t uniffi_tabs_checksum_method_remotecommandstore_remove_remote_command();
  uint16_t uniffi_tabs_checksum_method_remotecommandstore_set_pending_command_sent();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_apply();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_ensure_current_sync_id();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_last_sync();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_prepare_for_sync();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_reset();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_reset_sync_id();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_set_last_sync();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_set_uploaded();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_store_incoming();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_sync_finished();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_sync_id();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_sync_started();
  uint16_t uniffi_tabs_checksum_method_tabsbridgedengine_wipe();
  uint16_t uniffi_tabs_checksum_method_tabsstore_bridged_engine();
  uint16_t uniffi_tabs_checksum_method_tabsstore_close_connection();
  uint16_t uniffi_tabs_checksum_method_tabsstore_get_all();
  uint16_t uniffi_tabs_checksum_method_tabsstore_new_remote_command_store();
  uint16_t uniffi_tabs_checksum_method_tabsstore_register_with_sync_manager();
  uint16_t uniffi_tabs_checksum_method_tabsstore_set_local_tabs();
  uint16_t uniffi_tabs_checksum_constructor_tabsstore_new();
  uint32_t ffi_tabs_uniffi_contract_version();
  void* uniffi_webext_storage_fn_clone_webextstoragebridgedengine(void*, RustCallStatus*);
  void uniffi_webext_storage_fn_free_webextstoragebridgedengine(void*, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragebridgedengine_apply(void*, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragebridgedengine_ensure_current_sync_id(void*, RustBuffer, RustCallStatus*);
  int64_t uniffi_webext_storage_fn_method_webextstoragebridgedengine_last_sync(void*, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_prepare_for_sync(void*, RustBuffer, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_reset(void*, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragebridgedengine_reset_sync_id(void*, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_set_last_sync(void*, int64_t, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_set_uploaded(void*, int64_t, RustBuffer, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_store_incoming(void*, RustBuffer, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_sync_finished(void*, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragebridgedengine_sync_id(void*, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_sync_started(void*, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragebridgedengine_wipe(void*, RustCallStatus*);
  void* uniffi_webext_storage_fn_clone_webextstoragestore(void*, RustCallStatus*);
  void uniffi_webext_storage_fn_free_webextstoragestore(void*, RustCallStatus*);
  void* uniffi_webext_storage_fn_constructor_webextstoragestore_new(RustBuffer, RustCallStatus*);
  void* uniffi_webext_storage_fn_method_webextstoragestore_bridged_engine(void*, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragestore_clear(void*, RustBuffer, RustCallStatus*);
  void uniffi_webext_storage_fn_method_webextstoragestore_close(void*, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragestore_get(void*, RustBuffer, RustBuffer, RustCallStatus*);
  uint64_t uniffi_webext_storage_fn_method_webextstoragestore_get_bytes_in_use(void*, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragestore_get_synced_changes(void*, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragestore_remove(void*, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_webext_storage_fn_method_webextstoragestore_set(void*, RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer ffi_webext_storage_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_webext_storage_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_webext_storage_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_webext_storage_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_u8(uint64_t);
  void ffi_webext_storage_rust_future_free_u8(uint64_t);
  uint8_t ffi_webext_storage_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_i8(uint64_t);
  void ffi_webext_storage_rust_future_free_i8(uint64_t);
  int8_t ffi_webext_storage_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_u16(uint64_t);
  void ffi_webext_storage_rust_future_free_u16(uint64_t);
  uint16_t ffi_webext_storage_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_i16(uint64_t);
  void ffi_webext_storage_rust_future_free_i16(uint64_t);
  int16_t ffi_webext_storage_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_u32(uint64_t);
  void ffi_webext_storage_rust_future_free_u32(uint64_t);
  uint32_t ffi_webext_storage_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_i32(uint64_t);
  void ffi_webext_storage_rust_future_free_i32(uint64_t);
  int32_t ffi_webext_storage_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_u64(uint64_t);
  void ffi_webext_storage_rust_future_free_u64(uint64_t);
  uint64_t ffi_webext_storage_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_i64(uint64_t);
  void ffi_webext_storage_rust_future_free_i64(uint64_t);
  int64_t ffi_webext_storage_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_f32(uint64_t);
  void ffi_webext_storage_rust_future_free_f32(uint64_t);
  float ffi_webext_storage_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_f64(uint64_t);
  void ffi_webext_storage_rust_future_free_f64(uint64_t);
  double ffi_webext_storage_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_pointer(uint64_t);
  void ffi_webext_storage_rust_future_free_pointer(uint64_t);
  void* ffi_webext_storage_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_webext_storage_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_webext_storage_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_webext_storage_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_webext_storage_rust_future_cancel_void(uint64_t);
  void ffi_webext_storage_rust_future_free_void(uint64_t);
  void ffi_webext_storage_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_apply();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_ensure_current_sync_id();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_last_sync();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_prepare_for_sync();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_reset();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_reset_sync_id();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_set_last_sync();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_set_uploaded();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_store_incoming();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_sync_finished();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_sync_id();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_sync_started();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragebridgedengine_wipe();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_bridged_engine();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_clear();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_close();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_get();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_get_bytes_in_use();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_get_synced_changes();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_remove();
  uint16_t uniffi_webext_storage_checksum_method_webextstoragestore_set();
  uint16_t uniffi_webext_storage_checksum_constructor_webextstoragestore_new();
  uint32_t ffi_webext_storage_uniffi_contract_version();

#ifdef MOZ_UNIFFI_FIXTURES
  uint64_t uniffi_arithmetical_fn_func_add(uint64_t, uint64_t, RustCallStatus*);
  uint64_t uniffi_arithmetical_fn_func_div(uint64_t, uint64_t, RustCallStatus*);
  int8_t uniffi_arithmetical_fn_func_equal(uint64_t, uint64_t, RustCallStatus*);
  uint64_t uniffi_arithmetical_fn_func_sub(uint64_t, uint64_t, RustCallStatus*);
  RustBuffer ffi_arithmetical_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_arithmetical_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_arithmetical_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_arithmetical_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_u8(uint64_t);
  void ffi_arithmetical_rust_future_free_u8(uint64_t);
  uint8_t ffi_arithmetical_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_i8(uint64_t);
  void ffi_arithmetical_rust_future_free_i8(uint64_t);
  int8_t ffi_arithmetical_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_u16(uint64_t);
  void ffi_arithmetical_rust_future_free_u16(uint64_t);
  uint16_t ffi_arithmetical_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_i16(uint64_t);
  void ffi_arithmetical_rust_future_free_i16(uint64_t);
  int16_t ffi_arithmetical_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_u32(uint64_t);
  void ffi_arithmetical_rust_future_free_u32(uint64_t);
  uint32_t ffi_arithmetical_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_i32(uint64_t);
  void ffi_arithmetical_rust_future_free_i32(uint64_t);
  int32_t ffi_arithmetical_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_u64(uint64_t);
  void ffi_arithmetical_rust_future_free_u64(uint64_t);
  uint64_t ffi_arithmetical_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_i64(uint64_t);
  void ffi_arithmetical_rust_future_free_i64(uint64_t);
  int64_t ffi_arithmetical_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_f32(uint64_t);
  void ffi_arithmetical_rust_future_free_f32(uint64_t);
  float ffi_arithmetical_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_f64(uint64_t);
  void ffi_arithmetical_rust_future_free_f64(uint64_t);
  double ffi_arithmetical_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_pointer(uint64_t);
  void ffi_arithmetical_rust_future_free_pointer(uint64_t);
  void* ffi_arithmetical_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_arithmetical_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_arithmetical_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_arithmetical_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_arithmetical_rust_future_cancel_void(uint64_t);
  void ffi_arithmetical_rust_future_free_void(uint64_t);
  void ffi_arithmetical_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_arithmetical_checksum_func_add();
  uint16_t uniffi_arithmetical_checksum_func_div();
  uint16_t uniffi_arithmetical_checksum_func_equal();
  uint16_t uniffi_arithmetical_checksum_func_sub();
  uint32_t ffi_arithmetical_uniffi_contract_version();
  RustBuffer uniffi_uniffi_custom_types_fn_func_get_custom_types_demo(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_custom_types_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_custom_types_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_custom_types_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_custom_types_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_custom_types_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_custom_types_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_custom_types_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_custom_types_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_custom_types_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_custom_types_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_custom_types_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_custom_types_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_f32(uint64_t);
  float ffi_uniffi_custom_types_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_f64(uint64_t);
  double ffi_uniffi_custom_types_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_custom_types_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_custom_types_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_custom_types_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_custom_types_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_custom_types_rust_future_free_void(uint64_t);
  void ffi_uniffi_custom_types_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_custom_types_checksum_func_get_custom_types_demo();
  uint32_t ffi_uniffi_custom_types_uniffi_contract_version();
  double uniffi_uniffi_fixture_external_types_fn_func_gradient(RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_fixture_external_types_fn_func_intersection(RustBuffer, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_fixture_external_types_fn_func_move_sprite_to_origin(void*, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_external_types_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_external_types_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_external_types_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_fixture_external_types_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_fixture_external_types_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_fixture_external_types_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_fixture_external_types_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_fixture_external_types_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_fixture_external_types_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_fixture_external_types_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_fixture_external_types_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_f32(uint64_t);
  float ffi_uniffi_fixture_external_types_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_f64(uint64_t);
  double ffi_uniffi_fixture_external_types_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_fixture_external_types_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_fixture_external_types_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_external_types_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_free_void(uint64_t);
  void ffi_uniffi_fixture_external_types_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_fixture_external_types_checksum_func_gradient();
  uint16_t uniffi_uniffi_fixture_external_types_checksum_func_intersection();
  uint16_t uniffi_uniffi_fixture_external_types_checksum_func_move_sprite_to_origin();
  uint32_t ffi_uniffi_fixture_external_types_uniffi_contract_version();
  typedef void (*CallbackInterfaceLoggerMethod0)(uint64_t, RustBuffer, void*, RustCallStatus*);
  typedef void (*CallbackInterfaceLoggerMethod1)(uint64_t, RustBuffer, uint32_t, RustBuffer, void*, RustCallStatus*);
  typedef void (*CallbackInterfaceLoggerMethod2)(uint64_t, void*, RustCallStatus*);
  struct VTableCallbackInterfaceLogger {
    CallbackInterfaceLoggerMethod0 log;
    CallbackInterfaceLoggerMethod1 log_repeat;
    CallbackInterfaceLoggerMethod2 finished;
    CallbackInterfaceFree uniffi_free;
  };
  void uniffi_uniffi_fixture_callbacks_fn_init_callback_vtable_logger(VTableCallbackInterfaceLogger*);
  void uniffi_uniffi_fixture_callbacks_fn_func_call_log_repeat(uint64_t, RustBuffer, uint32_t, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_fixture_callbacks_fn_func_log_even_numbers(uint64_t, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_fixture_callbacks_fn_func_log_even_numbers_main_thread(uint64_t, RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_callbacks_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_callbacks_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_callbacks_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_fixture_callbacks_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_fixture_callbacks_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_fixture_callbacks_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_fixture_callbacks_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_fixture_callbacks_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_fixture_callbacks_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_fixture_callbacks_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_fixture_callbacks_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_f32(uint64_t);
  float ffi_uniffi_fixture_callbacks_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_f64(uint64_t);
  double ffi_uniffi_fixture_callbacks_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_fixture_callbacks_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_fixture_callbacks_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_callbacks_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_free_void(uint64_t);
  void ffi_uniffi_fixture_callbacks_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_fixture_callbacks_checksum_func_call_log_repeat();
  uint16_t uniffi_uniffi_fixture_callbacks_checksum_func_log_even_numbers();
  uint16_t uniffi_uniffi_fixture_callbacks_checksum_func_log_even_numbers_main_thread();
  uint16_t uniffi_uniffi_fixture_callbacks_checksum_method_logger_log();
  uint16_t uniffi_uniffi_fixture_callbacks_checksum_method_logger_log_repeat();
  uint16_t uniffi_uniffi_fixture_callbacks_checksum_method_logger_finished();
  uint32_t ffi_uniffi_fixture_callbacks_uniffi_contract_version();
  typedef void (*CallbackInterfaceRustTaskMethod0)(uint64_t, void*, RustCallStatus*);
  typedef void (*CallbackInterfaceWorkerQueueMethod0)(uint64_t, void*, void*, RustCallStatus*);
  struct VTableCallbackInterfaceRustTask {
    CallbackInterfaceRustTaskMethod0 run;
    CallbackInterfaceFree uniffi_free;
  };
  struct VTableCallbackInterfaceWorkerQueue {
    CallbackInterfaceWorkerQueueMethod0 add_task;
    CallbackInterfaceFree uniffi_free;
  };
  void* uniffi_uniffi_fixture_futures_fn_clone_futuretester(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_futures_fn_free_futuretester(void*, RustCallStatus*);
  void* uniffi_uniffi_fixture_futures_fn_constructor_futuretester_init(RustCallStatus*);
  uint32_t uniffi_uniffi_fixture_futures_fn_method_futuretester_complete_futures(void*, uint8_t, RustCallStatus*);
  uint64_t uniffi_uniffi_fixture_futures_fn_method_futuretester_make_future(void*);
  void uniffi_uniffi_fixture_futures_fn_method_futuretester_wake_futures(void*, RustCallStatus*);
  void* uniffi_uniffi_fixture_futures_fn_clone_rusttask(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_futures_fn_free_rusttask(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_futures_fn_method_rusttask_run(void*, RustCallStatus*);
  void* uniffi_uniffi_fixture_futures_fn_clone_traveller(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_futures_fn_free_traveller(void*, RustCallStatus*);
  void* uniffi_uniffi_fixture_futures_fn_constructor_traveller_new(RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_fixture_futures_fn_method_traveller_name(void*, RustCallStatus*);
  void* uniffi_uniffi_fixture_futures_fn_clone_workerqueue(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_futures_fn_free_workerqueue(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_futures_fn_method_workerqueue_add_task(void*, void*, RustCallStatus*);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_expensive_computation();
  void uniffi_uniffi_fixture_futures_fn_func_initialize_gecko_global_worker_queue(RustCallStatus*);
  void uniffi_uniffi_fixture_futures_fn_func_initialize_global_worker_queue(void*, RustCallStatus*);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_f32(float);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_f64(double);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_i16(int16_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_i32(int32_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_i64(int64_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_i8(int8_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_map(RustBuffer);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_obj(void*);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_string(RustBuffer);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_u16(uint16_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_u32(uint32_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_u64(uint64_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_u8(uint8_t);
  uint64_t uniffi_uniffi_fixture_futures_fn_func_roundtrip_vec(RustBuffer);
  RustBuffer ffi_uniffi_fixture_futures_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_futures_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_futures_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_fixture_futures_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_fixture_futures_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_fixture_futures_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_fixture_futures_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_fixture_futures_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_fixture_futures_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_fixture_futures_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_fixture_futures_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_f32(uint64_t);
  float ffi_uniffi_fixture_futures_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_f64(uint64_t);
  double ffi_uniffi_fixture_futures_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_fixture_futures_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_fixture_futures_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_futures_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_free_void(uint64_t);
  void ffi_uniffi_fixture_futures_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_expensive_computation();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_initialize_gecko_global_worker_queue();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_initialize_global_worker_queue();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_f32();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_f64();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_i16();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_i32();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_i64();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_i8();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_map();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_obj();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_string();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_u16();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_u32();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_u64();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_u8();
  uint16_t uniffi_uniffi_fixture_futures_checksum_func_roundtrip_vec();
  uint16_t uniffi_uniffi_fixture_futures_checksum_method_futuretester_complete_futures();
  uint16_t uniffi_uniffi_fixture_futures_checksum_method_futuretester_make_future();
  uint16_t uniffi_uniffi_fixture_futures_checksum_method_futuretester_wake_futures();
  uint16_t uniffi_uniffi_fixture_futures_checksum_method_rusttask_run();
  uint16_t uniffi_uniffi_fixture_futures_checksum_method_traveller_name();
  uint16_t uniffi_uniffi_fixture_futures_checksum_method_workerqueue_add_task();
  uint16_t uniffi_uniffi_fixture_futures_checksum_constructor_futuretester_init();
  uint16_t uniffi_uniffi_fixture_futures_checksum_constructor_traveller_new();
  uint32_t ffi_uniffi_fixture_futures_uniffi_contract_version();
  double uniffi_uniffi_geometry_fn_func_gradient(RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_geometry_fn_func_intersection(RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_geometry_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_geometry_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_geometry_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_geometry_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_geometry_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_geometry_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_geometry_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_geometry_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_geometry_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_geometry_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_geometry_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_geometry_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_f32(uint64_t);
  float ffi_uniffi_geometry_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_f64(uint64_t);
  double ffi_uniffi_geometry_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_geometry_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_geometry_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_geometry_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_geometry_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_geometry_rust_future_free_void(uint64_t);
  void ffi_uniffi_geometry_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_geometry_checksum_func_gradient();
  uint16_t uniffi_uniffi_geometry_checksum_func_intersection();
  uint32_t ffi_uniffi_geometry_uniffi_contract_version();
  void* uniffi_uniffi_fixture_refcounts_fn_clone_singletonobject(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_refcounts_fn_free_singletonobject(void*, RustCallStatus*);
  void uniffi_uniffi_fixture_refcounts_fn_method_singletonobject_method(void*, RustCallStatus*);
  int32_t uniffi_uniffi_fixture_refcounts_fn_func_get_js_refcount(RustCallStatus*);
  void* uniffi_uniffi_fixture_refcounts_fn_func_get_singleton(RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_refcounts_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_refcounts_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_fixture_refcounts_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_fixture_refcounts_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_fixture_refcounts_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_fixture_refcounts_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_fixture_refcounts_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_fixture_refcounts_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_fixture_refcounts_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_fixture_refcounts_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_fixture_refcounts_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_f32(uint64_t);
  float ffi_uniffi_fixture_refcounts_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_f64(uint64_t);
  double ffi_uniffi_fixture_refcounts_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_fixture_refcounts_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_fixture_refcounts_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_fixture_refcounts_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_free_void(uint64_t);
  void ffi_uniffi_fixture_refcounts_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_fixture_refcounts_checksum_func_get_js_refcount();
  uint16_t uniffi_uniffi_fixture_refcounts_checksum_func_get_singleton();
  uint16_t uniffi_uniffi_fixture_refcounts_checksum_method_singletonobject_method();
  uint32_t ffi_uniffi_fixture_refcounts_uniffi_contract_version();
  void* uniffi_uniffi_rondpoint_fn_clone_optionneur(void*, RustCallStatus*);
  void uniffi_uniffi_rondpoint_fn_free_optionneur(void*, RustCallStatus*);
  void* uniffi_uniffi_rondpoint_fn_constructor_optionneur_new(RustCallStatus*);
  int8_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_boolean(void*, int8_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_enum(void*, RustBuffer, RustCallStatus*);
  float uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_f32(void*, float, RustCallStatus*);
  double uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_f64(void*, double, RustCallStatus*);
  int16_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i16_dec(void*, int16_t, RustCallStatus*);
  int16_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i16_hex(void*, int16_t, RustCallStatus*);
  int32_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i32_dec(void*, int32_t, RustCallStatus*);
  int32_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i32_hex(void*, int32_t, RustCallStatus*);
  int64_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i64_dec(void*, int64_t, RustCallStatus*);
  int64_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i64_hex(void*, int64_t, RustCallStatus*);
  int8_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i8_dec(void*, int8_t, RustCallStatus*);
  int8_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i8_hex(void*, int8_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_null(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_sequence(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_string(void*, RustBuffer, RustCallStatus*);
  uint16_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u16_dec(void*, uint16_t, RustCallStatus*);
  uint16_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u16_hex(void*, uint16_t, RustCallStatus*);
  uint32_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u32_dec(void*, uint32_t, RustCallStatus*);
  uint32_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u32_hex(void*, uint32_t, RustCallStatus*);
  uint32_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u32_oct(void*, uint32_t, RustCallStatus*);
  uint64_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u64_dec(void*, uint64_t, RustCallStatus*);
  uint64_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u64_hex(void*, uint64_t, RustCallStatus*);
  uint8_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u8_dec(void*, uint8_t, RustCallStatus*);
  uint8_t uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u8_hex(void*, uint8_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_zero(void*, RustBuffer, RustCallStatus*);
  void* uniffi_uniffi_rondpoint_fn_clone_retourneur(void*, RustCallStatus*);
  void uniffi_uniffi_rondpoint_fn_free_retourneur(void*, RustCallStatus*);
  void* uniffi_uniffi_rondpoint_fn_constructor_retourneur_new(RustCallStatus*);
  int8_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_boolean(void*, int8_t, RustCallStatus*);
  double uniffi_uniffi_rondpoint_fn_method_retourneur_identique_double(void*, double, RustCallStatus*);
  float uniffi_uniffi_rondpoint_fn_method_retourneur_identique_float(void*, float, RustCallStatus*);
  int16_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i16(void*, int16_t, RustCallStatus*);
  int32_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i32(void*, int32_t, RustCallStatus*);
  int64_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i64(void*, int64_t, RustCallStatus*);
  int8_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i8(void*, int8_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_retourneur_identique_nombres(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_retourneur_identique_nombres_signes(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_retourneur_identique_optionneur_dictionnaire(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_retourneur_identique_string(void*, RustBuffer, RustCallStatus*);
  uint16_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u16(void*, uint16_t, RustCallStatus*);
  uint32_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u32(void*, uint32_t, RustCallStatus*);
  uint64_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u64(void*, uint64_t, RustCallStatus*);
  uint8_t uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u8(void*, uint8_t, RustCallStatus*);
  void* uniffi_uniffi_rondpoint_fn_clone_stringifier(void*, RustCallStatus*);
  void uniffi_uniffi_rondpoint_fn_free_stringifier(void*, RustCallStatus*);
  void* uniffi_uniffi_rondpoint_fn_constructor_stringifier_new(RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_boolean(void*, int8_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_double(void*, double, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_float(void*, float, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i16(void*, int16_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i32(void*, int32_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i64(void*, int64_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i8(void*, int8_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u16(void*, uint16_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u32(void*, uint32_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u64(void*, uint64_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u8(void*, uint8_t, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_method_stringifier_well_known_string(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_func_copie_carte(RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_func_copie_dictionnaire(RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_func_copie_enumeration(RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_rondpoint_fn_func_copie_enumerations(RustBuffer, RustCallStatus*);
  int8_t uniffi_uniffi_rondpoint_fn_func_switcheroo(int8_t, RustCallStatus*);
  RustBuffer ffi_uniffi_rondpoint_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_rondpoint_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_rondpoint_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_rondpoint_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_rondpoint_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_rondpoint_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_rondpoint_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_rondpoint_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_rondpoint_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_rondpoint_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_rondpoint_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_rondpoint_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_f32(uint64_t);
  float ffi_uniffi_rondpoint_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_f64(uint64_t);
  double ffi_uniffi_rondpoint_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_rondpoint_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_rondpoint_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_rondpoint_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_rondpoint_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_free_void(uint64_t);
  void ffi_uniffi_rondpoint_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_rondpoint_checksum_func_copie_carte();
  uint16_t uniffi_uniffi_rondpoint_checksum_func_copie_dictionnaire();
  uint16_t uniffi_uniffi_rondpoint_checksum_func_copie_enumeration();
  uint16_t uniffi_uniffi_rondpoint_checksum_func_copie_enumerations();
  uint16_t uniffi_uniffi_rondpoint_checksum_func_switcheroo();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_boolean();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_enum();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_f32();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_f64();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i16_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i16_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i32_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i32_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i64_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i64_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i8_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_i8_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_null();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_sequence();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_string();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u16_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u16_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u32_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u32_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u32_oct();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u64_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u64_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u8_dec();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_u8_hex();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_optionneur_sinon_zero();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_boolean();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_double();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_float();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_i16();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_i32();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_i64();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_i8();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_nombres();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_nombres_signes();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_optionneur_dictionnaire();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_string();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_u16();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_u32();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_u64();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_retourneur_identique_u8();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_boolean();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_double();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_float();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_i16();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_i32();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_i64();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_i8();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_u16();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_u32();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_u64();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_to_string_u8();
  uint16_t uniffi_uniffi_rondpoint_checksum_method_stringifier_well_known_string();
  uint16_t uniffi_uniffi_rondpoint_checksum_constructor_optionneur_new();
  uint16_t uniffi_uniffi_rondpoint_checksum_constructor_retourneur_new();
  uint16_t uniffi_uniffi_rondpoint_checksum_constructor_stringifier_new();
  uint32_t ffi_uniffi_rondpoint_uniffi_contract_version();
  void* uniffi_uniffi_sprites_fn_clone_sprite(void*, RustCallStatus*);
  void uniffi_uniffi_sprites_fn_free_sprite(void*, RustCallStatus*);
  void* uniffi_uniffi_sprites_fn_constructor_sprite_new(RustBuffer, RustCallStatus*);
  void* uniffi_uniffi_sprites_fn_constructor_sprite_new_relative_to(RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_sprites_fn_method_sprite_get_position(void*, RustCallStatus*);
  void uniffi_uniffi_sprites_fn_method_sprite_move_by(void*, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_sprites_fn_method_sprite_move_to(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_sprites_fn_func_translate(RustBuffer, RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_sprites_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_sprites_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_sprites_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_sprites_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_sprites_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_sprites_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_sprites_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_sprites_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_sprites_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_sprites_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_sprites_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_sprites_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_f32(uint64_t);
  float ffi_uniffi_sprites_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_f64(uint64_t);
  double ffi_uniffi_sprites_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_sprites_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_sprites_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_sprites_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_sprites_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_sprites_rust_future_free_void(uint64_t);
  void ffi_uniffi_sprites_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_sprites_checksum_func_translate();
  uint16_t uniffi_uniffi_sprites_checksum_method_sprite_get_position();
  uint16_t uniffi_uniffi_sprites_checksum_method_sprite_move_by();
  uint16_t uniffi_uniffi_sprites_checksum_method_sprite_move_to();
  uint16_t uniffi_uniffi_sprites_checksum_constructor_sprite_new();
  uint16_t uniffi_uniffi_sprites_checksum_constructor_sprite_new_relative_to();
  uint32_t ffi_uniffi_sprites_uniffi_contract_version();
  void* uniffi_uniffi_todolist_fn_clone_todolist(void*, RustCallStatus*);
  void uniffi_uniffi_todolist_fn_free_todolist(void*, RustCallStatus*);
  void* uniffi_uniffi_todolist_fn_constructor_todolist_new(RustCallStatus*);
  void uniffi_uniffi_todolist_fn_method_todolist_add_entries(void*, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_todolist_fn_method_todolist_add_entry(void*, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_todolist_fn_method_todolist_add_item(void*, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_todolist_fn_method_todolist_add_items(void*, RustBuffer, RustCallStatus*);
  void uniffi_uniffi_todolist_fn_method_todolist_clear_item(void*, RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_todolist_fn_method_todolist_get_entries(void*, RustCallStatus*);
  RustBuffer uniffi_uniffi_todolist_fn_method_todolist_get_first(void*, RustCallStatus*);
  RustBuffer uniffi_uniffi_todolist_fn_method_todolist_get_items(void*, RustCallStatus*);
  RustBuffer uniffi_uniffi_todolist_fn_method_todolist_get_last(void*, RustCallStatus*);
  RustBuffer uniffi_uniffi_todolist_fn_method_todolist_get_last_entry(void*, RustCallStatus*);
  void uniffi_uniffi_todolist_fn_method_todolist_make_default(void*, RustCallStatus*);
  RustBuffer uniffi_uniffi_todolist_fn_func_create_entry_with(RustBuffer, RustCallStatus*);
  RustBuffer uniffi_uniffi_todolist_fn_func_get_default_list(RustCallStatus*);
  void uniffi_uniffi_todolist_fn_func_set_default_list(void*, RustCallStatus*);
  RustBuffer ffi_uniffi_todolist_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_todolist_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_todolist_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_todolist_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_todolist_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_todolist_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_todolist_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_todolist_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_todolist_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_todolist_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_todolist_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_todolist_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_f32(uint64_t);
  float ffi_uniffi_todolist_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_f64(uint64_t);
  double ffi_uniffi_todolist_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_todolist_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_todolist_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_todolist_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_todolist_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_todolist_rust_future_free_void(uint64_t);
  void ffi_uniffi_todolist_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_todolist_checksum_func_create_entry_with();
  uint16_t uniffi_uniffi_todolist_checksum_func_get_default_list();
  uint16_t uniffi_uniffi_todolist_checksum_func_set_default_list();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_add_entries();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_add_entry();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_add_item();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_add_items();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_clear_item();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_get_entries();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_get_first();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_get_items();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_get_last();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_get_last_entry();
  uint16_t uniffi_uniffi_todolist_checksum_method_todolist_make_default();
  uint16_t uniffi_uniffi_todolist_checksum_constructor_todolist_new();
  uint32_t ffi_uniffi_todolist_uniffi_contract_version();
  typedef void (*CallbackInterfaceCalcMethod0)(uint64_t, uint32_t, uint32_t, uint32_t*, RustCallStatus*);
  struct VTableCallbackInterfaceCalc {
    CallbackInterfaceCalcMethod0 add;
    CallbackInterfaceFree uniffi_free;
  };
  void* uniffi_uniffi_trait_interfaces_fn_clone_calc(void*, RustCallStatus*);
  void uniffi_uniffi_trait_interfaces_fn_free_calc(void*, RustCallStatus*);
  uint32_t uniffi_uniffi_trait_interfaces_fn_method_calc_add(void*, uint32_t, uint32_t, RustCallStatus*);
  void* uniffi_uniffi_trait_interfaces_fn_func_make_buggy_calculator(RustCallStatus*);
  void* uniffi_uniffi_trait_interfaces_fn_func_make_calculator(RustCallStatus*);
  RustBuffer ffi_uniffi_trait_interfaces_rustbuffer_alloc(uint64_t, RustCallStatus*);
  RustBuffer ffi_uniffi_trait_interfaces_rustbuffer_from_bytes(ForeignBytes, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rustbuffer_free(RustBuffer, RustCallStatus*);
  RustBuffer ffi_uniffi_trait_interfaces_rustbuffer_reserve(RustBuffer, uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_u8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_u8(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_u8(uint64_t);
  uint8_t ffi_uniffi_trait_interfaces_rust_future_complete_u8(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_i8(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_i8(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_i8(uint64_t);
  int8_t ffi_uniffi_trait_interfaces_rust_future_complete_i8(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_u16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_u16(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_u16(uint64_t);
  uint16_t ffi_uniffi_trait_interfaces_rust_future_complete_u16(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_i16(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_i16(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_i16(uint64_t);
  int16_t ffi_uniffi_trait_interfaces_rust_future_complete_i16(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_u32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_u32(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_u32(uint64_t);
  uint32_t ffi_uniffi_trait_interfaces_rust_future_complete_u32(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_i32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_i32(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_i32(uint64_t);
  int32_t ffi_uniffi_trait_interfaces_rust_future_complete_i32(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_u64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_u64(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_u64(uint64_t);
  uint64_t ffi_uniffi_trait_interfaces_rust_future_complete_u64(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_i64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_i64(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_i64(uint64_t);
  int64_t ffi_uniffi_trait_interfaces_rust_future_complete_i64(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_f32(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_f32(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_f32(uint64_t);
  float ffi_uniffi_trait_interfaces_rust_future_complete_f32(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_f64(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_f64(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_f64(uint64_t);
  double ffi_uniffi_trait_interfaces_rust_future_complete_f64(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_pointer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_pointer(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_pointer(uint64_t);
  void* ffi_uniffi_trait_interfaces_rust_future_complete_pointer(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_rust_buffer(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_rust_buffer(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_rust_buffer(uint64_t);
  RustBuffer ffi_uniffi_trait_interfaces_rust_future_complete_rust_buffer(uint64_t, RustCallStatus*);
  void ffi_uniffi_trait_interfaces_rust_future_poll_void(uint64_t, RustFutureContinuationCallback, uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_cancel_void(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_free_void(uint64_t);
  void ffi_uniffi_trait_interfaces_rust_future_complete_void(uint64_t, RustCallStatus*);
  uint16_t uniffi_uniffi_trait_interfaces_checksum_func_make_buggy_calculator();
  uint16_t uniffi_uniffi_trait_interfaces_checksum_func_make_calculator();
  uint16_t uniffi_uniffi_trait_interfaces_checksum_method_calc_add();
  uint32_t ffi_uniffi_trait_interfaces_uniffi_contract_version();
#endif /* MOZ_UNIFFI_FIXTURES */
}

// Define pointer types

const static mozilla::uniffi::UniFFIPointerType kRelevancyRelevancyStorePointerType {
  "relevancy::RelevancyStore"_ns,
  uniffi_relevancy_fn_clone_relevancystore,
  uniffi_relevancy_fn_free_relevancystore,
};
const static mozilla::uniffi::UniFFIPointerType kRemoteSettingsRemoteSettingsPointerType {
  "remote_settings::RemoteSettings"_ns,
  uniffi_remote_settings_fn_clone_remotesettings,
  uniffi_remote_settings_fn_free_remotesettings,
};
const static mozilla::uniffi::UniFFIPointerType kRemoteSettingsRemoteSettingsClientPointerType {
  "remote_settings::RemoteSettingsClient"_ns,
  uniffi_remote_settings_fn_clone_remotesettingsclient,
  uniffi_remote_settings_fn_free_remotesettingsclient,
};
const static mozilla::uniffi::UniFFIPointerType kRemoteSettingsRemoteSettingsServicePointerType {
  "remote_settings::RemoteSettingsService"_ns,
  uniffi_remote_settings_fn_clone_remotesettingsservice,
  uniffi_remote_settings_fn_free_remotesettingsservice,
};
const static mozilla::uniffi::UniFFIPointerType kSearchSearchEngineSelectorPointerType {
  "search::SearchEngineSelector"_ns,
  uniffi_search_fn_clone_searchengineselector,
  uniffi_search_fn_free_searchengineselector,
};
const static mozilla::uniffi::UniFFIPointerType kSuggestSuggestStorePointerType {
  "suggest::SuggestStore"_ns,
  uniffi_suggest_fn_clone_suggeststore,
  uniffi_suggest_fn_free_suggeststore,
};
const static mozilla::uniffi::UniFFIPointerType kSuggestSuggestStoreBuilderPointerType {
  "suggest::SuggestStoreBuilder"_ns,
  uniffi_suggest_fn_clone_suggeststorebuilder,
  uniffi_suggest_fn_free_suggeststorebuilder,
};
const static mozilla::uniffi::UniFFIPointerType kTabsRemoteCommandStorePointerType {
  "tabs::RemoteCommandStore"_ns,
  uniffi_tabs_fn_clone_remotecommandstore,
  uniffi_tabs_fn_free_remotecommandstore,
};
const static mozilla::uniffi::UniFFIPointerType kTabsTabsBridgedEnginePointerType {
  "tabs::TabsBridgedEngine"_ns,
  uniffi_tabs_fn_clone_tabsbridgedengine,
  uniffi_tabs_fn_free_tabsbridgedengine,
};
const static mozilla::uniffi::UniFFIPointerType kTabsTabsStorePointerType {
  "tabs::TabsStore"_ns,
  uniffi_tabs_fn_clone_tabsstore,
  uniffi_tabs_fn_free_tabsstore,
};
const static mozilla::uniffi::UniFFIPointerType kWebextstorageWebExtStorageBridgedEnginePointerType {
  "webextstorage::WebExtStorageBridgedEngine"_ns,
  uniffi_webext_storage_fn_clone_webextstoragebridgedengine,
  uniffi_webext_storage_fn_free_webextstoragebridgedengine,
};
const static mozilla::uniffi::UniFFIPointerType kWebextstorageWebExtStorageStorePointerType {
  "webextstorage::WebExtStorageStore"_ns,
  uniffi_webext_storage_fn_clone_webextstoragestore,
  uniffi_webext_storage_fn_free_webextstoragestore,
};

#ifdef MOZ_UNIFFI_FIXTURES
const static mozilla::uniffi::UniFFIPointerType kFuturesFutureTesterPointerType {
  "futures::FutureTester"_ns,
  uniffi_uniffi_fixture_futures_fn_clone_futuretester,
  uniffi_uniffi_fixture_futures_fn_free_futuretester,
};
const static mozilla::uniffi::UniFFIPointerType kFuturesRustTaskPointerType {
  "futures::RustTask"_ns,
  uniffi_uniffi_fixture_futures_fn_clone_rusttask,
  uniffi_uniffi_fixture_futures_fn_free_rusttask,
};
const static mozilla::uniffi::UniFFIPointerType kFuturesTravellerPointerType {
  "futures::Traveller"_ns,
  uniffi_uniffi_fixture_futures_fn_clone_traveller,
  uniffi_uniffi_fixture_futures_fn_free_traveller,
};
const static mozilla::uniffi::UniFFIPointerType kFuturesWorkerQueuePointerType {
  "futures::WorkerQueue"_ns,
  uniffi_uniffi_fixture_futures_fn_clone_workerqueue,
  uniffi_uniffi_fixture_futures_fn_free_workerqueue,
};
const static mozilla::uniffi::UniFFIPointerType kRefcountsSingletonObjectPointerType {
  "refcounts::SingletonObject"_ns,
  uniffi_uniffi_fixture_refcounts_fn_clone_singletonobject,
  uniffi_uniffi_fixture_refcounts_fn_free_singletonobject,
};
const static mozilla::uniffi::UniFFIPointerType kRondpointOptionneurPointerType {
  "rondpoint::Optionneur"_ns,
  uniffi_uniffi_rondpoint_fn_clone_optionneur,
  uniffi_uniffi_rondpoint_fn_free_optionneur,
};
const static mozilla::uniffi::UniFFIPointerType kRondpointRetourneurPointerType {
  "rondpoint::Retourneur"_ns,
  uniffi_uniffi_rondpoint_fn_clone_retourneur,
  uniffi_uniffi_rondpoint_fn_free_retourneur,
};
const static mozilla::uniffi::UniFFIPointerType kRondpointStringifierPointerType {
  "rondpoint::Stringifier"_ns,
  uniffi_uniffi_rondpoint_fn_clone_stringifier,
  uniffi_uniffi_rondpoint_fn_free_stringifier,
};
const static mozilla::uniffi::UniFFIPointerType kSpritesSpritePointerType {
  "sprites::Sprite"_ns,
  uniffi_uniffi_sprites_fn_clone_sprite,
  uniffi_uniffi_sprites_fn_free_sprite,
};
const static mozilla::uniffi::UniFFIPointerType kTodolistTodoListPointerType {
  "todolist::TodoList"_ns,
  uniffi_uniffi_todolist_fn_clone_todolist,
  uniffi_uniffi_todolist_fn_free_todolist,
};
const static mozilla::uniffi::UniFFIPointerType kUniffiTraitInterfacesCalcPointerType {
  "uniffi_trait_interfaces::Calc"_ns,
  uniffi_uniffi_trait_interfaces_fn_clone_calc,
  uniffi_uniffi_trait_interfaces_fn_free_calc,
};
#endif /* MOZ_UNIFFI_FIXTURES */

// Callback interface method handlers, vtables, etc.

static StaticRefPtr<dom::UniFFICallbackHandler> gCallbackInterfaceJsHandlerApplicationErrorReporter;

class CallbackInterfaceMethodApplicationErrorReporterReportError : public UniffiCallbackMethodHandlerBase {
private:
  // Rust arguments, converted using ScaffoldingConverter::FromRust.
  typename ScaffoldingConverter<RustBuffer>::IntermediateType type_name;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType message;

public:
  CallbackInterfaceMethodApplicationErrorReporterReportError(size_t aObjectHandle, RustBuffer type_name, RustBuffer message)
    : UniffiCallbackMethodHandlerBase("errorsupport:ApplicationErrorReporter", aObjectHandle), type_name(ScaffoldingConverter<RustBuffer>::FromRust(type_name)), message(ScaffoldingConverter<RustBuffer>::FromRust(message)) {
  }

  MOZ_CAN_RUN_SCRIPT
  void MakeCall(JSContext* aCx, dom::UniFFICallbackHandler* aJsHandler, ErrorResult& aError) override {
    nsTArray<dom::UniFFIScaffoldingValue> uniffiArgs;
    // Setup
    if (!uniffiArgs.AppendElements(2, mozilla::fallible)) {
      aError.Throw(NS_ERROR_OUT_OF_MEMORY);
      return;
    }

    // Convert each argument
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(this->type_name),
      &uniffiArgs[0],
      aError);
    if (aError.Failed()) {
        return;
    }
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(this->message),
      &uniffiArgs[1],
      aError);
    if (aError.Failed()) {
        return;
    }

    // Stores the return value.  For now, we currently don't do anything with it, since we only support
    // fire-and-forget callbacks.
    NullableRootedUnion<dom::UniFFIScaffoldingValue> returnValue(aCx);
    // Make the call
    aJsHandler->Call(mObjectHandle, 0, uniffiArgs, returnValue, aError);
  }
};

extern "C" void callback_interface_application_error_reporter_report_error(
    uint64_t uniffiHandle,
    RustBuffer type_name, RustBuffer message, 
    void* uniffiOutReturn,
    RustCallStatus* uniffiCallStatus
) {
  UniquePtr<UniffiCallbackMethodHandlerBase> handler = MakeUnique<CallbackInterfaceMethodApplicationErrorReporterReportError>(uniffiHandle, type_name, message);
  // Note: currently we only support queueing fire-and-forget async callbacks

  // For fire-and-forget callbacks, we don't know if the method succeeds or not
  // since it's called later. uniffiCallStatus is initialized to a successful
  // state by the Rust code, so there's no need to modify it.
  UniffiCallbackMethodHandlerBase::FireAndForget(std::move(handler), &gCallbackInterfaceJsHandlerApplicationErrorReporter);
}

class CallbackInterfaceMethodApplicationErrorReporterReportBreadcrumb : public UniffiCallbackMethodHandlerBase {
private:
  // Rust arguments, converted using ScaffoldingConverter::FromRust.
  typename ScaffoldingConverter<RustBuffer>::IntermediateType message;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType module;
  typename ScaffoldingConverter<uint32_t>::IntermediateType line;
  typename ScaffoldingConverter<uint32_t>::IntermediateType column;

public:
  CallbackInterfaceMethodApplicationErrorReporterReportBreadcrumb(size_t aObjectHandle, RustBuffer message, RustBuffer module, uint32_t line, uint32_t column)
    : UniffiCallbackMethodHandlerBase("errorsupport:ApplicationErrorReporter", aObjectHandle), message(ScaffoldingConverter<RustBuffer>::FromRust(message)), module(ScaffoldingConverter<RustBuffer>::FromRust(module)), line(ScaffoldingConverter<uint32_t>::FromRust(line)), column(ScaffoldingConverter<uint32_t>::FromRust(column)) {
  }

  MOZ_CAN_RUN_SCRIPT
  void MakeCall(JSContext* aCx, dom::UniFFICallbackHandler* aJsHandler, ErrorResult& aError) override {
    nsTArray<dom::UniFFIScaffoldingValue> uniffiArgs;
    // Setup
    if (!uniffiArgs.AppendElements(4, mozilla::fallible)) {
      aError.Throw(NS_ERROR_OUT_OF_MEMORY);
      return;
    }

    // Convert each argument
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(this->message),
      &uniffiArgs[0],
      aError);
    if (aError.Failed()) {
        return;
    }
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(this->module),
      &uniffiArgs[1],
      aError);
    if (aError.Failed()) {
        return;
    }
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(this->line),
      &uniffiArgs[2],
      aError);
    if (aError.Failed()) {
        return;
    }
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(this->column),
      &uniffiArgs[3],
      aError);
    if (aError.Failed()) {
        return;
    }

    // Stores the return value.  For now, we currently don't do anything with it, since we only support
    // fire-and-forget callbacks.
    NullableRootedUnion<dom::UniFFIScaffoldingValue> returnValue(aCx);
    // Make the call
    aJsHandler->Call(mObjectHandle, 1, uniffiArgs, returnValue, aError);
  }
};

extern "C" void callback_interface_application_error_reporter_report_breadcrumb(
    uint64_t uniffiHandle,
    RustBuffer message, RustBuffer module, uint32_t line, uint32_t column, 
    void* uniffiOutReturn,
    RustCallStatus* uniffiCallStatus
) {
  UniquePtr<UniffiCallbackMethodHandlerBase> handler = MakeUnique<CallbackInterfaceMethodApplicationErrorReporterReportBreadcrumb>(uniffiHandle, message, module, line, column);
  // Note: currently we only support queueing fire-and-forget async callbacks

  // For fire-and-forget callbacks, we don't know if the method succeeds or not
  // since it's called later. uniffiCallStatus is initialized to a successful
  // state by the Rust code, so there's no need to modify it.
  UniffiCallbackMethodHandlerBase::FireAndForget(std::move(handler), &gCallbackInterfaceJsHandlerApplicationErrorReporter);
}

extern "C" void callbackInterfaceFreeApplicationErrorReporter(uint64_t uniffiHandle) {
  // Callback object handles are keys in a map stored in the JS handler. To
  // handle the free call, make a call into JS which will remove the key.
  // Fire-and-forget is perfect for this.
  UniffiCallbackMethodHandlerBase::FireAndForget(MakeUnique<UniffiCallbackFreeHandler>("errorsupport:ApplicationErrorReporter", uniffiHandle), &gCallbackInterfaceJsHandlerApplicationErrorReporter);
}


static VTableCallbackInterfaceApplicationErrorReporter kCallbackInterfaceVtableApplicationErrorReporter {
  callback_interface_application_error_reporter_report_error,
  callback_interface_application_error_reporter_report_breadcrumb,
  callbackInterfaceFreeApplicationErrorReporter
};

#ifdef MOZ_UNIFFI_FIXTURES
static StaticRefPtr<dom::UniFFICallbackHandler> gCallbackInterfaceJsHandlerLogger;

class CallbackInterfaceMethodLoggerLog : public UniffiCallbackMethodHandlerBase {
private:
  // Rust arguments, converted using ScaffoldingConverter::FromRust.
  typename ScaffoldingConverter<RustBuffer>::IntermediateType message;

public:
  CallbackInterfaceMethodLoggerLog(size_t aObjectHandle, RustBuffer message)
    : UniffiCallbackMethodHandlerBase("fixture_callbacks:Logger", aObjectHandle), message(ScaffoldingConverter<RustBuffer>::FromRust(message)) {
  }

  MOZ_CAN_RUN_SCRIPT
  void MakeCall(JSContext* aCx, dom::UniFFICallbackHandler* aJsHandler, ErrorResult& aError) override {
    nsTArray<dom::UniFFIScaffoldingValue> uniffiArgs;
    // Setup
    if (!uniffiArgs.AppendElements(1, mozilla::fallible)) {
      aError.Throw(NS_ERROR_OUT_OF_MEMORY);
      return;
    }

    // Convert each argument
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(this->message),
      &uniffiArgs[0],
      aError);
    if (aError.Failed()) {
        return;
    }

    // Stores the return value.  For now, we currently don't do anything with it, since we only support
    // fire-and-forget callbacks.
    NullableRootedUnion<dom::UniFFIScaffoldingValue> returnValue(aCx);
    // Make the call
    aJsHandler->Call(mObjectHandle, 0, uniffiArgs, returnValue, aError);
  }
};

extern "C" void callback_interface_logger_log(
    uint64_t uniffiHandle,
    RustBuffer message, 
    void* uniffiOutReturn,
    RustCallStatus* uniffiCallStatus
) {
  UniquePtr<UniffiCallbackMethodHandlerBase> handler = MakeUnique<CallbackInterfaceMethodLoggerLog>(uniffiHandle, message);
  // Note: currently we only support queueing fire-and-forget async callbacks

  // For fire-and-forget callbacks, we don't know if the method succeeds or not
  // since it's called later. uniffiCallStatus is initialized to a successful
  // state by the Rust code, so there's no need to modify it.
  UniffiCallbackMethodHandlerBase::FireAndForget(std::move(handler), &gCallbackInterfaceJsHandlerLogger);
}

class CallbackInterfaceMethodLoggerLogRepeat : public UniffiCallbackMethodHandlerBase {
private:
  // Rust arguments, converted using ScaffoldingConverter::FromRust.
  typename ScaffoldingConverter<RustBuffer>::IntermediateType message;
  typename ScaffoldingConverter<uint32_t>::IntermediateType count;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType exclude;

public:
  CallbackInterfaceMethodLoggerLogRepeat(size_t aObjectHandle, RustBuffer message, uint32_t count, RustBuffer exclude)
    : UniffiCallbackMethodHandlerBase("fixture_callbacks:Logger", aObjectHandle), message(ScaffoldingConverter<RustBuffer>::FromRust(message)), count(ScaffoldingConverter<uint32_t>::FromRust(count)), exclude(ScaffoldingConverter<RustBuffer>::FromRust(exclude)) {
  }

  MOZ_CAN_RUN_SCRIPT
  void MakeCall(JSContext* aCx, dom::UniFFICallbackHandler* aJsHandler, ErrorResult& aError) override {
    nsTArray<dom::UniFFIScaffoldingValue> uniffiArgs;
    // Setup
    if (!uniffiArgs.AppendElements(3, mozilla::fallible)) {
      aError.Throw(NS_ERROR_OUT_OF_MEMORY);
      return;
    }

    // Convert each argument
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(this->message),
      &uniffiArgs[0],
      aError);
    if (aError.Failed()) {
        return;
    }
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(this->count),
      &uniffiArgs[1],
      aError);
    if (aError.Failed()) {
        return;
    }
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(this->exclude),
      &uniffiArgs[2],
      aError);
    if (aError.Failed()) {
        return;
    }

    // Stores the return value.  For now, we currently don't do anything with it, since we only support
    // fire-and-forget callbacks.
    NullableRootedUnion<dom::UniFFIScaffoldingValue> returnValue(aCx);
    // Make the call
    aJsHandler->Call(mObjectHandle, 1, uniffiArgs, returnValue, aError);
  }
};

extern "C" void callback_interface_logger_log_repeat(
    uint64_t uniffiHandle,
    RustBuffer message, uint32_t count, RustBuffer exclude, 
    void* uniffiOutReturn,
    RustCallStatus* uniffiCallStatus
) {
  UniquePtr<UniffiCallbackMethodHandlerBase> handler = MakeUnique<CallbackInterfaceMethodLoggerLogRepeat>(uniffiHandle, message, count, exclude);
  // Note: currently we only support queueing fire-and-forget async callbacks

  // For fire-and-forget callbacks, we don't know if the method succeeds or not
  // since it's called later. uniffiCallStatus is initialized to a successful
  // state by the Rust code, so there's no need to modify it.
  UniffiCallbackMethodHandlerBase::FireAndForget(std::move(handler), &gCallbackInterfaceJsHandlerLogger);
}

class CallbackInterfaceMethodLoggerFinished : public UniffiCallbackMethodHandlerBase {
private:
  // Rust arguments, converted using ScaffoldingConverter::FromRust.

public:
  CallbackInterfaceMethodLoggerFinished(size_t aObjectHandle)
    : UniffiCallbackMethodHandlerBase("fixture_callbacks:Logger", aObjectHandle) {
  }

  MOZ_CAN_RUN_SCRIPT
  void MakeCall(JSContext* aCx, dom::UniFFICallbackHandler* aJsHandler, ErrorResult& aError) override {
    nsTArray<dom::UniFFIScaffoldingValue> uniffiArgs;

    // Stores the return value.  For now, we currently don't do anything with it, since we only support
    // fire-and-forget callbacks.
    NullableRootedUnion<dom::UniFFIScaffoldingValue> returnValue(aCx);
    // Make the call
    aJsHandler->Call(mObjectHandle, 2, uniffiArgs, returnValue, aError);
  }
};

extern "C" void callback_interface_logger_finished(
    uint64_t uniffiHandle,
    
    void* uniffiOutReturn,
    RustCallStatus* uniffiCallStatus
) {
  UniquePtr<UniffiCallbackMethodHandlerBase> handler = MakeUnique<CallbackInterfaceMethodLoggerFinished>(uniffiHandle);
  // Note: currently we only support queueing fire-and-forget async callbacks

  // For fire-and-forget callbacks, we don't know if the method succeeds or not
  // since it's called later. uniffiCallStatus is initialized to a successful
  // state by the Rust code, so there's no need to modify it.
  UniffiCallbackMethodHandlerBase::FireAndForget(std::move(handler), &gCallbackInterfaceJsHandlerLogger);
}

extern "C" void callbackInterfaceFreeLogger(uint64_t uniffiHandle) {
  // Callback object handles are keys in a map stored in the JS handler. To
  // handle the free call, make a call into JS which will remove the key.
  // Fire-and-forget is perfect for this.
  UniffiCallbackMethodHandlerBase::FireAndForget(MakeUnique<UniffiCallbackFreeHandler>("fixture_callbacks:Logger", uniffiHandle), &gCallbackInterfaceJsHandlerLogger);
}


static VTableCallbackInterfaceLogger kCallbackInterfaceVtableLogger {
  callback_interface_logger_log,
  callback_interface_logger_log_repeat,
  callback_interface_logger_finished,
  callbackInterfaceFreeLogger
};
#endif /* MOZ_UNIFFI_FIXTURES */

void RegisterCallbackHandler(uint64_t aInterfaceId, UniFFICallbackHandler& aCallbackHandler, ErrorResult& aError) {
  switch (aInterfaceId) {
    
    case 0: {
      if (gCallbackInterfaceJsHandlerApplicationErrorReporter) {
        aError.ThrowUnknownError("[UniFFI] Callback handler already registered for errorsupport:ApplicationErrorReporter"_ns);
        return;
      }

      gCallbackInterfaceJsHandlerApplicationErrorReporter = &aCallbackHandler;
      uniffi_error_support_fn_init_callback_vtable_applicationerrorreporter(&kCallbackInterfaceVtableApplicationErrorReporter);
      break;
    }
    
    #ifdef MOZ_UNIFFI_FIXTURES
    case 1: {
      if (gCallbackInterfaceJsHandlerLogger) {
        aError.ThrowUnknownError("[UniFFI] Callback handler already registered for fixture_callbacks:Logger"_ns);
        return;
      }

      gCallbackInterfaceJsHandlerLogger = &aCallbackHandler;
      uniffi_uniffi_fixture_callbacks_fn_init_callback_vtable_logger(&kCallbackInterfaceVtableLogger);
      break;
    }
    #endif /* MOZ_UNIFFI_FIXTURES */

    default:
      aError.ThrowUnknownError(nsPrintfCString("Unknown interface id: %" PRIu64, aInterfaceId));
      return;
  }
}

void DeregisterCallbackHandler(uint64_t aInterfaceId, ErrorResult& aError) {
  switch (aInterfaceId) {
    
    case 0: {
      if (!gCallbackInterfaceJsHandlerApplicationErrorReporter) {
        aError.ThrowUnknownError("[UniFFI] Callback handler not registered for errorsupport:ApplicationErrorReporter"_ns);
        return;
      }

      gCallbackInterfaceJsHandlerApplicationErrorReporter = nullptr;
      break;
    }
    
    #ifdef MOZ_UNIFFI_FIXTURES
    case 1: {
      if (!gCallbackInterfaceJsHandlerLogger) {
        aError.ThrowUnknownError("[UniFFI] Callback handler not registered for fixture_callbacks:Logger"_ns);
        return;
      }

      gCallbackInterfaceJsHandlerLogger = nullptr;
      break;
    }
    #endif /* MOZ_UNIFFI_FIXTURES */

    default:
      aError.ThrowUnknownError(nsPrintfCString("Unknown interface id: %" PRIu64, aInterfaceId));
      return;
  }
}


// Define scaffolding call classes for each combination of return/argument types

class ScaffoldingCallHandlerUniffiErrorSupportFnFuncSetApplicationErrorReporter : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mErrorReporter;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mErrorReporter, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_error_support_fn_func_set_application_error_reporter(
      ScaffoldingConverter<uint64_t>::IntoRust(std::move(mErrorReporter)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiErrorSupportFnFuncUnsetApplicationErrorReporter : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_error_support_fn_func_unset_application_error_reporter(
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnFuncScore : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mInterestVector;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mContentCategories;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<double>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mInterestVector, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mContentCategories, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<double>::FromRust(
      uniffi_relevancy_fn_func_score(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mInterestVector)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mContentCategories)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<double>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreBanditInit : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mBandit;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mArms;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mBandit, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mArms, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_relevancy_fn_method_relevancystore_bandit_init(
      ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mBandit)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mArms)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreBanditSelect : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mBandit;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mArms;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mBandit, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mArms, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_relevancy_fn_method_relevancystore_bandit_select(
        ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mBandit)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mArms)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreBanditUpdate : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mBandit;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mArm;
  typename ScaffoldingConverter<int8_t>::IntermediateType mSelected;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mBandit, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mArm, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[3], &mSelected, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_relevancy_fn_method_relevancystore_bandit_update(
      ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mBandit)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mArm)),
      ScaffoldingConverter<int8_t>::IntoRust(std::move(mSelected)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreCalculateMetrics : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_relevancy_fn_method_relevancystore_calculate_metrics(
        ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreClose : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_relevancy_fn_method_relevancystore_close(
      ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreGetBanditData : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mBandit;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mArm;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mBandit, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mArm, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_relevancy_fn_method_relevancystore_get_bandit_data(
        ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mBandit)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mArm)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreIngest : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mTopUrlsByFrecency;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mTopUrlsByFrecency, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_relevancy_fn_method_relevancystore_ingest(
        ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mTopUrlsByFrecency)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreInterrupt : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_relevancy_fn_method_relevancystore_interrupt(
      ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreUserInterestVector : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_relevancy_fn_method_relevancystore_user_interest_vector(
        ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRelevancyFnConstructorRelevancystoreNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mDbPath;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mDbPath, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::FromRust(
      uniffi_relevancy_fn_constructor_relevancystore_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mDbPath)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRelevancyRelevancyStorePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsDownloadAttachmentToPath : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mAttachmentId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mPath;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mAttachmentId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mPath, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_remote_settings_fn_method_remotesettings_download_attachment_to_path(
      ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mAttachmentId)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mPath)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsGetRecords : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_remote_settings_fn_method_remotesettings_get_records(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsGetRecordsSince : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mTimestamp;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mTimestamp, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_remote_settings_fn_method_remotesettings_get_records_since(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mTimestamp)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnConstructorRemotesettingsNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mRemoteSettingsConfig;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mRemoteSettingsConfig, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::FromRust(
      uniffi_remote_settings_fn_constructor_remotesettings_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mRemoteSettingsConfig)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientCollectionName : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_remote_settings_fn_method_remotesettingsclient_collection_name(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientGetAttachment : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mRecord;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mRecord, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_remote_settings_fn_method_remotesettingsclient_get_attachment(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mRecord)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientGetRecords : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mSyncIfEmpty;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mSyncIfEmpty, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_remote_settings_fn_method_remotesettingsclient_get_records(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mSyncIfEmpty)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientGetRecordsMap : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mSyncIfEmpty;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mSyncIfEmpty, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_remote_settings_fn_method_remotesettingsclient_get_records_map(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mSyncIfEmpty)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsserviceMakeClient : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mCollectionName;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mAppContext;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mCollectionName, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mAppContext, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::FromRust(
      uniffi_remote_settings_fn_method_remotesettingsservice_make_client(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mCollectionName)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mAppContext)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsClientPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsserviceSync : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_remote_settings_fn_method_remotesettingsservice_sync(
        ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsserviceUpdateConfig : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mConfig;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mConfig, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_remote_settings_fn_method_remotesettingsservice_update_config(
      ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mConfig)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiRemoteSettingsFnConstructorRemotesettingsserviceNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mStorageDir;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mConfig;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mStorageDir, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mConfig, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::FromRust(
      uniffi_remote_settings_fn_constructor_remotesettingsservice_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mStorageDir)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mConfig)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRemoteSettingsRemoteSettingsServicePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSearchFnMethodSearchengineselectorClearSearchConfig : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_search_fn_method_searchengineselector_clear_search_config(
      ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiSearchFnMethodSearchengineselectorFilterEngineConfiguration : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUserEnvironment;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mUserEnvironment, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_search_fn_method_searchengineselector_filter_engine_configuration(
        ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mUserEnvironment)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSearchFnMethodSearchengineselectorSetSearchConfig : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mConfiguration;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mConfiguration, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_search_fn_method_searchengineselector_set_search_config(
      ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mConfiguration)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiSearchFnConstructorSearchengineselectorNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::FromRust(
      uniffi_search_fn_constructor_searchengineselector_new(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSearchSearchEngineSelectorPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnFuncRawSuggestionUrlMatches : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mRawUrl;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mCookedUrl;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mRawUrl, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mCookedUrl, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_suggest_fn_func_raw_suggestion_url_matches(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mRawUrl)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mCookedUrl)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreClear : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_suggest_fn_method_suggeststore_clear(
      ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreClearDismissedSuggestions : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_suggest_fn_method_suggeststore_clear_dismissed_suggestions(
      ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreDismissSuggestion : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mSuggestionUrl;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mSuggestionUrl, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_suggest_fn_method_suggeststore_dismiss_suggestion(
      ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mSuggestionUrl)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreFetchGeonames : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mQuery;
  typename ScaffoldingConverter<int8_t>::IntermediateType mMatchNamePrefix;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mGeonameType;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mFilter;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mQuery, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[2], &mMatchNamePrefix, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[3], &mGeonameType, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[4], &mFilter, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_suggest_fn_method_suggeststore_fetch_geonames(
        ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mQuery)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mMatchNamePrefix)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mGeonameType)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mFilter)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreFetchGlobalConfig : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_suggest_fn_method_suggeststore_fetch_global_config(
        ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreFetchProviderConfig : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mProvider;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mProvider, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_suggest_fn_method_suggeststore_fetch_provider_config(
        ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mProvider)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreIngest : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mConstraints;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mConstraints, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_suggest_fn_method_suggeststore_ingest(
        ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mConstraints)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreInterrupt : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mKind;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mKind, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_suggest_fn_method_suggeststore_interrupt(
      ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mKind)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreQuery : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mQuery;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mQuery, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_suggest_fn_method_suggeststore_query(
        ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mQuery)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreQueryWithMetrics : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mQuery;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mQuery, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_suggest_fn_method_suggeststore_query_with_metrics(
        ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mQuery)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnConstructorSuggeststoreNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mPath;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mSettingsConfig;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mPath, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mSettingsConfig, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromRust(
      uniffi_suggest_fn_constructor_suggeststore_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mPath)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mSettingsConfig)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderBuild : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::FromRust(
      uniffi_suggest_fn_method_suggeststorebuilder_build(
        ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStorePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderCachePath : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mPath;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mPath, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromRust(
      uniffi_suggest_fn_method_suggeststorebuilder_cache_path(
        ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mPath)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderDataPath : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mPath;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mPath, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromRust(
      uniffi_suggest_fn_method_suggeststorebuilder_data_path(
        ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mPath)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderLoadExtension : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mLibrary;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mEntryPoint;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mLibrary, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mEntryPoint, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromRust(
      uniffi_suggest_fn_method_suggeststorebuilder_load_extension(
        ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mLibrary)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mEntryPoint)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsBucketName : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mBucketName;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mBucketName, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromRust(
      uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_bucket_name(
        ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mBucketName)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsServer : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mServer;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mServer, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromRust(
      uniffi_suggest_fn_method_suggeststorebuilder_remote_settings_server(
        ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mServer)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiSuggestFnConstructorSuggeststorebuilderNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::FromRust(
      uniffi_suggest_fn_constructor_suggeststorebuilder_new(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSuggestSuggestStoreBuilderPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreAddRemoteCommand : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mDeviceId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mCommand;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mDeviceId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mCommand, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_tabs_fn_method_remotecommandstore_add_remote_command(
        ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mDeviceId)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mCommand)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreAddRemoteCommandAt : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mDeviceId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mCommand;
  typename ScaffoldingConverter<int64_t>::IntermediateType mWhen;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mDeviceId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mCommand, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[3], &mWhen, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_tabs_fn_method_remotecommandstore_add_remote_command_at(
        ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mDeviceId)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mCommand)),
        ScaffoldingConverter<int64_t>::IntoRust(std::move(mWhen)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreGetUnsentCommands : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_tabs_fn_method_remotecommandstore_get_unsent_commands(
        ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreRemoveRemoteCommand : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mDeviceId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mCommand;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mDeviceId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mCommand, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_tabs_fn_method_remotecommandstore_remove_remote_command(
        ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mDeviceId)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mCommand)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreSetPendingCommandSent : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mCommand;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mCommand, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_tabs_fn_method_remotecommandstore_set_pending_command_sent(
        ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mCommand)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineApply : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_tabs_fn_method_tabsbridgedengine_apply(
        ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineEnsureCurrentSyncId : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mNewSyncId;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mNewSyncId, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_tabs_fn_method_tabsbridgedengine_ensure_current_sync_id(
        ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mNewSyncId)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineLastSync : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int64_t>::FromRust(
      uniffi_tabs_fn_method_tabsbridgedengine_last_sync(
        ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedenginePrepareForSync : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mClientData;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mClientData, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_prepare_for_sync(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mClientData)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineReset : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_reset(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineResetSyncId : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_tabs_fn_method_tabsbridgedengine_reset_sync_id(
        ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSetLastSync : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mLastSync;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mLastSync, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_set_last_sync(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<int64_t>::IntoRust(std::move(mLastSync)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSetUploaded : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mNewTimestamp;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUploadedIds;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mNewTimestamp, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mUploadedIds, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_set_uploaded(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<int64_t>::IntoRust(std::move(mNewTimestamp)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mUploadedIds)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineStoreIncoming : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mIncomingEnvelopesAsJson;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mIncomingEnvelopesAsJson, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_store_incoming(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mIncomingEnvelopesAsJson)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSyncFinished : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_sync_finished(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSyncId : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_tabs_fn_method_tabsbridgedengine_sync_id(
        ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSyncStarted : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_sync_started(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineWipe : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsbridgedengine_wipe(
      ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreBridgedEngine : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::FromRust(
      uniffi_tabs_fn_method_tabsstore_bridged_engine(
        ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsBridgedEnginePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreCloseConnection : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsstore_close_connection(
      ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreGetAll : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_tabs_fn_method_tabsstore_get_all(
        ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreNewRemoteCommandStore : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::FromRust(
      uniffi_tabs_fn_method_tabsstore_new_remote_command_store(
        ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsRemoteCommandStorePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreRegisterWithSyncManager : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsstore_register_with_sync_manager(
      ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreSetLocalTabs : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mRemoteTabs;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mRemoteTabs, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_tabs_fn_method_tabsstore_set_local_tabs(
      ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mRemoteTabs)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiTabsFnConstructorTabsstoreNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mPath;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mPath, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::FromRust(
      uniffi_tabs_fn_constructor_tabsstore_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mPath)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTabsTabsStorePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineApply : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragebridgedengine_apply(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineEnsureCurrentSyncId : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mNewSyncId;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mNewSyncId, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragebridgedengine_ensure_current_sync_id(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mNewSyncId)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineLastSync : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int64_t>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragebridgedengine_last_sync(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedenginePrepareForSync : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mClientData;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mClientData, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_prepare_for_sync(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mClientData)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineReset : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_reset(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineResetSyncId : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragebridgedengine_reset_sync_id(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSetLastSync : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mLastSync;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mLastSync, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_set_last_sync(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<int64_t>::IntoRust(std::move(mLastSync)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSetUploaded : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mServerModifiedMillis;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mGuids;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mServerModifiedMillis, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mGuids, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_set_uploaded(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<int64_t>::IntoRust(std::move(mServerModifiedMillis)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mGuids)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineStoreIncoming : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mIncoming;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mIncoming, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_store_incoming(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mIncoming)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSyncFinished : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_sync_finished(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSyncId : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragebridgedengine_sync_id(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSyncStarted : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_sync_started(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineWipe : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragebridgedengine_wipe(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreBridgedEngine : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragestore_bridged_engine(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageBridgedEnginePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreClear : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mExtId;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mExtId, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragestore_clear(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mExtId)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreClose : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_webext_storage_fn_method_webextstoragestore_close(
      ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreGet : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mExtId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mKeys;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mExtId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mKeys, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragestore_get(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mExtId)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mKeys)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreGetBytesInUse : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mExtId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mKeys;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mExtId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mKeys, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragestore_get_bytes_in_use(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mExtId)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mKeys)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreGetSyncedChanges : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragestore_get_synced_changes(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreRemove : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mExtId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mKeys;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mExtId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mKeys, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragestore_remove(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mExtId)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mKeys)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreSet : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mExtId;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mVal;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mExtId, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[2], &mVal, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_webext_storage_fn_method_webextstoragestore_set(
        ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mExtId)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mVal)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiWebextStorageFnConstructorWebextstoragestoreNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mPath;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mPath, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::FromRust(
      uniffi_webext_storage_fn_constructor_webextstoragestore_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mPath)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kWebextstorageWebExtStorageStorePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};

#ifdef MOZ_UNIFFI_FIXTURES
class ScaffoldingCallHandlerUniffiArithmeticalFnFuncAdd : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mA;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mB;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mA, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mB, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      uniffi_arithmetical_fn_func_add(
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mA)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mB)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiArithmeticalFnFuncDiv : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mDividend;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mDivisor;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mDividend, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mDivisor, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      uniffi_arithmetical_fn_func_div(
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mDividend)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mDivisor)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiArithmeticalFnFuncEqual : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mA;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mB;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mA, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mB, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_arithmetical_fn_func_equal(
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mA)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mB)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiArithmeticalFnFuncSub : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mA;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mB;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mA, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mB, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      uniffi_arithmetical_fn_func_sub(
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mA)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mB)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiCustomTypesFnFuncGetCustomTypesDemo : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mDemo;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mDemo, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_custom_types_fn_func_get_custom_types_demo(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mDemo)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureExternalTypesFnFuncGradient : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<double>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<double>::FromRust(
      uniffi_uniffi_fixture_external_types_fn_func_gradient(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<double>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureExternalTypesFnFuncIntersection : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mLn1;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mLn2;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mLn1, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mLn2, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_fixture_external_types_fn_func_intersection(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mLn1)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mLn2)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureExternalTypesFnFuncMoveSpriteToOrigin : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntermediateType mSprite;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSpritesSpritePointerType>::FromJs(aArgs[0], &mSprite, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_external_types_fn_func_move_sprite_to_origin(
      ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntoRust(std::move(mSprite)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureCallbacksFnFuncCallLogRepeat : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mLogger;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mMessage;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mCount;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mExclude;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mLogger, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mMessage, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[2], &mCount, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[3], &mExclude, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_callbacks_fn_func_call_log_repeat(
      ScaffoldingConverter<uint64_t>::IntoRust(std::move(mLogger)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mMessage)),
      ScaffoldingConverter<uint32_t>::IntoRust(std::move(mCount)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mExclude)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureCallbacksFnFuncLogEvenNumbers : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mLogger;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mItems;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mLogger, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mItems, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_callbacks_fn_func_log_even_numbers(
      ScaffoldingConverter<uint64_t>::IntoRust(std::move(mLogger)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mItems)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureCallbacksFnFuncLogEvenNumbersMainThread : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mLogger;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mItems;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mLogger, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mItems, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_callbacks_fn_func_log_even_numbers_main_thread(
      ScaffoldingConverter<uint64_t>::IntoRust(std::move(mLogger)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mItems)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncExpensiveComputation : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncExpensiveComputation() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_u32, ffi_uniffi_fixture_futures_rust_future_free_u32) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_expensive_computation(
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_u32(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncInitializeGeckoGlobalWorkerQueue : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_futures_fn_func_initialize_gecko_global_worker_queue(
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncInitializeGlobalWorkerQueue : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kFuturesWorkerQueuePointerType>::IntermediateType mWorkerQueue;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesWorkerQueuePointerType>::FromJs(aArgs[0], &mWorkerQueue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_futures_fn_func_initialize_global_worker_queue(
      ScaffoldingObjectConverter<&kFuturesWorkerQueuePointerType>::IntoRust(std::move(mWorkerQueue)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripF32 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripF32() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_f32, ffi_uniffi_fixture_futures_rust_future_free_f32) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<float>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<float>::IntermediateType mV;
    ScaffoldingConverter<float>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_f32(
      ScaffoldingConverter<float>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<float>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_f32(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<float>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripF64 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripF64() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_f64, ffi_uniffi_fixture_futures_rust_future_free_f64) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<double>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<double>::IntermediateType mV;
    ScaffoldingConverter<double>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_f64(
      ScaffoldingConverter<double>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<double>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_f64(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<double>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI16 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI16() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_i16, ffi_uniffi_fixture_futures_rust_future_free_i16) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<int16_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<int16_t>::IntermediateType mV;
    ScaffoldingConverter<int16_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_i16(
      ScaffoldingConverter<int16_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int16_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_i16(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI32 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI32() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_i32, ffi_uniffi_fixture_futures_rust_future_free_i32) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<int32_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<int32_t>::IntermediateType mV;
    ScaffoldingConverter<int32_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_i32(
      ScaffoldingConverter<int32_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int32_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_i32(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI64 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI64() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_i64, ffi_uniffi_fixture_futures_rust_future_free_i64) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<int64_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<int64_t>::IntermediateType mV;
    ScaffoldingConverter<int64_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_i64(
      ScaffoldingConverter<int64_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int64_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_i64(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI8 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI8() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_i8, ffi_uniffi_fixture_futures_rust_future_free_i8) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<int8_t>::IntermediateType mV;
    ScaffoldingConverter<int8_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_i8(
      ScaffoldingConverter<int8_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_i8(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripMap : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripMap() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_rust_buffer, ffi_uniffi_fixture_futures_rust_future_free_rust_buffer) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<RustBuffer>::IntermediateType mV;
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_map(
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_rust_buffer(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripObj : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripObj() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_pointer, ffi_uniffi_fixture_futures_rust_future_free_pointer) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntermediateType mV;
    ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_obj(
      ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_pointer(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripString : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripString() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_rust_buffer, ffi_uniffi_fixture_futures_rust_future_free_rust_buffer) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<RustBuffer>::IntermediateType mV;
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_string(
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_rust_buffer(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU16 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU16() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_u16, ffi_uniffi_fixture_futures_rust_future_free_u16) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<uint16_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<uint16_t>::IntermediateType mV;
    ScaffoldingConverter<uint16_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_u16(
      ScaffoldingConverter<uint16_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint16_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_u16(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU32 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU32() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_u32, ffi_uniffi_fixture_futures_rust_future_free_u32) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<uint32_t>::IntermediateType mV;
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_u32(
      ScaffoldingConverter<uint32_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_u32(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU64 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU64() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_u64, ffi_uniffi_fixture_futures_rust_future_free_u64) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<uint64_t>::IntermediateType mV;
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_u64(
      ScaffoldingConverter<uint64_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_u64(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU8 : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU8() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_u8, ffi_uniffi_fixture_futures_rust_future_free_u8) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<uint8_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<uint8_t>::IntermediateType mV;
    ScaffoldingConverter<uint8_t>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_u8(
      ScaffoldingConverter<uint8_t>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint8_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_u8(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripVec : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripVec() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_rust_buffer, ffi_uniffi_fixture_futures_rust_future_free_rust_buffer) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingConverter<RustBuffer>::IntermediateType mV;
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mV, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_func_roundtrip_vec(
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mV))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_rust_buffer(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodFuturetesterCompleteFutures : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      uniffi_uniffi_fixture_futures_fn_method_futuretester_complete_futures(
        ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodFuturetesterMakeFuture : public UniffiAsyncCallHandler {
public:
  ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodFuturetesterMakeFuture() : UniffiAsyncCallHandler(ffi_uniffi_fixture_futures_rust_future_poll_u8, ffi_uniffi_fixture_futures_rust_future_free_u8) { }

private:
  // Complete stores the result of the call in mUniffiReturnValue
  typename ScaffoldingConverter<uint8_t>::IntermediateType mUniffiReturnValue;

protected:
  // Convert a sequence of JS arguments and call the scaffolding function.
  // Always called on the main thread since async Rust calls don't block, they
  // return a future.
  void PrepareArgsAndMakeRustCall(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    typename ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntermediateType mPtr;
    ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }

    mFutureHandle = uniffi_uniffi_fixture_futures_fn_method_futuretester_make_future(
      ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntoRust(std::move(mPtr))
    );
  }

  void CallCompleteFn(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint8_t>::FromRust(
      ffi_uniffi_fixture_futures_rust_future_complete_u8(mFutureHandle, aOutStatus));
  }

public:
  void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodFuturetesterWakeFutures : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_futures_fn_method_futuretester_wake_futures(
      ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnConstructorFuturetesterInit : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::FromRust(
      uniffi_uniffi_fixture_futures_fn_constructor_futuretester_init(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesFutureTesterPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodRusttaskRun : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kFuturesRustTaskPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesRustTaskPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_futures_fn_method_rusttask_run(
      ScaffoldingObjectConverter<&kFuturesRustTaskPointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodTravellerName : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_fixture_futures_fn_method_traveller_name(
        ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnConstructorTravellerNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mName;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mName, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::FromRust(
      uniffi_uniffi_fixture_futures_fn_constructor_traveller_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mName)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesTravellerPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodWorkerqueueAddTask : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kFuturesWorkerQueuePointerType>::IntermediateType mPtr;
  typename ScaffoldingObjectConverter<&kFuturesRustTaskPointerType>::IntermediateType mTask;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kFuturesWorkerQueuePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingObjectConverter<&kFuturesRustTaskPointerType>::FromJs(aArgs[1], &mTask, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_futures_fn_method_workerqueue_add_task(
      ScaffoldingObjectConverter<&kFuturesWorkerQueuePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingObjectConverter<&kFuturesRustTaskPointerType>::IntoRust(std::move(mTask)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiGeometryFnFuncGradient : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mLn;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<double>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mLn, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<double>::FromRust(
      uniffi_uniffi_geometry_fn_func_gradient(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mLn)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<double>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiGeometryFnFuncIntersection : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mLn1;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mLn2;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mLn1, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mLn2, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_geometry_fn_func_intersection(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mLn1)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mLn2)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureRefcountsFnFuncGetJsRefcount : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int32_t>::FromRust(
      uniffi_uniffi_fixture_refcounts_fn_func_get_js_refcount(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureRefcountsFnFuncGetSingleton : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRefcountsSingletonObjectPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRefcountsSingletonObjectPointerType>::FromRust(
      uniffi_uniffi_fixture_refcounts_fn_func_get_singleton(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRefcountsSingletonObjectPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiFixtureRefcountsFnMethodSingletonobjectMethod : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRefcountsSingletonObjectPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRefcountsSingletonObjectPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_fixture_refcounts_fn_method_singletonobject_method(
      ScaffoldingObjectConverter<&kRefcountsSingletonObjectPointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieCarte : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mC;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mC, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_func_copie_carte(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mC)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieDictionnaire : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mD;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mD, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_func_copie_dictionnaire(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mD)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieEnumeration : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mE;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mE, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_func_copie_enumeration(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mE)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieEnumerations : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mE;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mE, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_func_copie_enumerations(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mE)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncSwitcheroo : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mB;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::FromJs(aArgs[0], &mB, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_func_switcheroo(
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mB)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonBoolean : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_boolean(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonEnum : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_enum(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonF32 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<float>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<float>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<float>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<float>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_f32(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<float>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<float>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonF64 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<double>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<double>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<double>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<double>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_f64(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<double>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<double>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI16Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int16_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int16_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i16_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI16Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int16_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int16_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i16_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI32Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int32_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i32_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI32Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int32_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i32_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI64Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int64_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i64_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI64Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int64_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i64_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI8Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i8_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI8Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_i8_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonNull : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_null(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonSequence : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_sequence(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonString : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_string(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU16Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint16_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint16_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u16_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU16Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint16_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint16_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u16_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU32Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u32_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU32Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u32_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU32Oct : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u32_oct(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU64Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u64_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU64Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u64_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU8Dec : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u8_dec(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU8Hex : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_u8_hex(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonZero : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_optionneur_sinon_zero(
        ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnConstructorOptionneurNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::FromRust(
      uniffi_uniffi_rondpoint_fn_constructor_optionneur_new(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointOptionneurPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueBoolean : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_boolean(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueDouble : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<double>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<double>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<double>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<double>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_double(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<double>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<double>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueFloat : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<float>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<float>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<float>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<float>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_float(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<float>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<float>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI16 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int16_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int16_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i16(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI32 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int32_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i32(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI64 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int64_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i64(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI8 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<int8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<int8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_i8(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<int8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueNombres : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_nombres(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueNombresSignes : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_nombres_signes(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueOptionneurDictionnaire : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_optionneur_dictionnaire(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueString : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_string(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU16 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint16_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint16_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u16(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint16_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU32 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u32(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU64 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint64_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint64_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u64(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint64_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU8 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint8_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint8_t>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_retourneur_identique_u8(
        ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint8_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnConstructorRetourneurNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::FromRust(
      uniffi_uniffi_rondpoint_fn_constructor_retourneur_new(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointRetourneurPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringBoolean : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_boolean(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringDouble : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<double>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<double>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_double(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<double>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringFloat : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<float>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<float>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_float(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<float>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI16 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i16(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI32 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i32(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI64 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i64(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI8 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<int8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<int8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_i8(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<int8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU16 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint16_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint16_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u16(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint16_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU32 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u32(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint32_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU64 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint64_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint64_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u64(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint64_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU8 : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint8_t>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint8_t>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_to_string_u8(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint8_t>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierWellKnownString : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mValue;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mValue, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_rondpoint_fn_method_stringifier_well_known_string(
        ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mValue)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiRondpointFnConstructorStringifierNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::FromRust(
      uniffi_uniffi_rondpoint_fn_constructor_stringifier_new(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kRondpointStringifierPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiSpritesFnFuncTranslate : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mP;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mV;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mP, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mV, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_sprites_fn_func_translate(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mP)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mV)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiSpritesFnMethodSpriteGetPosition : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSpritesSpritePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_sprites_fn_method_sprite_get_position(
        ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiSpritesFnMethodSpriteMoveBy : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mDirection;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSpritesSpritePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mDirection, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_sprites_fn_method_sprite_move_by(
      ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mDirection)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiSpritesFnMethodSpriteMoveTo : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mPosition;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSpritesSpritePointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mPosition, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_sprites_fn_method_sprite_move_to(
      ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mPosition)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiSpritesFnConstructorSpriteNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mInitialPosition;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mInitialPosition, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSpritesSpritePointerType>::FromRust(
      uniffi_uniffi_sprites_fn_constructor_sprite_new(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mInitialPosition)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiSpritesFnConstructorSpriteNewRelativeTo : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mReference;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mDirection;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mReference, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mDirection, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kSpritesSpritePointerType>::FromRust(
      uniffi_uniffi_sprites_fn_constructor_sprite_new_relative_to(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mReference)),
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mDirection)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kSpritesSpritePointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnFuncCreateEntryWith : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mTodo;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[0], &mTodo, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_todolist_fn_func_create_entry_with(
        ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mTodo)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnFuncGetDefaultList : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_todolist_fn_func_get_default_list(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnFuncSetDefaultList : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mList;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mList, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_todolist_fn_func_set_default_list(
      ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mList)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddEntries : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mEntries;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mEntries, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_todolist_fn_method_todolist_add_entries(
      ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mEntries)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddEntry : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mEntry;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mEntry, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_todolist_fn_method_todolist_add_entry(
      ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mEntry)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddItem : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mTodo;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mTodo, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_todolist_fn_method_todolist_add_item(
      ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mTodo)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddItems : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mItems;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mItems, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_todolist_fn_method_todolist_add_items(
      ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mItems)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistClearItem : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mTodo;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<RustBuffer>::FromJs(aArgs[1], &mTodo, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_todolist_fn_method_todolist_clear_item(
      ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
      ScaffoldingConverter<RustBuffer>::IntoRust(std::move(mTodo)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetEntries : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_todolist_fn_method_todolist_get_entries(
        ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetFirst : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_todolist_fn_method_todolist_get_first(
        ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetItems : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_todolist_fn_method_todolist_get_items(
        ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetLast : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_todolist_fn_method_todolist_get_last(
        ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetLastEntry : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<RustBuffer>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<RustBuffer>::FromRust(
      uniffi_uniffi_todolist_fn_method_todolist_get_last_entry(
        ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<RustBuffer>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistMakeDefault : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mPtr;

  // MakeRustCall stores the result of the call in these fields

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    uniffi_uniffi_todolist_fn_method_todolist_make_default(
      ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoRust(std::move(mPtr)),
      aOutStatus
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
  }
};
class ScaffoldingCallHandlerUniffiUniffiTodolistFnConstructorTodolistNew : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::FromRust(
      uniffi_uniffi_todolist_fn_constructor_todolist_new(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kTodolistTodoListPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTraitInterfacesFnFuncMakeBuggyCalculator : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::FromRust(
      uniffi_uniffi_trait_interfaces_fn_func_make_buggy_calculator(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTraitInterfacesFnFuncMakeCalculator : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::FromRust(
      uniffi_uniffi_trait_interfaces_fn_func_make_calculator(
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
class ScaffoldingCallHandlerUniffiUniffiTraitInterfacesFnMethodCalcAdd : public UniffiSyncCallHandler {
private:
  // PrepareRustArgs stores the resulting arguments in these fields
  typename ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::IntermediateType mPtr;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mA;
  typename ScaffoldingConverter<uint32_t>::IntermediateType mB;

  // MakeRustCall stores the result of the call in these fields
  typename ScaffoldingConverter<uint32_t>::IntermediateType mUniffiReturnValue;

public:
  void PrepareRustArgs(const dom::Sequence<dom::UniFFIScaffoldingValue>& aArgs, ErrorResult& aError) override {
    ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::FromJs(aArgs[0], &mPtr, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[1], &mA, aError);
    if (aError.Failed()) {
      return;
    }
    ScaffoldingConverter<uint32_t>::FromJs(aArgs[2], &mB, aError);
    if (aError.Failed()) {
      return;
    }
  }

  void MakeRustCall(RustCallStatus* aOutStatus) override {
    mUniffiReturnValue = ScaffoldingConverter<uint32_t>::FromRust(
      uniffi_uniffi_trait_interfaces_fn_method_calc_add(
        ScaffoldingObjectConverter<&kUniffiTraitInterfacesCalcPointerType>::IntoRust(std::move(mPtr)),
        ScaffoldingConverter<uint32_t>::IntoRust(std::move(mA)),
        ScaffoldingConverter<uint32_t>::IntoRust(std::move(mB)),
        aOutStatus
      )
    );
  }

  virtual void ExtractSuccessfulCallResult(JSContext* aCx, dom::Optional<dom::UniFFIScaffoldingValue>& aDest, ErrorResult& aError) override {
    ScaffoldingConverter<uint32_t>::IntoJs(
      aCx,
      std::move(mUniffiReturnValue),
      &aDest.Construct(),
      aError
    );
  }
};
#endif /* MOZ_UNIFFI_FIXTURES */

UniquePtr<UniffiSyncCallHandler> GetSyncCallHandler(uint64_t aId) {
  switch (aId) {

    case 0: {
      return MakeUnique<ScaffoldingCallHandlerUniffiErrorSupportFnFuncSetApplicationErrorReporter>();
    }
    case 1: {
      return MakeUnique<ScaffoldingCallHandlerUniffiErrorSupportFnFuncUnsetApplicationErrorReporter>();
    }
    case 2: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnFuncScore>();
    }
    case 3: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreBanditInit>();
    }
    case 4: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreBanditSelect>();
    }
    case 5: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreBanditUpdate>();
    }
    case 6: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreCalculateMetrics>();
    }
    case 7: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreClose>();
    }
    case 8: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreGetBanditData>();
    }
    case 9: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreIngest>();
    }
    case 10: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreInterrupt>();
    }
    case 11: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnMethodRelevancystoreUserInterestVector>();
    }
    case 12: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRelevancyFnConstructorRelevancystoreNew>();
    }
    case 13: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsDownloadAttachmentToPath>();
    }
    case 14: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsGetRecords>();
    }
    case 15: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsGetRecordsSince>();
    }
    case 16: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnConstructorRemotesettingsNew>();
    }
    case 17: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientCollectionName>();
    }
    case 18: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientGetAttachment>();
    }
    case 19: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientGetRecords>();
    }
    case 20: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsclientGetRecordsMap>();
    }
    case 21: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsserviceMakeClient>();
    }
    case 22: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsserviceSync>();
    }
    case 23: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnMethodRemotesettingsserviceUpdateConfig>();
    }
    case 24: {
      return MakeUnique<ScaffoldingCallHandlerUniffiRemoteSettingsFnConstructorRemotesettingsserviceNew>();
    }
    case 25: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSearchFnMethodSearchengineselectorClearSearchConfig>();
    }
    case 26: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSearchFnMethodSearchengineselectorFilterEngineConfiguration>();
    }
    case 27: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSearchFnMethodSearchengineselectorSetSearchConfig>();
    }
    case 28: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSearchFnConstructorSearchengineselectorNew>();
    }
    case 29: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnFuncRawSuggestionUrlMatches>();
    }
    case 30: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreClear>();
    }
    case 31: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreClearDismissedSuggestions>();
    }
    case 32: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreDismissSuggestion>();
    }
    case 33: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreFetchGeonames>();
    }
    case 34: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreFetchGlobalConfig>();
    }
    case 35: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreFetchProviderConfig>();
    }
    case 36: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreIngest>();
    }
    case 37: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreInterrupt>();
    }
    case 38: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreQuery>();
    }
    case 39: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststoreQueryWithMetrics>();
    }
    case 40: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnConstructorSuggeststoreNew>();
    }
    case 41: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderBuild>();
    }
    case 42: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderCachePath>();
    }
    case 43: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderDataPath>();
    }
    case 44: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderLoadExtension>();
    }
    case 45: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsBucketName>();
    }
    case 46: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnMethodSuggeststorebuilderRemoteSettingsServer>();
    }
    case 47: {
      return MakeUnique<ScaffoldingCallHandlerUniffiSuggestFnConstructorSuggeststorebuilderNew>();
    }
    case 48: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreAddRemoteCommand>();
    }
    case 49: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreAddRemoteCommandAt>();
    }
    case 50: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreGetUnsentCommands>();
    }
    case 51: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreRemoveRemoteCommand>();
    }
    case 52: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodRemotecommandstoreSetPendingCommandSent>();
    }
    case 53: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineApply>();
    }
    case 54: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineEnsureCurrentSyncId>();
    }
    case 55: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineLastSync>();
    }
    case 56: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedenginePrepareForSync>();
    }
    case 57: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineReset>();
    }
    case 58: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineResetSyncId>();
    }
    case 59: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSetLastSync>();
    }
    case 60: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSetUploaded>();
    }
    case 61: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineStoreIncoming>();
    }
    case 62: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSyncFinished>();
    }
    case 63: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSyncId>();
    }
    case 64: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineSyncStarted>();
    }
    case 65: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsbridgedengineWipe>();
    }
    case 66: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreBridgedEngine>();
    }
    case 67: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreCloseConnection>();
    }
    case 68: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreGetAll>();
    }
    case 69: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreNewRemoteCommandStore>();
    }
    case 70: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreRegisterWithSyncManager>();
    }
    case 71: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnMethodTabsstoreSetLocalTabs>();
    }
    case 72: {
      return MakeUnique<ScaffoldingCallHandlerUniffiTabsFnConstructorTabsstoreNew>();
    }
    case 73: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineApply>();
    }
    case 74: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineEnsureCurrentSyncId>();
    }
    case 75: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineLastSync>();
    }
    case 76: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedenginePrepareForSync>();
    }
    case 77: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineReset>();
    }
    case 78: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineResetSyncId>();
    }
    case 79: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSetLastSync>();
    }
    case 80: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSetUploaded>();
    }
    case 81: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineStoreIncoming>();
    }
    case 82: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSyncFinished>();
    }
    case 83: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSyncId>();
    }
    case 84: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineSyncStarted>();
    }
    case 85: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragebridgedengineWipe>();
    }
    case 86: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreBridgedEngine>();
    }
    case 87: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreClear>();
    }
    case 88: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreClose>();
    }
    case 89: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreGet>();
    }
    case 90: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreGetBytesInUse>();
    }
    case 91: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreGetSyncedChanges>();
    }
    case 92: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreRemove>();
    }
    case 93: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnMethodWebextstoragestoreSet>();
    }
    case 94: {
      return MakeUnique<ScaffoldingCallHandlerUniffiWebextStorageFnConstructorWebextstoragestoreNew>();
    }

#ifdef MOZ_UNIFFI_FIXTURES
    case 95: {
      return MakeUnique<ScaffoldingCallHandlerUniffiArithmeticalFnFuncAdd>();
    }
    case 96: {
      return MakeUnique<ScaffoldingCallHandlerUniffiArithmeticalFnFuncDiv>();
    }
    case 97: {
      return MakeUnique<ScaffoldingCallHandlerUniffiArithmeticalFnFuncEqual>();
    }
    case 98: {
      return MakeUnique<ScaffoldingCallHandlerUniffiArithmeticalFnFuncSub>();
    }
    case 99: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiCustomTypesFnFuncGetCustomTypesDemo>();
    }
    case 100: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureExternalTypesFnFuncGradient>();
    }
    case 101: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureExternalTypesFnFuncIntersection>();
    }
    case 102: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureExternalTypesFnFuncMoveSpriteToOrigin>();
    }
    case 103: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureCallbacksFnFuncCallLogRepeat>();
    }
    case 104: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureCallbacksFnFuncLogEvenNumbers>();
    }
    case 105: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureCallbacksFnFuncLogEvenNumbersMainThread>();
    }
    case 107: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncInitializeGeckoGlobalWorkerQueue>();
    }
    case 108: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncInitializeGlobalWorkerQueue>();
    }
    case 123: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodFuturetesterCompleteFutures>();
    }
    case 125: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodFuturetesterWakeFutures>();
    }
    case 126: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnConstructorFuturetesterInit>();
    }
    case 127: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodRusttaskRun>();
    }
    case 128: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodTravellerName>();
    }
    case 129: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnConstructorTravellerNew>();
    }
    case 130: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodWorkerqueueAddTask>();
    }
    case 131: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiGeometryFnFuncGradient>();
    }
    case 132: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiGeometryFnFuncIntersection>();
    }
    case 133: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureRefcountsFnFuncGetJsRefcount>();
    }
    case 134: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureRefcountsFnFuncGetSingleton>();
    }
    case 135: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureRefcountsFnMethodSingletonobjectMethod>();
    }
    case 136: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieCarte>();
    }
    case 137: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieDictionnaire>();
    }
    case 138: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieEnumeration>();
    }
    case 139: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncCopieEnumerations>();
    }
    case 140: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnFuncSwitcheroo>();
    }
    case 141: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonBoolean>();
    }
    case 142: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonEnum>();
    }
    case 143: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonF32>();
    }
    case 144: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonF64>();
    }
    case 145: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI16Dec>();
    }
    case 146: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI16Hex>();
    }
    case 147: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI32Dec>();
    }
    case 148: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI32Hex>();
    }
    case 149: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI64Dec>();
    }
    case 150: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI64Hex>();
    }
    case 151: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI8Dec>();
    }
    case 152: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonI8Hex>();
    }
    case 153: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonNull>();
    }
    case 154: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonSequence>();
    }
    case 155: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonString>();
    }
    case 156: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU16Dec>();
    }
    case 157: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU16Hex>();
    }
    case 158: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU32Dec>();
    }
    case 159: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU32Hex>();
    }
    case 160: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU32Oct>();
    }
    case 161: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU64Dec>();
    }
    case 162: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU64Hex>();
    }
    case 163: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU8Dec>();
    }
    case 164: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonU8Hex>();
    }
    case 165: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodOptionneurSinonZero>();
    }
    case 166: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnConstructorOptionneurNew>();
    }
    case 167: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueBoolean>();
    }
    case 168: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueDouble>();
    }
    case 169: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueFloat>();
    }
    case 170: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI16>();
    }
    case 171: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI32>();
    }
    case 172: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI64>();
    }
    case 173: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueI8>();
    }
    case 174: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueNombres>();
    }
    case 175: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueNombresSignes>();
    }
    case 176: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueOptionneurDictionnaire>();
    }
    case 177: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueString>();
    }
    case 178: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU16>();
    }
    case 179: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU32>();
    }
    case 180: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU64>();
    }
    case 181: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodRetourneurIdentiqueU8>();
    }
    case 182: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnConstructorRetourneurNew>();
    }
    case 183: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringBoolean>();
    }
    case 184: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringDouble>();
    }
    case 185: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringFloat>();
    }
    case 186: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI16>();
    }
    case 187: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI32>();
    }
    case 188: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI64>();
    }
    case 189: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringI8>();
    }
    case 190: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU16>();
    }
    case 191: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU32>();
    }
    case 192: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU64>();
    }
    case 193: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierToStringU8>();
    }
    case 194: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnMethodStringifierWellKnownString>();
    }
    case 195: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiRondpointFnConstructorStringifierNew>();
    }
    case 196: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiSpritesFnFuncTranslate>();
    }
    case 197: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiSpritesFnMethodSpriteGetPosition>();
    }
    case 198: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiSpritesFnMethodSpriteMoveBy>();
    }
    case 199: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiSpritesFnMethodSpriteMoveTo>();
    }
    case 200: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiSpritesFnConstructorSpriteNew>();
    }
    case 201: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiSpritesFnConstructorSpriteNewRelativeTo>();
    }
    case 202: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnFuncCreateEntryWith>();
    }
    case 203: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnFuncGetDefaultList>();
    }
    case 204: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnFuncSetDefaultList>();
    }
    case 205: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddEntries>();
    }
    case 206: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddEntry>();
    }
    case 207: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddItem>();
    }
    case 208: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistAddItems>();
    }
    case 209: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistClearItem>();
    }
    case 210: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetEntries>();
    }
    case 211: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetFirst>();
    }
    case 212: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetItems>();
    }
    case 213: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetLast>();
    }
    case 214: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistGetLastEntry>();
    }
    case 215: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnMethodTodolistMakeDefault>();
    }
    case 216: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTodolistFnConstructorTodolistNew>();
    }
    case 217: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTraitInterfacesFnFuncMakeBuggyCalculator>();
    }
    case 218: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTraitInterfacesFnFuncMakeCalculator>();
    }
    case 219: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiTraitInterfacesFnMethodCalcAdd>();
    }
#endif /* MOZ_UNIFFI_FIXTURES */

    default:
      return nullptr;
  }
}

UniquePtr<UniffiAsyncCallHandler> GetAsyncCallHandler(uint64_t aId) {
  switch (aId) {


#ifdef MOZ_UNIFFI_FIXTURES
    case 106: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncExpensiveComputation>();
    }
    case 109: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripF32>();
    }
    case 110: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripF64>();
    }
    case 111: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI16>();
    }
    case 112: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI32>();
    }
    case 113: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI64>();
    }
    case 114: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripI8>();
    }
    case 115: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripMap>();
    }
    case 116: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripObj>();
    }
    case 117: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripString>();
    }
    case 118: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU16>();
    }
    case 119: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU32>();
    }
    case 120: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU64>();
    }
    case 121: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripU8>();
    }
    case 122: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnFuncRoundtripVec>();
    }
    case 124: {
      return MakeUnique<ScaffoldingCallHandlerUniffiUniffiFixtureFuturesFnMethodFuturetesterMakeFuture>();
    }
#endif /* MOZ_UNIFFI_FIXTURES */

    default:
      return nullptr;
  }
}


Maybe<already_AddRefed<UniFFIPointer>> ReadPointer(const GlobalObject& aGlobal, uint64_t aId, const ArrayBuffer& aArrayBuff, long aPosition, ErrorResult& aError) {
  const UniFFIPointerType* type;
  switch (aId) {

    case 0: {
      type = &kRelevancyRelevancyStorePointerType;
      break;
    }
    case 1: {
      type = &kRemoteSettingsRemoteSettingsPointerType;
      break;
    }
    case 2: {
      type = &kRemoteSettingsRemoteSettingsClientPointerType;
      break;
    }
    case 3: {
      type = &kRemoteSettingsRemoteSettingsServicePointerType;
      break;
    }
    case 4: {
      type = &kSearchSearchEngineSelectorPointerType;
      break;
    }
    case 5: {
      type = &kSuggestSuggestStorePointerType;
      break;
    }
    case 6: {
      type = &kSuggestSuggestStoreBuilderPointerType;
      break;
    }
    case 7: {
      type = &kTabsRemoteCommandStorePointerType;
      break;
    }
    case 8: {
      type = &kTabsTabsBridgedEnginePointerType;
      break;
    }
    case 9: {
      type = &kTabsTabsStorePointerType;
      break;
    }
    case 10: {
      type = &kWebextstorageWebExtStorageBridgedEnginePointerType;
      break;
    }
    case 11: {
      type = &kWebextstorageWebExtStorageStorePointerType;
      break;
    }

#ifdef MOZ_UNIFFI_FIXTURES
    case 12: {
      type = &kFuturesFutureTesterPointerType;
      break;
    }
    case 13: {
      type = &kFuturesRustTaskPointerType;
      break;
    }
    case 14: {
      type = &kFuturesTravellerPointerType;
      break;
    }
    case 15: {
      type = &kFuturesWorkerQueuePointerType;
      break;
    }
    case 16: {
      type = &kRefcountsSingletonObjectPointerType;
      break;
    }
    case 17: {
      type = &kRondpointOptionneurPointerType;
      break;
    }
    case 18: {
      type = &kRondpointRetourneurPointerType;
      break;
    }
    case 19: {
      type = &kRondpointStringifierPointerType;
      break;
    }
    case 20: {
      type = &kSpritesSpritePointerType;
      break;
    }
    case 21: {
      type = &kTodolistTodoListPointerType;
      break;
    }
    case 22: {
      type = &kUniffiTraitInterfacesCalcPointerType;
      break;
    }
#endif /* MOZ_UNIFFI_FIXTURES */
    default:
      return Nothing();
  }
  return Some(UniFFIPointer::Read(aArrayBuff, aPosition, type, aError));
}

bool WritePointer(const GlobalObject& aGlobal, uint64_t aId, const UniFFIPointer& aPtr, const ArrayBuffer& aArrayBuff, long aPosition, ErrorResult& aError) {
  const UniFFIPointerType* type;
  switch (aId) {

    case 0: {
      type = &kRelevancyRelevancyStorePointerType;
      break;
    }
    case 1: {
      type = &kRemoteSettingsRemoteSettingsPointerType;
      break;
    }
    case 2: {
      type = &kRemoteSettingsRemoteSettingsClientPointerType;
      break;
    }
    case 3: {
      type = &kRemoteSettingsRemoteSettingsServicePointerType;
      break;
    }
    case 4: {
      type = &kSearchSearchEngineSelectorPointerType;
      break;
    }
    case 5: {
      type = &kSuggestSuggestStorePointerType;
      break;
    }
    case 6: {
      type = &kSuggestSuggestStoreBuilderPointerType;
      break;
    }
    case 7: {
      type = &kTabsRemoteCommandStorePointerType;
      break;
    }
    case 8: {
      type = &kTabsTabsBridgedEnginePointerType;
      break;
    }
    case 9: {
      type = &kTabsTabsStorePointerType;
      break;
    }
    case 10: {
      type = &kWebextstorageWebExtStorageBridgedEnginePointerType;
      break;
    }
    case 11: {
      type = &kWebextstorageWebExtStorageStorePointerType;
      break;
    }

#ifdef MOZ_UNIFFI_FIXTURES
    case 12: {
      type = &kFuturesFutureTesterPointerType;
      break;
    }
    case 13: {
      type = &kFuturesRustTaskPointerType;
      break;
    }
    case 14: {
      type = &kFuturesTravellerPointerType;
      break;
    }
    case 15: {
      type = &kFuturesWorkerQueuePointerType;
      break;
    }
    case 16: {
      type = &kRefcountsSingletonObjectPointerType;
      break;
    }
    case 17: {
      type = &kRondpointOptionneurPointerType;
      break;
    }
    case 18: {
      type = &kRondpointRetourneurPointerType;
      break;
    }
    case 19: {
      type = &kRondpointStringifierPointerType;
      break;
    }
    case 20: {
      type = &kSpritesSpritePointerType;
      break;
    }
    case 21: {
      type = &kTodolistTodoListPointerType;
      break;
    }
    case 22: {
      type = &kUniffiTraitInterfacesCalcPointerType;
      break;
    }
#endif /* MOZ_UNIFFI_FIXTURES */
    default:
      return false;
  }
  aPtr.Write(aArrayBuff, aPosition, type, aError);
  return true;
}

}  // namespace mozilla::uniffi
