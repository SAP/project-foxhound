// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cookieBanner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cookieBanner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cookieBanner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cookieBanner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cookieBanner_2eproto {
  static const uint32_t offsets[];
};
namespace mozilla {
namespace cookieBanner {
class GoogleSOCSCookie;
struct GoogleSOCSCookieDefaultTypeInternal;
extern GoogleSOCSCookieDefaultTypeInternal _GoogleSOCSCookie_default_instance_;
class GoogleSOCSCookie_extraData;
struct GoogleSOCSCookie_extraDataDefaultTypeInternal;
extern GoogleSOCSCookie_extraDataDefaultTypeInternal _GoogleSOCSCookie_extraData_default_instance_;
class GoogleSOCSCookie_timeData;
struct GoogleSOCSCookie_timeDataDefaultTypeInternal;
extern GoogleSOCSCookie_timeDataDefaultTypeInternal _GoogleSOCSCookie_timeData_default_instance_;
}  // namespace cookieBanner
}  // namespace mozilla
PROTOBUF_NAMESPACE_OPEN
template<> ::mozilla::cookieBanner::GoogleSOCSCookie* Arena::CreateMaybeMessage<::mozilla::cookieBanner::GoogleSOCSCookie>(Arena*);
template<> ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* Arena::CreateMaybeMessage<::mozilla::cookieBanner::GoogleSOCSCookie_extraData>(Arena*);
template<> ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* Arena::CreateMaybeMessage<::mozilla::cookieBanner::GoogleSOCSCookie_timeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozilla {
namespace cookieBanner {

// ===================================================================

class GoogleSOCSCookie_extraData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.cookieBanner.GoogleSOCSCookie.extraData) */ {
 public:
  inline GoogleSOCSCookie_extraData() : GoogleSOCSCookie_extraData(nullptr) {}
  ~GoogleSOCSCookie_extraData() override;
  explicit PROTOBUF_CONSTEXPR GoogleSOCSCookie_extraData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleSOCSCookie_extraData(const GoogleSOCSCookie_extraData& from);
  GoogleSOCSCookie_extraData(GoogleSOCSCookie_extraData&& from) noexcept
    : GoogleSOCSCookie_extraData() {
    *this = ::std::move(from);
  }

  inline GoogleSOCSCookie_extraData& operator=(const GoogleSOCSCookie_extraData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleSOCSCookie_extraData& operator=(GoogleSOCSCookie_extraData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GoogleSOCSCookie_extraData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleSOCSCookie_extraData* internal_default_instance() {
    return reinterpret_cast<const GoogleSOCSCookie_extraData*>(
               &_GoogleSOCSCookie_extraData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GoogleSOCSCookie_extraData& a, GoogleSOCSCookie_extraData& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleSOCSCookie_extraData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleSOCSCookie_extraData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleSOCSCookie_extraData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleSOCSCookie_extraData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GoogleSOCSCookie_extraData& from);
  void MergeFrom(const GoogleSOCSCookie_extraData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GoogleSOCSCookie_extraData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.cookieBanner.GoogleSOCSCookie.extraData";
  }
  protected:
  explicit GoogleSOCSCookie_extraData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 2,
    kRegionFieldNumber = 3,
    kUnused1FieldNumber = 1,
    kUnused2FieldNumber = 4,
  };
  // required string platform = 2;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // required string region = 3;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // required uint32 unused1 = 1;
  bool has_unused1() const;
  private:
  bool _internal_has_unused1() const;
  public:
  void clear_unused1();
  uint32_t unused1() const;
  void set_unused1(uint32_t value);
  private:
  uint32_t _internal_unused1() const;
  void _internal_set_unused1(uint32_t value);
  public:

  // required uint32 unused2 = 4;
  bool has_unused2() const;
  private:
  bool _internal_has_unused2() const;
  public:
  void clear_unused2();
  uint32_t unused2() const;
  void set_unused2(uint32_t value);
  private:
  uint32_t _internal_unused2() const;
  void _internal_set_unused2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.cookieBanner.GoogleSOCSCookie.extraData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    uint32_t unused1_;
    uint32_t unused2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cookieBanner_2eproto;
};
// -------------------------------------------------------------------

class GoogleSOCSCookie_timeData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.cookieBanner.GoogleSOCSCookie.timeData) */ {
 public:
  inline GoogleSOCSCookie_timeData() : GoogleSOCSCookie_timeData(nullptr) {}
  ~GoogleSOCSCookie_timeData() override;
  explicit PROTOBUF_CONSTEXPR GoogleSOCSCookie_timeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleSOCSCookie_timeData(const GoogleSOCSCookie_timeData& from);
  GoogleSOCSCookie_timeData(GoogleSOCSCookie_timeData&& from) noexcept
    : GoogleSOCSCookie_timeData() {
    *this = ::std::move(from);
  }

  inline GoogleSOCSCookie_timeData& operator=(const GoogleSOCSCookie_timeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleSOCSCookie_timeData& operator=(GoogleSOCSCookie_timeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GoogleSOCSCookie_timeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleSOCSCookie_timeData* internal_default_instance() {
    return reinterpret_cast<const GoogleSOCSCookie_timeData*>(
               &_GoogleSOCSCookie_timeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GoogleSOCSCookie_timeData& a, GoogleSOCSCookie_timeData& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleSOCSCookie_timeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleSOCSCookie_timeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleSOCSCookie_timeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleSOCSCookie_timeData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GoogleSOCSCookie_timeData& from);
  void MergeFrom(const GoogleSOCSCookie_timeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GoogleSOCSCookie_timeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.cookieBanner.GoogleSOCSCookie.timeData";
  }
  protected:
  explicit GoogleSOCSCookie_timeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 1,
  };
  // required uint64 timeStamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.cookieBanner.GoogleSOCSCookie.timeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cookieBanner_2eproto;
};
// -------------------------------------------------------------------

class GoogleSOCSCookie final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.cookieBanner.GoogleSOCSCookie) */ {
 public:
  inline GoogleSOCSCookie() : GoogleSOCSCookie(nullptr) {}
  ~GoogleSOCSCookie() override;
  explicit PROTOBUF_CONSTEXPR GoogleSOCSCookie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleSOCSCookie(const GoogleSOCSCookie& from);
  GoogleSOCSCookie(GoogleSOCSCookie&& from) noexcept
    : GoogleSOCSCookie() {
    *this = ::std::move(from);
  }

  inline GoogleSOCSCookie& operator=(const GoogleSOCSCookie& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleSOCSCookie& operator=(GoogleSOCSCookie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GoogleSOCSCookie& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleSOCSCookie* internal_default_instance() {
    return reinterpret_cast<const GoogleSOCSCookie*>(
               &_GoogleSOCSCookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GoogleSOCSCookie& a, GoogleSOCSCookie& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleSOCSCookie* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleSOCSCookie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleSOCSCookie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleSOCSCookie>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GoogleSOCSCookie& from);
  void MergeFrom(const GoogleSOCSCookie& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GoogleSOCSCookie* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.cookieBanner.GoogleSOCSCookie";
  }
  protected:
  explicit GoogleSOCSCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GoogleSOCSCookie_extraData extraData;
  typedef GoogleSOCSCookie_timeData timeData;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTimeFieldNumber = 3,
    kGdprChoiceFieldNumber = 1,
  };
  // required .mozilla.cookieBanner.GoogleSOCSCookie.extraData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::mozilla::cookieBanner::GoogleSOCSCookie_extraData& data() const;
  PROTOBUF_NODISCARD ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* release_data();
  ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* mutable_data();
  void set_allocated_data(::mozilla::cookieBanner::GoogleSOCSCookie_extraData* data);
  private:
  const ::mozilla::cookieBanner::GoogleSOCSCookie_extraData& _internal_data() const;
  ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* data);
  ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* unsafe_arena_release_data();

  // required .mozilla.cookieBanner.GoogleSOCSCookie.timeData time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::mozilla::cookieBanner::GoogleSOCSCookie_timeData& time() const;
  PROTOBUF_NODISCARD ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* release_time();
  ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* mutable_time();
  void set_allocated_time(::mozilla::cookieBanner::GoogleSOCSCookie_timeData* time);
  private:
  const ::mozilla::cookieBanner::GoogleSOCSCookie_timeData& _internal_time() const;
  ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* time);
  ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* unsafe_arena_release_time();

  // required uint32 gdpr_choice = 1;
  bool has_gdpr_choice() const;
  private:
  bool _internal_has_gdpr_choice() const;
  public:
  void clear_gdpr_choice();
  uint32_t gdpr_choice() const;
  void set_gdpr_choice(uint32_t value);
  private:
  uint32_t _internal_gdpr_choice() const;
  void _internal_set_gdpr_choice(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.cookieBanner.GoogleSOCSCookie)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* data_;
    ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* time_;
    uint32_t gdpr_choice_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cookieBanner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GoogleSOCSCookie_extraData

// required uint32 unused1 = 1;
inline bool GoogleSOCSCookie_extraData::_internal_has_unused1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GoogleSOCSCookie_extraData::has_unused1() const {
  return _internal_has_unused1();
}
inline void GoogleSOCSCookie_extraData::clear_unused1() {
  _impl_.unused1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GoogleSOCSCookie_extraData::_internal_unused1() const {
  return _impl_.unused1_;
}
inline uint32_t GoogleSOCSCookie_extraData::unused1() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.extraData.unused1)
  return _internal_unused1();
}
inline void GoogleSOCSCookie_extraData::_internal_set_unused1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unused1_ = value;
}
inline void GoogleSOCSCookie_extraData::set_unused1(uint32_t value) {
  _internal_set_unused1(value);
  // @@protoc_insertion_point(field_set:mozilla.cookieBanner.GoogleSOCSCookie.extraData.unused1)
}

// required string platform = 2;
inline bool GoogleSOCSCookie_extraData::_internal_has_platform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GoogleSOCSCookie_extraData::has_platform() const {
  return _internal_has_platform();
}
inline void GoogleSOCSCookie_extraData::clear_platform() {
  _impl_.platform_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GoogleSOCSCookie_extraData::platform() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.extraData.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoogleSOCSCookie_extraData::set_platform(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mozilla.cookieBanner.GoogleSOCSCookie.extraData.platform)
}
inline std::string* GoogleSOCSCookie_extraData::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:mozilla.cookieBanner.GoogleSOCSCookie.extraData.platform)
  return _s;
}
inline const std::string& GoogleSOCSCookie_extraData::_internal_platform() const {
  return _impl_.platform_.Get();
}
inline void GoogleSOCSCookie_extraData::_internal_set_platform(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.platform_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSOCSCookie_extraData::_internal_mutable_platform() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.platform_.Mutable(GetArenaForAllocation());
}
inline std::string* GoogleSOCSCookie_extraData::release_platform() {
  // @@protoc_insertion_point(field_release:mozilla.cookieBanner.GoogleSOCSCookie.extraData.platform)
  if (!_internal_has_platform()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.platform_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GoogleSOCSCookie_extraData::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mozilla.cookieBanner.GoogleSOCSCookie.extraData.platform)
}

// required string region = 3;
inline bool GoogleSOCSCookie_extraData::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GoogleSOCSCookie_extraData::has_region() const {
  return _internal_has_region();
}
inline void GoogleSOCSCookie_extraData::clear_region() {
  _impl_.region_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GoogleSOCSCookie_extraData::region() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.extraData.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoogleSOCSCookie_extraData::set_region(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mozilla.cookieBanner.GoogleSOCSCookie.extraData.region)
}
inline std::string* GoogleSOCSCookie_extraData::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:mozilla.cookieBanner.GoogleSOCSCookie.extraData.region)
  return _s;
}
inline const std::string& GoogleSOCSCookie_extraData::_internal_region() const {
  return _impl_.region_.Get();
}
inline void GoogleSOCSCookie_extraData::_internal_set_region(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSOCSCookie_extraData::_internal_mutable_region() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* GoogleSOCSCookie_extraData::release_region() {
  // @@protoc_insertion_point(field_release:mozilla.cookieBanner.GoogleSOCSCookie.extraData.region)
  if (!_internal_has_region()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.region_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GoogleSOCSCookie_extraData::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mozilla.cookieBanner.GoogleSOCSCookie.extraData.region)
}

// required uint32 unused2 = 4;
inline bool GoogleSOCSCookie_extraData::_internal_has_unused2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GoogleSOCSCookie_extraData::has_unused2() const {
  return _internal_has_unused2();
}
inline void GoogleSOCSCookie_extraData::clear_unused2() {
  _impl_.unused2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GoogleSOCSCookie_extraData::_internal_unused2() const {
  return _impl_.unused2_;
}
inline uint32_t GoogleSOCSCookie_extraData::unused2() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.extraData.unused2)
  return _internal_unused2();
}
inline void GoogleSOCSCookie_extraData::_internal_set_unused2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unused2_ = value;
}
inline void GoogleSOCSCookie_extraData::set_unused2(uint32_t value) {
  _internal_set_unused2(value);
  // @@protoc_insertion_point(field_set:mozilla.cookieBanner.GoogleSOCSCookie.extraData.unused2)
}

// -------------------------------------------------------------------

// GoogleSOCSCookie_timeData

// required uint64 timeStamp = 1;
inline bool GoogleSOCSCookie_timeData::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GoogleSOCSCookie_timeData::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void GoogleSOCSCookie_timeData::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t GoogleSOCSCookie_timeData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t GoogleSOCSCookie_timeData::timestamp() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.timeData.timeStamp)
  return _internal_timestamp();
}
inline void GoogleSOCSCookie_timeData::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void GoogleSOCSCookie_timeData::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mozilla.cookieBanner.GoogleSOCSCookie.timeData.timeStamp)
}

// -------------------------------------------------------------------

// GoogleSOCSCookie

// required uint32 gdpr_choice = 1;
inline bool GoogleSOCSCookie::_internal_has_gdpr_choice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GoogleSOCSCookie::has_gdpr_choice() const {
  return _internal_has_gdpr_choice();
}
inline void GoogleSOCSCookie::clear_gdpr_choice() {
  _impl_.gdpr_choice_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GoogleSOCSCookie::_internal_gdpr_choice() const {
  return _impl_.gdpr_choice_;
}
inline uint32_t GoogleSOCSCookie::gdpr_choice() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.gdpr_choice)
  return _internal_gdpr_choice();
}
inline void GoogleSOCSCookie::_internal_set_gdpr_choice(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gdpr_choice_ = value;
}
inline void GoogleSOCSCookie::set_gdpr_choice(uint32_t value) {
  _internal_set_gdpr_choice(value);
  // @@protoc_insertion_point(field_set:mozilla.cookieBanner.GoogleSOCSCookie.gdpr_choice)
}

// required .mozilla.cookieBanner.GoogleSOCSCookie.extraData data = 2;
inline bool GoogleSOCSCookie::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool GoogleSOCSCookie::has_data() const {
  return _internal_has_data();
}
inline void GoogleSOCSCookie::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mozilla::cookieBanner::GoogleSOCSCookie_extraData& GoogleSOCSCookie::_internal_data() const {
  const ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mozilla::cookieBanner::GoogleSOCSCookie_extraData&>(
      ::mozilla::cookieBanner::_GoogleSOCSCookie_extraData_default_instance_);
}
inline const ::mozilla::cookieBanner::GoogleSOCSCookie_extraData& GoogleSOCSCookie::data() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.data)
  return _internal_data();
}
inline void GoogleSOCSCookie::unsafe_arena_set_allocated_data(
    ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozilla.cookieBanner.GoogleSOCSCookie.data)
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* GoogleSOCSCookie::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* GoogleSOCSCookie::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:mozilla.cookieBanner.GoogleSOCSCookie.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* GoogleSOCSCookie::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::cookieBanner::GoogleSOCSCookie_extraData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* GoogleSOCSCookie::mutable_data() {
  ::mozilla::cookieBanner::GoogleSOCSCookie_extraData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:mozilla.cookieBanner.GoogleSOCSCookie.data)
  return _msg;
}
inline void GoogleSOCSCookie::set_allocated_data(::mozilla::cookieBanner::GoogleSOCSCookie_extraData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:mozilla.cookieBanner.GoogleSOCSCookie.data)
}

// required .mozilla.cookieBanner.GoogleSOCSCookie.timeData time = 3;
inline bool GoogleSOCSCookie::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline bool GoogleSOCSCookie::has_time() const {
  return _internal_has_time();
}
inline void GoogleSOCSCookie::clear_time() {
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mozilla::cookieBanner::GoogleSOCSCookie_timeData& GoogleSOCSCookie::_internal_time() const {
  const ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::mozilla::cookieBanner::GoogleSOCSCookie_timeData&>(
      ::mozilla::cookieBanner::_GoogleSOCSCookie_timeData_default_instance_);
}
inline const ::mozilla::cookieBanner::GoogleSOCSCookie_timeData& GoogleSOCSCookie::time() const {
  // @@protoc_insertion_point(field_get:mozilla.cookieBanner.GoogleSOCSCookie.time)
  return _internal_time();
}
inline void GoogleSOCSCookie::unsafe_arena_set_allocated_time(
    ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozilla.cookieBanner.GoogleSOCSCookie.time)
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* GoogleSOCSCookie::release_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* GoogleSOCSCookie::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:mozilla.cookieBanner.GoogleSOCSCookie.time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* GoogleSOCSCookie::_internal_mutable_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::cookieBanner::GoogleSOCSCookie_timeData>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* GoogleSOCSCookie::mutable_time() {
  ::mozilla::cookieBanner::GoogleSOCSCookie_timeData* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:mozilla.cookieBanner.GoogleSOCSCookie.time)
  return _msg;
}
inline void GoogleSOCSCookie::set_allocated_time(::mozilla::cookieBanner::GoogleSOCSCookie_timeData* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_;
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time);
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:mozilla.cookieBanner.GoogleSOCSCookie.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cookieBanner
}  // namespace mozilla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cookieBanner_2eproto
