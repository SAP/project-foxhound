/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

// Defined by gl-matrix.js
/* global mat4 */

// Defined by ssdeep.js
/* global ssdeep */

// =============================================================
// Utility Functions

var debugMsgs = [];
function debug(...args) {
  let msg = "";
  if (!args.length) {
    debugMsgs.push("");
    return;
  }

  let stringify = o => {
    if (typeof o == "string") {
      return o;
    }
    return JSON.stringify(o);
  };

  let stringifiedArgs = args.map(stringify);
  msg += stringifiedArgs.join(" ");
  debugMsgs.push(msg);

  // Also echo it locally
  /* eslint-disable-next-line no-console */
  console.log(msg);
}

async function sha1(message) {
  const msgUint8 = new TextEncoder().encode(message);
  const hashBuffer = await window.crypto.subtle.digest("SHA-1", msgUint8);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hashHex = hashArray.map(b => b.toString(16).padStart(2, "0")).join("");
  return hashHex;
}

// ==============================================================
// Regular Canvases

function populateTestCanvases() {
  const data = {};
  const kImageBlob =
    "data:content/type;base64,";

  // Canvas 1 is just a box, this is a basic check that we can draw, it does
  // not attempt any fingerprinting.
  var canvas1 = document.getElementById("canvas1");
  var c1 = canvas1.getContext("2d");
  c1.fillStyle = "orange";
  c1.fillRect(100, 100, 50, 50);
  data.canvas1data = sha1(canvas1.toDataURL());

  // Canvas 2 is a polygon with lines, this fingerprints a little via
  // floating point rounding.
  var canvas2 = document.getElementById("canvas2");
  var c2 = canvas2.getContext("2d");
  c2.fillStyle = "blue";
  c2.beginPath();
  c2.moveTo(50, 50);
  c2.lineTo(200, 200);
  c2.lineTo(175, 100);
  c2.closePath();
  c2.fill();
  c2.strokeStyle = "red";
  c2.lineWidth = 5;
  c2.stroke();
  data.canvas2data = sha1(canvas2.toDataURL());

  // Canvas 3 renders an image at a reduced resolution, this also
  // fingerprints via floating point rounding.
  var canvas3 = document.getElementById("canvas3");
  var c3 = canvas3.getContext("2d");
  data.canvas3data = new Promise((resolve, reject) => {
    const image = new Image();
    // CC Public Domain - https://www.flickr.com/photos/birds_and_critters/53695948491/
    image.src = kImageBlob;
    image.onload = () => {
      c3.drawImage(image, 0, 0, canvas3.width, canvas3.height);
      sha1(canvas3.toDataURL()).then(resolve);
    };
    image.onerror = e => {
      reject(e);
    };
  });

  // Canvas 4 renders two rotated semi-transparent boxes.
  var canvas4 = document.getElementById("canvas4");
  var c4 = canvas4.getContext("2d");
  c4.fillStyle = "orange";
  c4.globalAlpha = 0.5;
  c4.translate(100, 100);
  c4.rotate((45.0 * Math.PI) / 180.0);
  c4.fillRect(0, 0, 50, 50);
  c4.rotate((-15.0 * Math.PI) / 180.0);
  c4.fillRect(0, 0, 50, 50);
  data.canvas4data = sha1(canvas4.toDataURL());

  // Canvas 5 renders text with a local font the user might have in a pretty standard configuration
  var canvas5 = document.getElementById("canvas5");
  var c5 = canvas5.getContext("2d");
  c5.fillStyle = "green";
  c5.font = "italic 30px Georgia";
  c5.fillText("The quick brown", 15, 100);
  c5.fillText("fox jumps over", 15, 150);
  c5.fillText("the lazy dog", 15, 200);
  data.canvas5data = sha1(canvas5.toDataURL());

  // Canvas 6 renders text with a local font the user might have but translated, rotated, and with a blurred shadow
  var canvas6 = document.getElementById("canvas6");
  var c6 = canvas6.getContext("2d");
  c6.fillStyle = "green";
  c6.translate(10, 100);
  c6.rotate((45.0 * Math.PI) / 180.0);
  c6.shadowColor = "blue";
  c6.shadowBlur = 50;
  c6.font = "italic 40px Georgia";
  c6.fillText("The quick", 0, 0);
  data.canvas6data = sha1(canvas6.toDataURL());

  // Canvas 7 renders text with a system font.
  var canvas7 = document.getElementById("canvas7");
  var c7 = canvas7.getContext("2d");
  c7.fillStyle = "green";
  c7.font = "italic 30px system-ui";
  c7.fillText("The quick brown", 15, 100);
  c7.fillText("fox jumps over", 15, 150);
  c7.fillText("the lazy dog", 15, 200);
  data.canvas7data = sha1(canvas7.toDataURL());

  // Canvas 8 renders text with a system font.
  var canvas8 = document.getElementById("canvas8");
  var c8 = canvas8.getContext("2d");
  c8.fillStyle = "green";
  c8.translate(10, 100);
  c8.rotate((45.0 * Math.PI) / 180.0);
  c8.shadowColor = "blue";
  c8.shadowBlur = 50;
  c8.font = "italic 40px system-ui";
  c8.fillText("The quick", 0, 0);
  data.canvas8data = sha1(canvas8.toDataURL());

  // Canvas 9 renders text with a supplied font.
  var canvas9 = document.getElementById("canvas9");
  var c9 = canvas9.getContext("2d");
  c9.fillStyle = "green";
  c9.font = "italic 30px LocalFiraSans";
  c9.fillText("The quick brown", 15, 100);
  c9.fillText("fox jumps over", 15, 150);
  c9.fillText("the lazy dog", 15, 200);
  data.canvas9data = sha1(canvas9.toDataURL());

  // Canvas 10 renders text with a supplied font.
  var canvas10 = document.getElementById("canvas10");
  var c10 = canvas10.getContext("2d");
  c10.fillStyle = "green";
  c10.translate(10, 100);
  c10.rotate((45.0 * Math.PI) / 180.0);
  c10.shadowColor = "blue";
  c10.shadowBlur = 50;
  c10.font = "italic 40px LocalFiraSans";
  c10.fillText("The quick", 0, 0);
  data.canvas10data = sha1(canvas10.toDataURL());

  return data;
}

// =======================================================================
// WebGL Canvases

function populateWebGLCanvases() {
  // The following WebGL code came from https://github.com/mdn/dom-examples/blob/4f305d21de796432dac2e9f2961591e4b7f913c0/webgl-examples/tutorial/sample3/webgl-demo.js
  // with some minor modifications

  const data = {};

  // --------------------------------------------------------------------
  // initBuffers
  //
  // Initialize the buffers we'll need. For this demo, we just
  // have one object -- a simple two-dimensional square.
  //
  function initBuffers(gl) {
    // Create a buffer for the square's positions.

    const positionBuffer = gl.createBuffer();

    // Select the positionBuffer as the one to apply buffer
    // operations to from here out.

    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

    // Now create an array of positions for the square.

    const positions = [1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0];

    // Now pass the list of positions into WebGL to build the
    // shape. We do this by creating a Float32Array from the
    // JavaScript array, then use it to fill the current buffer.

    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    // Now set up the colors for the vertices

    var colors = [
      1.0,
      1.0,
      1.0,
      1.0, // white
      1.0,
      0.0,
      0.0,
      1.0, // red
      0.0,
      1.0,
      0.0,
      1.0, // green
      0.0,
      0.0,
      1.0,
      1.0, // blue
    ];

    const colorBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);

    return {
      position: positionBuffer,
      color: colorBuffer,
    };
  }

  // --------------------------------------------------------------------
  // Draw the scene.
  function drawScene(gl, programInfo, buffers) {
    gl.clearColor(0.0, 0.0, 0.0, 1.0); // Clear to black, fully opaque
    gl.clearDepth(1.0); // Clear everything
    gl.enable(gl.DEPTH_TEST); // Enable depth testing
    gl.depthFunc(gl.LEQUAL); // Near things obscure far things

    // Clear the canvas before we start drawing on it.

    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    // Create a perspective matrix, a special matrix that is
    // used to simulate the distortion of perspective in a camera.
    // Our field of view is 45 degrees, with a width/height
    // ratio that matches the display size of the canvas
    // and we only want to see objects between 0.1 units
    // and 100 units away from the camera.

    const fieldOfView = (45 * Math.PI) / 180; // in radians
    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
    const zNear = 0.1;
    const zFar = 100.0;
    const projectionMatrix = mat4.create();

    // note: glmatrix.js always has the first argument
    // as the destination to receive the result.
    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);

    // Set the drawing position to the "identity" point, which is
    // the center of the scene.
    const modelViewMatrix = mat4.create();

    var squareRotation = 1.0;

    // Now move the drawing position a bit to where we want to
    // start drawing the square.

    mat4.translate(
      modelViewMatrix, // destination matrix
      modelViewMatrix, // matrix to translate
      [-0.0, 0.0, -6.0]
    ); // amount to translate
    mat4.rotate(
      modelViewMatrix, // destination matrix
      modelViewMatrix, // matrix to rotate
      squareRotation, // amount to rotate in radians
      [0, 0, 1]
    ); // axis to rotate around

    // Tell WebGL how to pull out the positions from the position
    // buffer into the vertexPosition attribute
    {
      const numComponents = 2;
      const type = gl.FLOAT;
      const normalize = false;
      const stride = 0;
      const offset = 0;
      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
      gl.vertexAttribPointer(
        programInfo.attribLocations.vertexPosition,
        numComponents,
        type,
        normalize,
        stride,
        offset
      );
      gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);
    }

    // Tell WebGL how to pull out the colors from the color buffer
    // into the vertexColor attribute.
    {
      const numComponents = 4;
      const type = gl.FLOAT;
      const normalize = false;
      const stride = 0;
      const offset = 0;
      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);
      gl.vertexAttribPointer(
        programInfo.attribLocations.vertexColor,
        numComponents,
        type,
        normalize,
        stride,
        offset
      );
      gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);
    }

    // Tell WebGL to use our program when drawing

    gl.useProgram(programInfo.program);

    // Set the shader uniforms

    gl.uniformMatrix4fv(
      programInfo.uniformLocations.projectionMatrix,
      false,
      projectionMatrix
    );
    gl.uniformMatrix4fv(
      programInfo.uniformLocations.modelViewMatrix,
      false,
      modelViewMatrix
    );

    {
      const offset = 0;
      const vertexCount = 4;
      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);
    }
  }

  // --------------------------------------------------------------------
  // Initialize a shader program, so WebGL knows how to draw our data
  function initShaderProgram(gl, vsSource, fsSource) {
    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);
    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);

    // Create the shader program

    const shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    // If creating the shader program failed, alert

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      alert(
        "Unable to initialize the shader program: " +
          gl.getProgramInfoLog(shaderProgram)
      );
      return null;
    }

    return shaderProgram;
  }

  // --------------------------------------------------------------------
  //
  // creates a shader of the given type, uploads the source and
  // compiles it.
  //
  function loadShader(gl, type, source) {
    const shader = gl.createShader(type);

    // Send the source to the shader object
    gl.shaderSource(shader, source);

    // Compile the shader program
    gl.compileShader(shader);

    // See if it compiled successfully
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      alert(
        "An error occurred compiling the shaders: " +
          gl.getShaderInfoLog(shader)
      );
      gl.deleteShader(shader);
      return null;
    }

    return shader;
  }

  // --------------------------------------------------------------------
  const canvas = document.getElementById("glcanvas");
  const gl = canvas.getContext("webgl");

  // If we don't have a GL context, give up now

  if (!gl) {
    alert(
      "Unable to initialize WebGL. Your browser or machine may not support it."
    );
    return {};
  }

  // Vertex shader program

  const vsSource = `
    attribute vec4 aVertexPosition;
    attribute vec4 aVertexColor;

    uniform mat4 uModelViewMatrix;
    uniform mat4 uProjectionMatrix;

    varying lowp vec4 vColor;

    void main(void) {
      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
      vColor = aVertexColor;
    }
  `;

  // Fragment shader program

  const fsSource = `
    varying lowp vec4 vColor;

    void main(void) {
      gl_FragColor = vColor;
    }
  `;

  // Initialize a shader program; this is where all the lighting
  // for the vertices and so forth is established.
  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);

  // Collect all the info needed to use the shader program.
  // Look up which attributes our shader program is using
  // for aVertexPosition, aVevrtexColor and also
  // look up uniform locations.
  const programInfo = {
    program: shaderProgram,
    attribLocations: {
      vertexPosition: gl.getAttribLocation(shaderProgram, "aVertexPosition"),
      vertexColor: gl.getAttribLocation(shaderProgram, "aVertexColor"),
    },
    uniformLocations: {
      projectionMatrix: gl.getUniformLocation(
        shaderProgram,
        "uProjectionMatrix"
      ),
      modelViewMatrix: gl.getUniformLocation(shaderProgram, "uModelViewMatrix"),
    },
  };

  // Here's where we call the routine that builds all the
  // objects we'll be drawing.
  const buffers = initBuffers(gl);

  // Draw the scene
  drawScene(gl, programInfo, buffers);

  // Write to the fields
  data.glcanvasdata = sha1(canvas.toDataURL());

  return data;
}

// ==============================================================
// Fingerprint JS Canvases
function populateFingerprintJSCanvases() {
  const data = {};

  // fingerprintjs
  // Their fingerprinting code went to the BSL license from MIT in
  // https://github.com/fingerprintjs/fingerprintjs/commit/572fd98f9e4f27b4e854137ea0d53231b3b4eb6e
  // So use the version of the code in the parent commit which is still MIT
  // https://github.com/fingerprintjs/fingerprintjs/blob/aca79b37f7956eee58018e4a317a2bdf8be62d0f/src/sources/canvas.ts

  function renderTextImage(canvas, context) {
    context.textBaseline = "alphabetic";
    context.fillStyle = "#f60";
    context.fillRect(100, 1, 62, 20);

    context.fillStyle = "#069";
    // It's important to use explicit built-in fonts in order to exclude the affect of font preferences
    // (there is a separate entropy source for them).
    context.font = '11pt "Times New Roman"';
    // The choice of emojis has a gigantic impact on rendering performance (especially in FF).
    // Some newer emojis cause it to slow down 50-200 times.
    // There must be no text to the right of the emoji, see https://github.com/fingerprintjs/fingerprintjs/issues/574
    // A bare emoji shouldn't be used because the canvas will change depending on the script encoding:
    // https://github.com/fingerprintjs/fingerprintjs/issues/66
    // Escape sequence shouldn't be used too because Terser will turn it into a bare unicode.
    const printedText = `Cwm fjordbank gly ${
      String.fromCharCode(55357, 56835) /* 😃 */
    }`;
    context.fillText(printedText, 2, 15);
    context.fillStyle = "rgba(102, 204, 0, 0.2)";
    context.font = "18pt Arial";
    context.fillText(printedText, 4, 45);
  }

  function renderGeometryImage(canvas, context) {
    // Canvas blending
    // https://web.archive.org/web/20170826194121/http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/
    // http://jsfiddle.net/NDYV8/16/
    context.globalCompositeOperation = "multiply";
    for (const [color, x, y] of [
      ["#f2f", 40, 40],
      ["#2ff", 80, 40],
      ["#ff2", 60, 80],
    ]) {
      context.fillStyle = color;
      context.beginPath();
      context.arc(x, y, 40, 0, Math.PI * 2, true);
      context.closePath();
      context.fill();
    }

    // Canvas winding
    // https://web.archive.org/web/20130913061632/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/
    // http://jsfiddle.net/NDYV8/19/
    context.fillStyle = "#f9c";
    context.arc(60, 60, 60, 0, Math.PI * 2, true);
    context.arc(60, 60, 20, 0, Math.PI * 2, true);
    context.fill("evenodd");
  }

  const canvas1 = document.getElementById("fingerprintjscanvas1");
  const context1 = canvas1.getContext("2d");
  renderTextImage(canvas1, context1);
  data.fingerprintjscanvas1data = sha1(canvas1.toDataURL());

  const canvas2 = document.getElementById("fingerprintjscanvas2");
  const context2 = canvas2.getContext("2d");
  renderGeometryImage(canvas2, context2);
  data.fingerprintjscanvas2data = sha1(canvas2.toDataURL());

  return data;
}

// ==============================================================
// Speech Synthesis Voices
function populateVoiceList() {
  // Replace long prefixes with short ones to reduce the size of the output.
  const uriPrefixes = [
    [/(?:urn:)?moz-tts:.*?:/, "#m:"],
    [/com\.apple\.speech\.synthesis\.voice\./, "#as:"],
    [/com\.apple\.voice\.compact./, "#ac:"],
    [/com\.apple\.eloquence\./, "#ap:"],
    // Populate with more prefixes as needed.
  ];

  function trimVoiceURI(uri) {
    for (const [re, replacement] of uriPrefixes) {
      uri = uri.replace(re, replacement);
    }
    return uri;
  }

  function sample(voices, count) {
    const range = voices.length - 1;
    if (range <= count) {
      return voices;
    }

    const sampledVoices = [];
    const step = Math.floor(range / count);
    for (let i = 0; i < range; i += step) {
      sampledVoices.push(voices[i]);
    }
    return sampledVoices;
  }

  async function sha256(message) {
    const msgUint8 = new TextEncoder().encode(message);
    const hashBuffer = await window.crypto.subtle.digest("SHA-256", msgUint8);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray
      .map(b => b.toString(16).padStart(2, "0"))
      .join("");
    return hashHex;
  }

  async function stringify(voices) {
    voices = voices
      .map(voice => ({
        voiceURI: trimVoiceURI(voice.voiceURI),
        default: voice.default,
        localService: voice.localService,
      }))
      .sort((a, b) => a.voiceURI.localeCompare(b.voiceURI));

    const [localServices, nonLocalServices] = voices.reduce(
      (acc, voice) => {
        if (voice.localService) {
          acc[0].push(voice.voiceURI);
        } else {
          acc[1].push(voice.voiceURI);
        }
        return acc;
      },
      [[], []]
    );
    const defaultVoice = voices.find(voice => voice.default);

    voices = voices.map(voice => voice.voiceURI);

    return JSON.stringify({
      count: voices.length,
      localServices: localServices.length,
      defaultVoice: defaultVoice ? defaultVoice.voiceURI : null,
      samples: sample(voices, 5),
      sha256: await sha256(voices.join("|")),
      allHash: ssdeep.digest(voices.join("|")),
      localHash: ssdeep.digest(localServices.join("|")),
      nonLocalHash: ssdeep.digest(nonLocalServices.join("|")),
    });
  }

  function fetchVoices() {
    const promise = new Promise(resolve => {
      speechSynthesis.addEventListener("voiceschanged", function () {
        resolve(speechSynthesis.getVoices());
      });

      if (speechSynthesis.getVoices().length !== 0) {
        resolve(speechSynthesis.getVoices());
      }
    });

    const timeout = new Promise(resolve => {
      setTimeout(() => {
        resolve([]);
      }, 5000);
    });

    return Promise.race([promise, timeout]);
  }

  return {
    voices: fetchVoices().then(stringify),
  };
}

function populateMediaCapabilities() {
  // Decoding: MP4 and WEBM are PDM dependant, while the other types are not, so for MP4 and WEBM we manually check for mimetypes.
  // We also don't make an extra check for media-source as both file and media-source end up calling the same code path except for
  // some prefs that block some mime types but we collect them.
  // Encoding: It isn't dependant on hardware, so we just skip it, but collect media.encoder.webm.enabled pref.
  const mimeTypes = {
    audio: [
      // WEBM
      "audio/webm; codecs=vorbis",
      "audio/webm; codecs=opus",
      // MP4
      "audio/mp4; codecs=mp4a.40.2",
      "audio/mp4; codecs=mp3",
      "audio/mp4; codecs=opus",
      "audio/mp4; codecs=flac",
    ],
    video: [
      // WEBM
      "video/webm; codecs=vp9",
      "video/webm; codecs=vp8",
      "video/webm; codecs=av1",
      // MP4
      "video/mp4; codecs=vp9",
      "video/mp4; codecs=vp8",
      "video/mp4; codecs=hev1.1.6.L123.B0",
      "video/mp4; codecs=avc1.64001F",
    ],
  };

  const audioConfig = {
    type: "file",
    audio: {
      channels: 2,
      bitrate: 64000,
      samplerate: 44000,
    },
  };

  const videoConfig = {
    type: "file",
    video: {
      width: 1280,
      height: 720,
      bitrate: 10000,
      framerate: 30,
    },
  };

  async function getCapabilities() {
    // Firefox reports all supported audio codecs as smooth and power efficient
    // so we just check supported codecs for audio
    const capabilities = {
      unsupported: [],
      videos: {},
    };

    for (const audioMime of mimeTypes.audio) {
      audioConfig.audio.contentType = audioMime;
      const capability = await navigator.mediaCapabilities.decodingInfo(
        audioConfig
      );
      if (!capability.supported) {
        capabilities.unsupported.push(audioMime);
      }
    }

    for (const videoMime of mimeTypes.video) {
      videoConfig.video.contentType = videoMime;
      const capability = await navigator.mediaCapabilities.decodingInfo(
        videoConfig
      );
      if (!capability.supported) {
        capabilities.unsupported.push(videoMime);
      } else {
        capabilities.videos[videoMime] = {
          smooth: capability.smooth,
          powerEfficient: capability.powerEfficient,
        };
      }
    }

    return JSON.stringify(capabilities);
  }

  return {
    mediaCapabilities: getCapabilities(),
  };
}

function populateAudioFingerprint() {
  // Trimmed down version of https://github.com/fingerprintjs/fingerprintjs/blob/c463ca034747df80d95cc96a0a9c686d8cd001a5/src/sources/audio.ts
  // At that time, fingerprintjs was licensed with MIT.
  const hashFromIndex = 4500;
  const hashToIndex = 5000;
  const context = new window.OfflineAudioContext(1, hashToIndex, 44100);

  const oscillator = context.createOscillator();
  oscillator.type = "triangle";
  oscillator.frequency.value = 10000;

  const compressor = context.createDynamicsCompressor();
  compressor.threshold.value = -50;
  compressor.knee.value = 40;
  compressor.ratio.value = 12;
  compressor.attack.value = 0;
  compressor.release.value = 0.25;

  oscillator.connect(compressor);
  compressor.connect(context.destination);
  oscillator.start(0);

  const [renderPromise, finishRendering] = startRenderingAudio(context);
  const fingerprintPromise = renderPromise.then(
    buffer => getHash(buffer.getChannelData(0).subarray(hashFromIndex)),
    error => {
      if (error === "TIMEOUT" || error.name === "SUSPENDED") {
        return "TIMEOUT";
      }
      throw error;
    }
  );

  /**
   * Starts rendering the audio context.
   * When the returned function is called, the render process starts finishing.
   */
  function startRenderingAudio(context) {
    const renderTryMaxCount = 3;
    const renderRetryDelay = 500;
    const runningMaxAwaitTime = 500;
    const runningSufficientTime = 5000;
    let finalize = () => undefined;

    const resultPromise = new Promise((resolve, reject) => {
      let isFinalized = false;
      let renderTryCount = 0;
      let startedRunningAt = 0;

      context.oncomplete = event => resolve(event.renderedBuffer);

      const startRunningTimeout = () => {
        setTimeout(
          () => reject("TIMEMOUT"),
          Math.min(
            runningMaxAwaitTime,
            startedRunningAt + runningSufficientTime - Date.now()
          )
        );
      };

      const tryRender = () => {
        try {
          context.startRendering();

          switch (context.state) {
            case "running":
              startedRunningAt = Date.now();
              if (isFinalized) {
                startRunningTimeout();
              }
              break;

            // Sometimes the audio context doesn't start after calling `startRendering` (in addition to the cases where
            // audio context doesn't start at all). A known case is starting an audio context when the browser tab is in
            // background on iPhone. Retries usually help in this case.
            case "suspended":
              // The audio context can reject starting until the tab is in foreground. Long fingerprint duration
              // in background isn't a problem, therefore the retry attempts don't count in background. It can lead to
              // a situation when a fingerprint takes very long time and finishes successfully. FYI, the audio context
              // can be suspended when `document.hidden === false` and start running after a retry.
              if (!document.hidden) {
                renderTryCount++;
              }
              if (isFinalized && renderTryCount >= renderTryMaxCount) {
                reject("SUSPENDED");
              } else {
                setTimeout(tryRender, renderRetryDelay);
              }
              break;
          }
        } catch (error) {
          reject(error);
        }
      };

      tryRender();

      finalize = () => {
        if (!isFinalized) {
          isFinalized = true;
          if (startedRunningAt > 0) {
            startRunningTimeout();
          }
        }
      };
    });

    return [resultPromise, finalize];
  }

  function getHash(signal) {
    let hash = 0;
    for (let i = 0; i < signal.length; ++i) {
      hash += Math.abs(signal[i]);
    }
    // return as string for Glean.
    // We probably don't want use sha-1/256 etc. as fingerprintjs
    // states a difference of 0.0000022 implies a different device
    // so we are actually interested in the number. We multiply by
    // 10e7 and submit as int.
    return hash * 10e7;
  }

  finishRendering();

  return {
    audioFingerprint: fingerprintPromise,
  };
}

// =======================================================================
// Setup & Populating

/* Pick any local font, we just don't want to needlessly increase binary size */
const LocalFiraSans = new FontFace(
  "LocalFiraSans",
  "url('chrome://pocket/content/panels/fonts/FiraSans-Regular.woff') format('woff')"
);

(async () => {
  const font = await LocalFiraSans.load();
  document.fonts.add(font);

  // Data contains key: (Promise<any> | any) pairs. The keys are identifiers
  // for the data and the values are either a promise that returns a value,
  // or a value. Promises are awaited and values are resolved immediately.
  const data = {
    ...populateTestCanvases(),
    ...populateWebGLCanvases(),
    ...populateFingerprintJSCanvases(),
    ...populateVoiceList(),
    ...populateMediaCapabilities(),
    ...populateAudioFingerprint(),
  };

  debug("Awaiting", Object.keys(data).length, "data promises.");
  await Promise.allSettled(Object.values(data));

  debug("Sizes of extractions:");
  const output = {};
  for (const key in data) {
    try {
      output[key] = await data[key];
      debug(key, output[key].length);
    } catch (e) {
      debug("Promise rejected for", key, "Error:", e);
    }
  }

  document.dispatchEvent(
    new CustomEvent("UserCharacteristicsDataDone", {
      bubbles: true,
      detail: {
        debug: debugMsgs,
        output,
      },
    })
  );
})();
